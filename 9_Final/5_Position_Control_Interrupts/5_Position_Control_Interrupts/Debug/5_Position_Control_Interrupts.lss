
5_Position_Control_Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00002c7e  00002d12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  00800214  00800214  00002d26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002d26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00002d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c4c  00000000  00000000  00002f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f16  00000000  00000000  00004b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017bc  00000000  00000000  00005aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000650  00000000  00000000  00007260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099c  00000000  00000000  000078b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb3  00000000  00000000  0000824c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00008eff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__vector_5>
      18:	dd c7       	rjmp	.+4026   	; 0xfd4 <__vector_6>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e9 c2       	rjmp	.+1490   	; 0x6a0 <__vector_51>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e7       	ldi	r30, 0x7E	; 126
      fc:	fc e2       	ldi	r31, 0x2C	; 44
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 31       	cpi	r26, 0x14	; 20
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a4 e1       	ldi	r26, 0x14	; 20
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a7 3b       	cpi	r26, 0xB7	; 183
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	db d4       	rcall	.+2486   	; 0xad6 <main>
     120:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <USART_init>:




void USART_init(unsigned int baud)
{
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	00 d0       	rcall	.+0      	; 0x12c <USART_init+0x6>
     12c:	1f 92       	push	r1
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
     132:	9c 83       	std	Y+4, r25	; 0x04
     134:	8b 83       	std	Y+3, r24	; 0x03
	cli();
     136:	f8 94       	cli
	unsigned int ubrr = FOSC/16/baud-1;
     138:	8b 81       	ldd	r24, Y+3	; 0x03
     13a:	9c 81       	ldd	r25, Y+4	; 0x04
     13c:	9c 01       	movw	r18, r24
     13e:	40 e0       	ldi	r20, 0x00	; 0
     140:	50 e0       	ldi	r21, 0x00	; 0
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	90 e1       	ldi	r25, 0x10	; 16
     146:	ae e0       	ldi	r26, 0x0E	; 14
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	bc 01       	movw	r22, r24
     14c:	cd 01       	movw	r24, r26
     14e:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <__divmodsi4>
     152:	da 01       	movw	r26, r20
     154:	c9 01       	movw	r24, r18
     156:	01 97       	sbiw	r24, 0x01	; 1
     158:	9a 83       	std	Y+2, r25	; 0x02
     15a:	89 83       	std	Y+1, r24	; 0x01
	UBRR2H = (unsigned char) (ubrr >> 8);		// set baud rate
     15c:	85 ed       	ldi	r24, 0xD5	; 213
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	29 81       	ldd	r18, Y+1	; 0x01
     162:	3a 81       	ldd	r19, Y+2	; 0x02
     164:	23 2f       	mov	r18, r19
     166:	33 27       	eor	r19, r19
     168:	fc 01       	movw	r30, r24
     16a:	20 83       	st	Z, r18
	UBRR2L = (unsigned char) ubrr;				// set baud rate
     16c:	84 ed       	ldi	r24, 0xD4	; 212
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	29 81       	ldd	r18, Y+1	; 0x01
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
	UCSR2B = ( (1<< TXEN2) | (1 << RXEN2) | (1 << RXCIE2) );	// enable TX,RX,RX complete interrupt
     176:	81 ed       	ldi	r24, 0xD1	; 209
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	28 e9       	ldi	r18, 0x98	; 152
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18
	UCSR0C = ( (1 << UCSZ21) | (1 << UCSZ20) );  // 8 bit data frame and 1 stop bit
     180:	82 ec       	ldi	r24, 0xC2	; 194
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	26 e0       	ldi	r18, 0x06	; 6
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
	sei();
     18a:	78 94       	sei
}
     18c:	00 00       	nop
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	0f 90       	pop	r0
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <USART_Receive>:


char USART_Receive(void)
{
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
	while ( !( UCSR2A & ( 1<< RXC2) ) );
     1a4:	00 00       	nop
     1a6:	80 ed       	ldi	r24, 0xD0	; 208
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	fc 01       	movw	r30, r24
     1ac:	80 81       	ld	r24, Z
     1ae:	88 23       	and	r24, r24
     1b0:	d4 f7       	brge	.-12     	; 0x1a6 <USART_Receive+0xa>
	return (char) UDR2;
     1b2:	86 ed       	ldi	r24, 0xD6	; 214
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	fc 01       	movw	r30, r24
     1b8:	80 81       	ld	r24, Z
}
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	08 95       	ret

000001c0 <USART_Transmit>:


void USART_Transmit(unsigned char data)
{
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	1f 92       	push	r1
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	89 83       	std	Y+1, r24	; 0x01
	while( !( UCSR2A & (1<< UDRE2) ) );
     1cc:	00 00       	nop
     1ce:	80 ed       	ldi	r24, 0xD0	; 208
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	fc 01       	movw	r30, r24
     1d4:	80 81       	ld	r24, Z
     1d6:	88 2f       	mov	r24, r24
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	80 72       	andi	r24, 0x20	; 32
     1dc:	99 27       	eor	r25, r25
     1de:	89 2b       	or	r24, r25
     1e0:	b1 f3       	breq	.-20     	; 0x1ce <USART_Transmit+0xe>
	UDR2 = data;
     1e2:	86 ed       	ldi	r24, 0xD6	; 214
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	29 81       	ldd	r18, Y+1	; 0x01
     1e8:	fc 01       	movw	r30, r24
     1ea:	20 83       	st	Z, r18
	
}
     1ec:	00 00       	nop
     1ee:	0f 90       	pop	r0
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <getNextOrientation>:

char getNextOrientation(char* current_position_x,char* current_position_y,char** next_position_x,char** next_position_y)
{
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	cd b7       	in	r28, 0x3d	; 61
     1fc:	de b7       	in	r29, 0x3e	; 62
     1fe:	28 97       	sbiw	r28, 0x08	; 8
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	f8 94       	cli
     204:	de bf       	out	0x3e, r29	; 62
     206:	0f be       	out	0x3f, r0	; 63
     208:	cd bf       	out	0x3d, r28	; 61
     20a:	9a 83       	std	Y+2, r25	; 0x02
     20c:	89 83       	std	Y+1, r24	; 0x01
     20e:	7c 83       	std	Y+4, r23	; 0x04
     210:	6b 83       	std	Y+3, r22	; 0x03
     212:	5e 83       	std	Y+6, r21	; 0x06
     214:	4d 83       	std	Y+5, r20	; 0x05
     216:	38 87       	std	Y+8, r19	; 0x08
     218:	2f 83       	std	Y+7, r18	; 0x07
	if( **next_position_x == '?' || **next_position_y == '?' )
     21a:	8d 81       	ldd	r24, Y+5	; 0x05
     21c:	9e 81       	ldd	r25, Y+6	; 0x06
     21e:	fc 01       	movw	r30, r24
     220:	80 81       	ld	r24, Z
     222:	91 81       	ldd	r25, Z+1	; 0x01
     224:	fc 01       	movw	r30, r24
     226:	80 81       	ld	r24, Z
     228:	8f 33       	cpi	r24, 0x3F	; 63
     22a:	49 f0       	breq	.+18     	; 0x23e <getNextOrientation+0x48>
     22c:	8f 81       	ldd	r24, Y+7	; 0x07
     22e:	98 85       	ldd	r25, Y+8	; 0x08
     230:	fc 01       	movw	r30, r24
     232:	80 81       	ld	r24, Z
     234:	91 81       	ldd	r25, Z+1	; 0x01
     236:	fc 01       	movw	r30, r24
     238:	80 81       	ld	r24, Z
     23a:	8f 33       	cpi	r24, 0x3F	; 63
     23c:	81 f4       	brne	.+32     	; 0x25e <getNextOrientation+0x68>
	{
		*next_position_x = &path[0];
     23e:	8d 81       	ldd	r24, Y+5	; 0x05
     240:	9e 81       	ldd	r25, Y+6	; 0x06
     242:	2f e1       	ldi	r18, 0x1F	; 31
     244:	32 e0       	ldi	r19, 0x02	; 2
     246:	fc 01       	movw	r30, r24
     248:	31 83       	std	Z+1, r19	; 0x01
     24a:	20 83       	st	Z, r18
		*next_position_y = &path[1];
     24c:	8f 81       	ldd	r24, Y+7	; 0x07
     24e:	98 85       	ldd	r25, Y+8	; 0x08
     250:	20 e2       	ldi	r18, 0x20	; 32
     252:	32 e0       	ldi	r19, 0x02	; 2
     254:	fc 01       	movw	r30, r24
     256:	31 83       	std	Z+1, r19	; 0x01
     258:	20 83       	st	Z, r18
		return 'x';
     25a:	88 e7       	ldi	r24, 0x78	; 120
     25c:	34 c1       	rjmp	.+616    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	}
	if(*current_position_x == **next_position_x && *current_position_y <= **next_position_y){
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	fc 01       	movw	r30, r24
     264:	20 81       	ld	r18, Z
     266:	8d 81       	ldd	r24, Y+5	; 0x05
     268:	9e 81       	ldd	r25, Y+6	; 0x06
     26a:	fc 01       	movw	r30, r24
     26c:	80 81       	ld	r24, Z
     26e:	91 81       	ldd	r25, Z+1	; 0x01
     270:	fc 01       	movw	r30, r24
     272:	80 81       	ld	r24, Z
     274:	28 17       	cp	r18, r24
     276:	09 f0       	breq	.+2      	; 0x27a <getNextOrientation+0x84>
     278:	3f c0       	rjmp	.+126    	; 0x2f8 <getNextOrientation+0x102>
     27a:	8b 81       	ldd	r24, Y+3	; 0x03
     27c:	9c 81       	ldd	r25, Y+4	; 0x04
     27e:	fc 01       	movw	r30, r24
     280:	20 81       	ld	r18, Z
     282:	8f 81       	ldd	r24, Y+7	; 0x07
     284:	98 85       	ldd	r25, Y+8	; 0x08
     286:	fc 01       	movw	r30, r24
     288:	80 81       	ld	r24, Z
     28a:	91 81       	ldd	r25, Z+1	; 0x01
     28c:	fc 01       	movw	r30, r24
     28e:	80 81       	ld	r24, Z
     290:	82 17       	cp	r24, r18
     292:	90 f1       	brcs	.+100    	; 0x2f8 <getNextOrientation+0x102>
		*current_position_x = **next_position_x;
     294:	8d 81       	ldd	r24, Y+5	; 0x05
     296:	9e 81       	ldd	r25, Y+6	; 0x06
     298:	fc 01       	movw	r30, r24
     29a:	80 81       	ld	r24, Z
     29c:	91 81       	ldd	r25, Z+1	; 0x01
     29e:	fc 01       	movw	r30, r24
     2a0:	20 81       	ld	r18, Z
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	9a 81       	ldd	r25, Y+2	; 0x02
     2a6:	fc 01       	movw	r30, r24
     2a8:	20 83       	st	Z, r18
		*current_position_y = **next_position_y;
     2aa:	8f 81       	ldd	r24, Y+7	; 0x07
     2ac:	98 85       	ldd	r25, Y+8	; 0x08
     2ae:	fc 01       	movw	r30, r24
     2b0:	80 81       	ld	r24, Z
     2b2:	91 81       	ldd	r25, Z+1	; 0x01
     2b4:	fc 01       	movw	r30, r24
     2b6:	20 81       	ld	r18, Z
     2b8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ba:	9c 81       	ldd	r25, Y+4	; 0x04
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18

		*next_position_x = *next_position_x + 2;
     2c0:	8d 81       	ldd	r24, Y+5	; 0x05
     2c2:	9e 81       	ldd	r25, Y+6	; 0x06
     2c4:	fc 01       	movw	r30, r24
     2c6:	80 81       	ld	r24, Z
     2c8:	91 81       	ldd	r25, Z+1	; 0x01
     2ca:	9c 01       	movw	r18, r24
     2cc:	2e 5f       	subi	r18, 0xFE	; 254
     2ce:	3f 4f       	sbci	r19, 0xFF	; 255
     2d0:	8d 81       	ldd	r24, Y+5	; 0x05
     2d2:	9e 81       	ldd	r25, Y+6	; 0x06
     2d4:	fc 01       	movw	r30, r24
     2d6:	31 83       	std	Z+1, r19	; 0x01
     2d8:	20 83       	st	Z, r18
		*next_position_y = *next_position_y + 2;
     2da:	8f 81       	ldd	r24, Y+7	; 0x07
     2dc:	98 85       	ldd	r25, Y+8	; 0x08
     2de:	fc 01       	movw	r30, r24
     2e0:	80 81       	ld	r24, Z
     2e2:	91 81       	ldd	r25, Z+1	; 0x01
     2e4:	9c 01       	movw	r18, r24
     2e6:	2e 5f       	subi	r18, 0xFE	; 254
     2e8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ea:	8f 81       	ldd	r24, Y+7	; 0x07
     2ec:	98 85       	ldd	r25, Y+8	; 0x08
     2ee:	fc 01       	movw	r30, r24
     2f0:	31 83       	std	Z+1, r19	; 0x01
     2f2:	20 83       	st	Z, r18

		return 'N';
     2f4:	8e e4       	ldi	r24, 0x4E	; 78
     2f6:	e7 c0       	rjmp	.+462    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	}
	else if(*current_position_x <= **next_position_x && *current_position_y == **next_position_y){
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	9a 81       	ldd	r25, Y+2	; 0x02
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 81       	ld	r18, Z
     300:	8d 81       	ldd	r24, Y+5	; 0x05
     302:	9e 81       	ldd	r25, Y+6	; 0x06
     304:	fc 01       	movw	r30, r24
     306:	80 81       	ld	r24, Z
     308:	91 81       	ldd	r25, Z+1	; 0x01
     30a:	fc 01       	movw	r30, r24
     30c:	80 81       	ld	r24, Z
     30e:	82 17       	cp	r24, r18
     310:	08 f4       	brcc	.+2      	; 0x314 <getNextOrientation+0x11e>
     312:	3f c0       	rjmp	.+126    	; 0x392 <getNextOrientation+0x19c>
     314:	8b 81       	ldd	r24, Y+3	; 0x03
     316:	9c 81       	ldd	r25, Y+4	; 0x04
     318:	fc 01       	movw	r30, r24
     31a:	20 81       	ld	r18, Z
     31c:	8f 81       	ldd	r24, Y+7	; 0x07
     31e:	98 85       	ldd	r25, Y+8	; 0x08
     320:	fc 01       	movw	r30, r24
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	fc 01       	movw	r30, r24
     328:	80 81       	ld	r24, Z
     32a:	28 17       	cp	r18, r24
     32c:	91 f5       	brne	.+100    	; 0x392 <getNextOrientation+0x19c>
		*current_position_x = **next_position_x;
     32e:	8d 81       	ldd	r24, Y+5	; 0x05
     330:	9e 81       	ldd	r25, Y+6	; 0x06
     332:	fc 01       	movw	r30, r24
     334:	80 81       	ld	r24, Z
     336:	91 81       	ldd	r25, Z+1	; 0x01
     338:	fc 01       	movw	r30, r24
     33a:	20 81       	ld	r18, Z
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	9a 81       	ldd	r25, Y+2	; 0x02
     340:	fc 01       	movw	r30, r24
     342:	20 83       	st	Z, r18
		*current_position_y = **next_position_y;
     344:	8f 81       	ldd	r24, Y+7	; 0x07
     346:	98 85       	ldd	r25, Y+8	; 0x08
     348:	fc 01       	movw	r30, r24
     34a:	80 81       	ld	r24, Z
     34c:	91 81       	ldd	r25, Z+1	; 0x01
     34e:	fc 01       	movw	r30, r24
     350:	20 81       	ld	r18, Z
     352:	8b 81       	ldd	r24, Y+3	; 0x03
     354:	9c 81       	ldd	r25, Y+4	; 0x04
     356:	fc 01       	movw	r30, r24
     358:	20 83       	st	Z, r18

		*next_position_x = *next_position_x + 2;
     35a:	8d 81       	ldd	r24, Y+5	; 0x05
     35c:	9e 81       	ldd	r25, Y+6	; 0x06
     35e:	fc 01       	movw	r30, r24
     360:	80 81       	ld	r24, Z
     362:	91 81       	ldd	r25, Z+1	; 0x01
     364:	9c 01       	movw	r18, r24
     366:	2e 5f       	subi	r18, 0xFE	; 254
     368:	3f 4f       	sbci	r19, 0xFF	; 255
     36a:	8d 81       	ldd	r24, Y+5	; 0x05
     36c:	9e 81       	ldd	r25, Y+6	; 0x06
     36e:	fc 01       	movw	r30, r24
     370:	31 83       	std	Z+1, r19	; 0x01
     372:	20 83       	st	Z, r18
		*next_position_y = *next_position_y + 2;
     374:	8f 81       	ldd	r24, Y+7	; 0x07
     376:	98 85       	ldd	r25, Y+8	; 0x08
     378:	fc 01       	movw	r30, r24
     37a:	80 81       	ld	r24, Z
     37c:	91 81       	ldd	r25, Z+1	; 0x01
     37e:	9c 01       	movw	r18, r24
     380:	2e 5f       	subi	r18, 0xFE	; 254
     382:	3f 4f       	sbci	r19, 0xFF	; 255
     384:	8f 81       	ldd	r24, Y+7	; 0x07
     386:	98 85       	ldd	r25, Y+8	; 0x08
     388:	fc 01       	movw	r30, r24
     38a:	31 83       	std	Z+1, r19	; 0x01
     38c:	20 83       	st	Z, r18

		return 'E';
     38e:	85 e4       	ldi	r24, 0x45	; 69
     390:	9a c0       	rjmp	.+308    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	}
	else if(*current_position_x == **next_position_x && *current_position_y >= **next_position_y){
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	9a 81       	ldd	r25, Y+2	; 0x02
     396:	fc 01       	movw	r30, r24
     398:	20 81       	ld	r18, Z
     39a:	8d 81       	ldd	r24, Y+5	; 0x05
     39c:	9e 81       	ldd	r25, Y+6	; 0x06
     39e:	fc 01       	movw	r30, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	91 81       	ldd	r25, Z+1	; 0x01
     3a4:	fc 01       	movw	r30, r24
     3a6:	80 81       	ld	r24, Z
     3a8:	28 17       	cp	r18, r24
     3aa:	09 f0       	breq	.+2      	; 0x3ae <getNextOrientation+0x1b8>
     3ac:	3f c0       	rjmp	.+126    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 81       	ld	r18, Z
     3b6:	8f 81       	ldd	r24, Y+7	; 0x07
     3b8:	98 85       	ldd	r25, Y+8	; 0x08
     3ba:	fc 01       	movw	r30, r24
     3bc:	80 81       	ld	r24, Z
     3be:	91 81       	ldd	r25, Z+1	; 0x01
     3c0:	fc 01       	movw	r30, r24
     3c2:	80 81       	ld	r24, Z
     3c4:	28 17       	cp	r18, r24
     3c6:	90 f1       	brcs	.+100    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		*current_position_x = **next_position_x;
     3c8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ca:	9e 81       	ldd	r25, Y+6	; 0x06
     3cc:	fc 01       	movw	r30, r24
     3ce:	80 81       	ld	r24, Z
     3d0:	91 81       	ldd	r25, Z+1	; 0x01
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 81       	ld	r18, Z
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	9a 81       	ldd	r25, Y+2	; 0x02
     3da:	fc 01       	movw	r30, r24
     3dc:	20 83       	st	Z, r18
		*current_position_y = **next_position_y;
     3de:	8f 81       	ldd	r24, Y+7	; 0x07
     3e0:	98 85       	ldd	r25, Y+8	; 0x08
     3e2:	fc 01       	movw	r30, r24
     3e4:	80 81       	ld	r24, Z
     3e6:	91 81       	ldd	r25, Z+1	; 0x01
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 81       	ld	r18, Z
     3ec:	8b 81       	ldd	r24, Y+3	; 0x03
     3ee:	9c 81       	ldd	r25, Y+4	; 0x04
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18

		*next_position_x = *next_position_x + 2;
     3f4:	8d 81       	ldd	r24, Y+5	; 0x05
     3f6:	9e 81       	ldd	r25, Y+6	; 0x06
     3f8:	fc 01       	movw	r30, r24
     3fa:	80 81       	ld	r24, Z
     3fc:	91 81       	ldd	r25, Z+1	; 0x01
     3fe:	9c 01       	movw	r18, r24
     400:	2e 5f       	subi	r18, 0xFE	; 254
     402:	3f 4f       	sbci	r19, 0xFF	; 255
     404:	8d 81       	ldd	r24, Y+5	; 0x05
     406:	9e 81       	ldd	r25, Y+6	; 0x06
     408:	fc 01       	movw	r30, r24
     40a:	31 83       	std	Z+1, r19	; 0x01
     40c:	20 83       	st	Z, r18
		*next_position_y = *next_position_y + 2;
     40e:	8f 81       	ldd	r24, Y+7	; 0x07
     410:	98 85       	ldd	r25, Y+8	; 0x08
     412:	fc 01       	movw	r30, r24
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	9c 01       	movw	r18, r24
     41a:	2e 5f       	subi	r18, 0xFE	; 254
     41c:	3f 4f       	sbci	r19, 0xFF	; 255
     41e:	8f 81       	ldd	r24, Y+7	; 0x07
     420:	98 85       	ldd	r25, Y+8	; 0x08
     422:	fc 01       	movw	r30, r24
     424:	31 83       	std	Z+1, r19	; 0x01
     426:	20 83       	st	Z, r18

		return 'S';
     428:	83 e5       	ldi	r24, 0x53	; 83
     42a:	4d c0       	rjmp	.+154    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	}
	else if(*current_position_x >= **next_position_x && *current_position_y == **next_position_y){
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	fc 01       	movw	r30, r24
     432:	20 81       	ld	r18, Z
     434:	8d 81       	ldd	r24, Y+5	; 0x05
     436:	9e 81       	ldd	r25, Y+6	; 0x06
     438:	fc 01       	movw	r30, r24
     43a:	80 81       	ld	r24, Z
     43c:	91 81       	ldd	r25, Z+1	; 0x01
     43e:	fc 01       	movw	r30, r24
     440:	80 81       	ld	r24, Z
     442:	28 17       	cp	r18, r24
     444:	08 f4       	brcc	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     446:	3f c0       	rjmp	.+126    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     448:	8b 81       	ldd	r24, Y+3	; 0x03
     44a:	9c 81       	ldd	r25, Y+4	; 0x04
     44c:	fc 01       	movw	r30, r24
     44e:	20 81       	ld	r18, Z
     450:	8f 81       	ldd	r24, Y+7	; 0x07
     452:	98 85       	ldd	r25, Y+8	; 0x08
     454:	fc 01       	movw	r30, r24
     456:	80 81       	ld	r24, Z
     458:	91 81       	ldd	r25, Z+1	; 0x01
     45a:	fc 01       	movw	r30, r24
     45c:	80 81       	ld	r24, Z
     45e:	28 17       	cp	r18, r24
     460:	91 f5       	brne	.+100    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
		*current_position_x = **next_position_x;
     462:	8d 81       	ldd	r24, Y+5	; 0x05
     464:	9e 81       	ldd	r25, Y+6	; 0x06
     466:	fc 01       	movw	r30, r24
     468:	80 81       	ld	r24, Z
     46a:	91 81       	ldd	r25, Z+1	; 0x01
     46c:	fc 01       	movw	r30, r24
     46e:	20 81       	ld	r18, Z
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	9a 81       	ldd	r25, Y+2	; 0x02
     474:	fc 01       	movw	r30, r24
     476:	20 83       	st	Z, r18
		*current_position_y = **next_position_y;
     478:	8f 81       	ldd	r24, Y+7	; 0x07
     47a:	98 85       	ldd	r25, Y+8	; 0x08
     47c:	fc 01       	movw	r30, r24
     47e:	80 81       	ld	r24, Z
     480:	91 81       	ldd	r25, Z+1	; 0x01
     482:	fc 01       	movw	r30, r24
     484:	20 81       	ld	r18, Z
     486:	8b 81       	ldd	r24, Y+3	; 0x03
     488:	9c 81       	ldd	r25, Y+4	; 0x04
     48a:	fc 01       	movw	r30, r24
     48c:	20 83       	st	Z, r18

		*next_position_x = *next_position_x + 2;
     48e:	8d 81       	ldd	r24, Y+5	; 0x05
     490:	9e 81       	ldd	r25, Y+6	; 0x06
     492:	fc 01       	movw	r30, r24
     494:	80 81       	ld	r24, Z
     496:	91 81       	ldd	r25, Z+1	; 0x01
     498:	9c 01       	movw	r18, r24
     49a:	2e 5f       	subi	r18, 0xFE	; 254
     49c:	3f 4f       	sbci	r19, 0xFF	; 255
     49e:	8d 81       	ldd	r24, Y+5	; 0x05
     4a0:	9e 81       	ldd	r25, Y+6	; 0x06
     4a2:	fc 01       	movw	r30, r24
     4a4:	31 83       	std	Z+1, r19	; 0x01
     4a6:	20 83       	st	Z, r18
		*next_position_y = *next_position_y + 2;
     4a8:	8f 81       	ldd	r24, Y+7	; 0x07
     4aa:	98 85       	ldd	r25, Y+8	; 0x08
     4ac:	fc 01       	movw	r30, r24
     4ae:	80 81       	ld	r24, Z
     4b0:	91 81       	ldd	r25, Z+1	; 0x01
     4b2:	9c 01       	movw	r18, r24
     4b4:	2e 5f       	subi	r18, 0xFE	; 254
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	8f 81       	ldd	r24, Y+7	; 0x07
     4ba:	98 85       	ldd	r25, Y+8	; 0x08
     4bc:	fc 01       	movw	r30, r24
     4be:	31 83       	std	Z+1, r19	; 0x01
     4c0:	20 83       	st	Z, r18

		return 'W';
     4c2:	87 e5       	ldi	r24, 0x57	; 87
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	}
}
     4c6:	28 96       	adiw	r28, 0x08	; 8
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <getNextMove>:

char getNextMove(char* current_orientation,char next_orientation)
{
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	00 d0       	rcall	.+0      	; 0x4de <getNextMove+0x6>
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	9a 83       	std	Y+2, r25	; 0x02
     4e4:	89 83       	std	Y+1, r24	; 0x01
     4e6:	6b 83       	std	Y+3, r22	; 0x03
	if((*current_orientation == 'N' && next_orientation == 'E') || (*current_orientation == 'E' && next_orientation == 'S') ||
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	9a 81       	ldd	r25, Y+2	; 0x02
     4ec:	fc 01       	movw	r30, r24
     4ee:	80 81       	ld	r24, Z
     4f0:	8e 34       	cpi	r24, 0x4E	; 78
     4f2:	19 f4       	brne	.+6      	; 0x4fa <getNextMove+0x22>
     4f4:	8b 81       	ldd	r24, Y+3	; 0x03
     4f6:	85 34       	cpi	r24, 0x45	; 69
     4f8:	d9 f0       	breq	.+54     	; 0x530 <getNextMove+0x58>
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	9a 81       	ldd	r25, Y+2	; 0x02
     4fe:	fc 01       	movw	r30, r24
     500:	80 81       	ld	r24, Z
     502:	85 34       	cpi	r24, 0x45	; 69
     504:	19 f4       	brne	.+6      	; 0x50c <getNextMove+0x34>
     506:	8b 81       	ldd	r24, Y+3	; 0x03
     508:	83 35       	cpi	r24, 0x53	; 83
     50a:	91 f0       	breq	.+36     	; 0x530 <getNextMove+0x58>
	(*current_orientation=='S' && next_orientation == 'W') || (*current_orientation == 'W' && next_orientation == 'N')){
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	9a 81       	ldd	r25, Y+2	; 0x02
     510:	fc 01       	movw	r30, r24
     512:	80 81       	ld	r24, Z
	}
}

char getNextMove(char* current_orientation,char next_orientation)
{
	if((*current_orientation == 'N' && next_orientation == 'E') || (*current_orientation == 'E' && next_orientation == 'S') ||
     514:	83 35       	cpi	r24, 0x53	; 83
     516:	19 f4       	brne	.+6      	; 0x51e <getNextMove+0x46>
	(*current_orientation=='S' && next_orientation == 'W') || (*current_orientation == 'W' && next_orientation == 'N')){
     518:	8b 81       	ldd	r24, Y+3	; 0x03
     51a:	87 35       	cpi	r24, 0x57	; 87
     51c:	49 f0       	breq	.+18     	; 0x530 <getNextMove+0x58>
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	9a 81       	ldd	r25, Y+2	; 0x02
     522:	fc 01       	movw	r30, r24
     524:	80 81       	ld	r24, Z
     526:	87 35       	cpi	r24, 0x57	; 87
     528:	51 f4       	brne	.+20     	; 0x53e <getNextMove+0x66>
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	8e 34       	cpi	r24, 0x4E	; 78
     52e:	39 f4       	brne	.+14     	; 0x53e <getNextMove+0x66>
		*current_orientation = next_orientation;
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	2b 81       	ldd	r18, Y+3	; 0x03
     536:	fc 01       	movw	r30, r24
     538:	20 83       	st	Z, r18
		return 'R';
     53a:	82 e5       	ldi	r24, 0x52	; 82
     53c:	82 c0       	rjmp	.+260    	; 0x642 <getNextMove+0x16a>
	}
	else if((*current_orientation == 'N' && next_orientation == 'W') || (*current_orientation == 'W' && next_orientation == 'S') ||
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	9a 81       	ldd	r25, Y+2	; 0x02
     542:	fc 01       	movw	r30, r24
     544:	80 81       	ld	r24, Z
     546:	8e 34       	cpi	r24, 0x4E	; 78
     548:	19 f4       	brne	.+6      	; 0x550 <getNextMove+0x78>
     54a:	8b 81       	ldd	r24, Y+3	; 0x03
     54c:	87 35       	cpi	r24, 0x57	; 87
     54e:	d9 f0       	breq	.+54     	; 0x586 <getNextMove+0xae>
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	9a 81       	ldd	r25, Y+2	; 0x02
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	87 35       	cpi	r24, 0x57	; 87
     55a:	19 f4       	brne	.+6      	; 0x562 <getNextMove+0x8a>
     55c:	8b 81       	ldd	r24, Y+3	; 0x03
     55e:	83 35       	cpi	r24, 0x53	; 83
     560:	91 f0       	breq	.+36     	; 0x586 <getNextMove+0xae>
	(*current_orientation=='S' && next_orientation == 'E') || (*current_orientation == 'E' && next_orientation == 'N')){
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	9a 81       	ldd	r25, Y+2	; 0x02
     566:	fc 01       	movw	r30, r24
     568:	80 81       	ld	r24, Z
	if((*current_orientation == 'N' && next_orientation == 'E') || (*current_orientation == 'E' && next_orientation == 'S') ||
	(*current_orientation=='S' && next_orientation == 'W') || (*current_orientation == 'W' && next_orientation == 'N')){
		*current_orientation = next_orientation;
		return 'R';
	}
	else if((*current_orientation == 'N' && next_orientation == 'W') || (*current_orientation == 'W' && next_orientation == 'S') ||
     56a:	83 35       	cpi	r24, 0x53	; 83
     56c:	19 f4       	brne	.+6      	; 0x574 <getNextMove+0x9c>
	(*current_orientation=='S' && next_orientation == 'E') || (*current_orientation == 'E' && next_orientation == 'N')){
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	85 34       	cpi	r24, 0x45	; 69
     572:	49 f0       	breq	.+18     	; 0x586 <getNextMove+0xae>
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	9a 81       	ldd	r25, Y+2	; 0x02
     578:	fc 01       	movw	r30, r24
     57a:	80 81       	ld	r24, Z
     57c:	85 34       	cpi	r24, 0x45	; 69
     57e:	51 f4       	brne	.+20     	; 0x594 <getNextMove+0xbc>
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	8e 34       	cpi	r24, 0x4E	; 78
     584:	39 f4       	brne	.+14     	; 0x594 <getNextMove+0xbc>
		*current_orientation = next_orientation;
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	9a 81       	ldd	r25, Y+2	; 0x02
     58a:	2b 81       	ldd	r18, Y+3	; 0x03
     58c:	fc 01       	movw	r30, r24
     58e:	20 83       	st	Z, r18
		return 'L';
     590:	8c e4       	ldi	r24, 0x4C	; 76
     592:	57 c0       	rjmp	.+174    	; 0x642 <getNextMove+0x16a>
	}
	else if((*current_orientation == 'N' && next_orientation == 'N') || (*current_orientation == 'E' && next_orientation == 'E') ||
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	9a 81       	ldd	r25, Y+2	; 0x02
     598:	fc 01       	movw	r30, r24
     59a:	80 81       	ld	r24, Z
     59c:	8e 34       	cpi	r24, 0x4E	; 78
     59e:	19 f4       	brne	.+6      	; 0x5a6 <getNextMove+0xce>
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	8e 34       	cpi	r24, 0x4E	; 78
     5a4:	d9 f0       	breq	.+54     	; 0x5dc <getNextMove+0x104>
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	9a 81       	ldd	r25, Y+2	; 0x02
     5aa:	fc 01       	movw	r30, r24
     5ac:	80 81       	ld	r24, Z
     5ae:	85 34       	cpi	r24, 0x45	; 69
     5b0:	19 f4       	brne	.+6      	; 0x5b8 <getNextMove+0xe0>
     5b2:	8b 81       	ldd	r24, Y+3	; 0x03
     5b4:	85 34       	cpi	r24, 0x45	; 69
     5b6:	91 f0       	breq	.+36     	; 0x5dc <getNextMove+0x104>
	(*current_orientation=='S' && next_orientation == 'S') || (*current_orientation == 'W' && next_orientation == 'W')){
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	9a 81       	ldd	r25, Y+2	; 0x02
     5bc:	fc 01       	movw	r30, r24
     5be:	80 81       	ld	r24, Z
	else if((*current_orientation == 'N' && next_orientation == 'W') || (*current_orientation == 'W' && next_orientation == 'S') ||
	(*current_orientation=='S' && next_orientation == 'E') || (*current_orientation == 'E' && next_orientation == 'N')){
		*current_orientation = next_orientation;
		return 'L';
	}
	else if((*current_orientation == 'N' && next_orientation == 'N') || (*current_orientation == 'E' && next_orientation == 'E') ||
     5c0:	83 35       	cpi	r24, 0x53	; 83
     5c2:	19 f4       	brne	.+6      	; 0x5ca <getNextMove+0xf2>
	(*current_orientation=='S' && next_orientation == 'S') || (*current_orientation == 'W' && next_orientation == 'W')){
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	83 35       	cpi	r24, 0x53	; 83
     5c8:	49 f0       	breq	.+18     	; 0x5dc <getNextMove+0x104>
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	9a 81       	ldd	r25, Y+2	; 0x02
     5ce:	fc 01       	movw	r30, r24
     5d0:	80 81       	ld	r24, Z
     5d2:	87 35       	cpi	r24, 0x57	; 87
     5d4:	51 f4       	brne	.+20     	; 0x5ea <getNextMove+0x112>
     5d6:	8b 81       	ldd	r24, Y+3	; 0x03
     5d8:	87 35       	cpi	r24, 0x57	; 87
     5da:	39 f4       	brne	.+14     	; 0x5ea <getNextMove+0x112>
		*current_orientation = next_orientation;
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	9a 81       	ldd	r25, Y+2	; 0x02
     5e0:	2b 81       	ldd	r18, Y+3	; 0x03
     5e2:	fc 01       	movw	r30, r24
     5e4:	20 83       	st	Z, r18
		return 'F';
     5e6:	86 e4       	ldi	r24, 0x46	; 70
     5e8:	2c c0       	rjmp	.+88     	; 0x642 <getNextMove+0x16a>
	}
	
	else if((*current_orientation == 'N' && next_orientation == 'S') || (*current_orientation == 'S' && next_orientation == 'N') ||
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	9a 81       	ldd	r25, Y+2	; 0x02
     5ee:	fc 01       	movw	r30, r24
     5f0:	80 81       	ld	r24, Z
     5f2:	8e 34       	cpi	r24, 0x4E	; 78
     5f4:	19 f4       	brne	.+6      	; 0x5fc <getNextMove+0x124>
     5f6:	8b 81       	ldd	r24, Y+3	; 0x03
     5f8:	83 35       	cpi	r24, 0x53	; 83
     5fa:	d9 f0       	breq	.+54     	; 0x632 <getNextMove+0x15a>
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	9a 81       	ldd	r25, Y+2	; 0x02
     600:	fc 01       	movw	r30, r24
     602:	80 81       	ld	r24, Z
     604:	83 35       	cpi	r24, 0x53	; 83
     606:	19 f4       	brne	.+6      	; 0x60e <getNextMove+0x136>
     608:	8b 81       	ldd	r24, Y+3	; 0x03
     60a:	8e 34       	cpi	r24, 0x4E	; 78
     60c:	91 f0       	breq	.+36     	; 0x632 <getNextMove+0x15a>
	(*current_orientation=='W' && next_orientation == 'E') || (*current_orientation == 'E' && next_orientation == 'W'))
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	9a 81       	ldd	r25, Y+2	; 0x02
     612:	fc 01       	movw	r30, r24
     614:	80 81       	ld	r24, Z
	(*current_orientation=='S' && next_orientation == 'S') || (*current_orientation == 'W' && next_orientation == 'W')){
		*current_orientation = next_orientation;
		return 'F';
	}
	
	else if((*current_orientation == 'N' && next_orientation == 'S') || (*current_orientation == 'S' && next_orientation == 'N') ||
     616:	87 35       	cpi	r24, 0x57	; 87
     618:	19 f4       	brne	.+6      	; 0x620 <getNextMove+0x148>
	(*current_orientation=='W' && next_orientation == 'E') || (*current_orientation == 'E' && next_orientation == 'W'))
     61a:	8b 81       	ldd	r24, Y+3	; 0x03
     61c:	85 34       	cpi	r24, 0x45	; 69
     61e:	49 f0       	breq	.+18     	; 0x632 <getNextMove+0x15a>
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	fc 01       	movw	r30, r24
     626:	80 81       	ld	r24, Z
     628:	85 34       	cpi	r24, 0x45	; 69
     62a:	51 f4       	brne	.+20     	; 0x640 <getNextMove+0x168>
     62c:	8b 81       	ldd	r24, Y+3	; 0x03
     62e:	87 35       	cpi	r24, 0x57	; 87
     630:	39 f4       	brne	.+14     	; 0x640 <getNextMove+0x168>
	{
		*current_orientation = next_orientation;
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	2b 81       	ldd	r18, Y+3	; 0x03
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
		return 'T';
     63c:	84 e5       	ldi	r24, 0x54	; 84
     63e:	01 c0       	rjmp	.+2      	; 0x642 <getNextMove+0x16a>
	}
	
	else
	return 'S';
     640:	83 e5       	ldi	r24, 0x53	; 83
}
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <send_fb>:

void send_fb()
{
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
	fb[0] = current_position_x;
     656:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <current_position_x>
     65a:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <fb>
	fb[1] = current_position_y;
     65e:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <current_position_y>
     662:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <fb+0x1>
	fb[2] = current_orientation;
     666:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     66a:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <fb+0x2>
	for(i=0;i<3;i++)
     66e:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <i>
     672:	0e c0       	rjmp	.+28     	; 0x690 <send_fb+0x42>
	{
		USART_Transmit(fb[i]);
     674:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <i>
     678:	88 2f       	mov	r24, r24
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	8d 55       	subi	r24, 0x5D	; 93
     67e:	9d 4f       	sbci	r25, 0xFD	; 253
     680:	fc 01       	movw	r30, r24
     682:	80 81       	ld	r24, Z
     684:	9d dd       	rcall	.-1222   	; 0x1c0 <USART_Transmit>
void send_fb()
{
	fb[0] = current_position_x;
	fb[1] = current_position_y;
	fb[2] = current_orientation;
	for(i=0;i<3;i++)
     686:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <i>
     68a:	8f 5f       	subi	r24, 0xFF	; 255
     68c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <i>
     690:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <i>
     694:	83 30       	cpi	r24, 0x03	; 3
     696:	70 f3       	brcs	.-36     	; 0x674 <send_fb+0x26>
	{
		USART_Transmit(fb[i]);
	}
}
     698:	00 00       	nop
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <__vector_51>:

ISR(USART2_RX_vect)
{
     6a0:	1f 92       	push	r1
     6a2:	0f 92       	push	r0
     6a4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     6a8:	0f 92       	push	r0
     6aa:	11 24       	eor	r1, r1
     6ac:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     6b0:	0f 92       	push	r0
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	2f 93       	push	r18
     6b8:	3f 93       	push	r19
     6ba:	4f 93       	push	r20
     6bc:	5f 93       	push	r21
     6be:	6f 93       	push	r22
     6c0:	7f 93       	push	r23
     6c2:	8f 93       	push	r24
     6c4:	9f 93       	push	r25
     6c6:	af 93       	push	r26
     6c8:	bf 93       	push	r27
     6ca:	ef 93       	push	r30
     6cc:	ff 93       	push	r31
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
	data = UDR2;
     6d6:	86 ed       	ldi	r24, 0xD6	; 214
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	fc 01       	movw	r30, r24
     6dc:	80 81       	ld	r24, Z
     6de:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <data>
	switch(data)
     6e2:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <data>
     6e6:	88 2f       	mov	r24, r24
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	83 32       	cpi	r24, 0x23	; 35
     6ec:	91 05       	cpc	r25, r1
     6ee:	b9 f1       	breq	.+110    	; 0x75e <__vector_51+0xbe>
     6f0:	84 97       	sbiw	r24, 0x24	; 36
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <__vector_51+0x56>
		send_fb();
		break;
	}
	
	
}
     6f4:	42 c0       	rjmp	.+132    	; 0x77a <__vector_51+0xda>
	data = UDR2;
	switch(data)
	{
		
		case '$':
		current_position_x = USART_Receive();
     6f6:	52 dd       	rcall	.-1372   	; 0x19c <USART_Receive>
     6f8:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <current_position_x>
		current_position_y = USART_Receive();
     6fc:	4f dd       	rcall	.-1378   	; 0x19c <USART_Receive>
     6fe:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <current_position_y>
     702:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <i>
		for(i=0;i<130;i++)
     706:	1a c0       	rjmp	.+52     	; 0x73c <__vector_51+0x9c>
     708:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <i>
		{
			path[i] = USART_Receive();
     70c:	08 2f       	mov	r16, r24
     70e:	10 e0       	ldi	r17, 0x00	; 0
     710:	45 dd       	rcall	.-1398   	; 0x19c <USART_Receive>
     712:	28 2f       	mov	r18, r24
     714:	c8 01       	movw	r24, r16
     716:	81 5e       	subi	r24, 0xE1	; 225
     718:	9d 4f       	sbci	r25, 0xFD	; 253
     71a:	fc 01       	movw	r30, r24
     71c:	20 83       	st	Z, r18
     71e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <i>
			if(path[i] == '%')
     722:	88 2f       	mov	r24, r24
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	81 5e       	subi	r24, 0xE1	; 225
     728:	9d 4f       	sbci	r25, 0xFD	; 253
     72a:	fc 01       	movw	r30, r24
     72c:	80 81       	ld	r24, Z
     72e:	85 32       	cpi	r24, 0x25	; 37
     730:	51 f0       	breq	.+20     	; 0x746 <__vector_51+0xa6>
     732:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <i>
	{
		
		case '$':
		current_position_x = USART_Receive();
		current_position_y = USART_Receive();
		for(i=0;i<130;i++)
     736:	8f 5f       	subi	r24, 0xFF	; 255
     738:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <i>
     73c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <i>
     740:	82 38       	cpi	r24, 0x82	; 130
     742:	10 f3       	brcs	.-60     	; 0x708 <__vector_51+0x68>
     744:	01 c0       	rjmp	.+2      	; 0x748 <__vector_51+0xa8>
     746:	00 00       	nop
		{
			path[i] = USART_Receive();
			if(path[i] == '%')
			break;
     748:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
		}
		next_orientation = current_orientation;
     74c:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <next_orientation>
     750:	81 e0       	ldi	r24, 0x01	; 1
		move_flag = 1;
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
     758:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
     75c:	0e c0       	rjmp	.+28     	; 0x77a <__vector_51+0xda>
		break;
     75e:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <current_position_x>
		
		case '#':
		fb[0] = current_position_x;
     762:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <fb>
     766:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <current_position_y>
		fb[1] = current_position_y;
     76a:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <fb+0x1>
     76e:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <next_orientation>
		fb[2] = next_orientation;
     772:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <fb+0x2>
		send_fb();
     776:	6b df       	rcall	.-298    	; 0x64e <send_fb>
     778:	00 00       	nop
		break;
     77a:	00 00       	nop
	}
	
	
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	ff 91       	pop	r31
     782:	ef 91       	pop	r30
     784:	bf 91       	pop	r27
     786:	af 91       	pop	r26
     788:	9f 91       	pop	r25
     78a:	8f 91       	pop	r24
     78c:	7f 91       	pop	r23
     78e:	6f 91       	pop	r22
     790:	5f 91       	pop	r21
     792:	4f 91       	pop	r20
     794:	3f 91       	pop	r19
     796:	2f 91       	pop	r18
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	0f 90       	pop	r0
     79e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     7a2:	0f 90       	pop	r0
     7a4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     7a8:	0f 90       	pop	r0
     7aa:	1f 90       	pop	r1
     7ac:	18 95       	reti

000007ae <path_follow>:
     7ae:	cf 93       	push	r28



char path_follow(unsigned char L_sen, unsigned char C_sen, unsigned char R_sen)
{
     7b0:	df 93       	push	r29
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	61 97       	sbiw	r28, 0x11	; 17
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	8f 87       	std	Y+15, r24	; 0x0f
     7c4:	68 8b       	std	Y+16, r22	; 0x10
     7c6:	49 8b       	std	Y+17, r20	; 0x11
	Flag = 0;
     7c8:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <Flag>
	node_detected = 0;
     7cc:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <node_detected>
	if ( (L_sen > min_thresh) && (C_sen > min_thresh) && (R_sen > min_thresh) )		// Node Detected
     7d0:	8f 85       	ldd	r24, Y+15	; 0x0f
     7d2:	83 33       	cpi	r24, 0x33	; 51
     7d4:	78 f0       	brcs	.+30     	; 0x7f4 <path_follow+0x46>
     7d6:	88 89       	ldd	r24, Y+16	; 0x10
     7d8:	83 33       	cpi	r24, 0x33	; 51
     7da:	60 f0       	brcs	.+24     	; 0x7f4 <path_follow+0x46>
     7dc:	89 89       	ldd	r24, Y+17	; 0x11
     7de:	83 33       	cpi	r24, 0x33	; 51
     7e0:	48 f0       	brcs	.+18     	; 0x7f4 <path_follow+0x46>
	{
		velocity(0,0);
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	69 d2       	rcall	.+1234   	; 0xcba <velocity>
		Flag = 1;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <Flag>
		node_detected = 1;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <node_detected>
	}
	
	if( (L_sen >= min_thresh) && (node_detected == 0) && ( Flag == 0 ) && move_flag )		// Left
     7f4:	8f 85       	ldd	r24, Y+15	; 0x0f
     7f6:	82 33       	cpi	r24, 0x32	; 50
     7f8:	a8 f0       	brcs	.+42     	; 0x824 <path_follow+0x76>
     7fa:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <node_detected>
     7fe:	88 23       	and	r24, r24
     800:	89 f4       	brne	.+34     	; 0x824 <path_follow+0x76>
     802:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <Flag>
     806:	88 23       	and	r24, r24
     808:	69 f4       	brne	.+26     	; 0x824 <path_follow+0x76>
     80a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     80e:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
     812:	89 2b       	or	r24, r25
	{
		forward();
     814:	39 f0       	breq	.+14     	; 0x824 <path_follow+0x76>
     816:	8e d2       	rcall	.+1308   	; 0xd34 <forward>
		velocity(80,180);
     818:	64 eb       	ldi	r22, 0xB4	; 180
     81a:	80 e5       	ldi	r24, 0x50	; 80
     81c:	4e d2       	rcall	.+1180   	; 0xcba <velocity>
		Flag = 1;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <Flag>
	}

	if( (R_sen >= min_thresh) && (node_detected == 0) && ( Flag == 0 ) && move_flag )       // right
     824:	89 89       	ldd	r24, Y+17	; 0x11
     826:	82 33       	cpi	r24, 0x32	; 50
     828:	a8 f0       	brcs	.+42     	; 0x854 <path_follow+0xa6>
     82a:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <node_detected>
     82e:	88 23       	and	r24, r24
     830:	89 f4       	brne	.+34     	; 0x854 <path_follow+0xa6>
     832:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <Flag>
     836:	88 23       	and	r24, r24
     838:	69 f4       	brne	.+26     	; 0x854 <path_follow+0xa6>
     83a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     83e:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
     842:	89 2b       	or	r24, r25
	{
		forward();
     844:	39 f0       	breq	.+14     	; 0x854 <path_follow+0xa6>
		velocity(180,80);
     846:	76 d2       	rcall	.+1260   	; 0xd34 <forward>
     848:	60 e5       	ldi	r22, 0x50	; 80
     84a:	84 eb       	ldi	r24, 0xB4	; 180
     84c:	36 d2       	rcall	.+1132   	; 0xcba <velocity>
		Flag = 1;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <Flag>
	}
	

	if ( (C_sen >= min_thresh) && (node_detected == 0) && ( Flag == 0 )&& move_flag )		// Forward
     854:	88 89       	ldd	r24, Y+16	; 0x10
     856:	82 33       	cpi	r24, 0x32	; 50
     858:	a8 f0       	brcs	.+42     	; 0x884 <path_follow+0xd6>
     85a:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <node_detected>
     85e:	88 23       	and	r24, r24
     860:	89 f4       	brne	.+34     	; 0x884 <path_follow+0xd6>
     862:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <Flag>
     866:	88 23       	and	r24, r24
     868:	69 f4       	brne	.+26     	; 0x884 <path_follow+0xd6>
     86a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     86e:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
	{
		forward();
     872:	89 2b       	or	r24, r25
     874:	39 f0       	breq	.+14     	; 0x884 <path_follow+0xd6>
		velocity(200,212);
     876:	5e d2       	rcall	.+1212   	; 0xd34 <forward>
     878:	64 ed       	ldi	r22, 0xD4	; 212
     87a:	88 ec       	ldi	r24, 0xC8	; 200
     87c:	1e d2       	rcall	.+1084   	; 0xcba <velocity>
		Flag =1;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <Flag>
	}
	
	if (node_detected && move_flag)
     884:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <node_detected>
     888:	88 23       	and	r24, r24
     88a:	09 f4       	brne	.+2      	; 0x88e <path_follow+0xe0>
     88c:	1b c1       	rjmp	.+566    	; 0xac4 <path_follow+0x316>
     88e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     892:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
     896:	89 2b       	or	r24, r25
     898:	09 f4       	brne	.+2      	; 0x89c <path_follow+0xee>
     89a:	14 c1       	rjmp	.+552    	; 0xac4 <path_follow+0x316>
	{
		
		
		lcd_string(1,1,"CP:");
     89c:	45 e0       	ldi	r20, 0x05	; 5
     89e:	52 e0       	ldi	r21, 0x02	; 2
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	0e 94 ae 12 	call	0x255c	; 0x255c <lcd_string>
		lcd_wr_char(1,4,current_position_x);
     8a8:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <current_position_x>
     8ac:	48 2f       	mov	r20, r24
     8ae:	64 e0       	ldi	r22, 0x04	; 4
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	0e 94 42 11 	call	0x2284	; 0x2284 <lcd_wr_char>
		lcd_wr_char(1,5,',');
     8b6:	4c e2       	ldi	r20, 0x2C	; 44
     8b8:	65 e0       	ldi	r22, 0x05	; 5
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	0e 94 42 11 	call	0x2284	; 0x2284 <lcd_wr_char>
		lcd_wr_char(1,6,current_position_y);
     8c0:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <current_position_y>
     8c4:	48 2f       	mov	r20, r24
     8c6:	66 e0       	ldi	r22, 0x06	; 6
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	0e 94 42 11 	call	0x2284	; 0x2284 <lcd_wr_char>
		
		
		lcd_string(1,8,"NP:");
     8ce:	49 e0       	ldi	r20, 0x09	; 9
     8d0:	52 e0       	ldi	r21, 0x02	; 2
     8d2:	68 e0       	ldi	r22, 0x08	; 8
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	0e 94 ae 12 	call	0x255c	; 0x255c <lcd_string>
		lcd_wr_char(1,11,*next_position_x);
     8da:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <next_position_x>
     8de:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <next_position_x+0x1>
     8e2:	fc 01       	movw	r30, r24
     8e4:	80 81       	ld	r24, Z
     8e6:	48 2f       	mov	r20, r24
     8e8:	6b e0       	ldi	r22, 0x0B	; 11
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	0e 94 42 11 	call	0x2284	; 0x2284 <lcd_wr_char>
		lcd_wr_char(1,12,',');
     8f0:	4c e2       	ldi	r20, 0x2C	; 44
     8f2:	6c e0       	ldi	r22, 0x0C	; 12
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	0e 94 42 11 	call	0x2284	; 0x2284 <lcd_wr_char>
		lcd_wr_char(1,13,*next_position_y);
     8fa:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <next_position_y>
     8fe:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <next_position_y+0x1>
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	48 2f       	mov	r20, r24
     908:	6d e0       	ldi	r22, 0x0D	; 13
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	0e 94 42 11 	call	0x2284	; 0x2284 <lcd_wr_char>
		
		lcd_string(2,1,"CO:");
     910:	4d e0       	ldi	r20, 0x0D	; 13
     912:	52 e0       	ldi	r21, 0x02	; 2
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 ae 12 	call	0x255c	; 0x255c <lcd_string>
		lcd_wr_char(2,4,current_orientation);
     91c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     920:	48 2f       	mov	r20, r24
     922:	64 e0       	ldi	r22, 0x04	; 4
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	0e 94 42 11 	call	0x2284	; 0x2284 <lcd_wr_char>
		
		next_orientation = getNextOrientation(&current_position_x,&current_position_y,&next_position_x,&next_position_y);
     92a:	23 e0       	ldi	r18, 0x03	; 3
     92c:	32 e0       	ldi	r19, 0x02	; 2
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	52 e0       	ldi	r21, 0x02	; 2
     932:	69 ea       	ldi	r22, 0xA9	; 169
     934:	72 e0       	ldi	r23, 0x02	; 2
     936:	82 ea       	ldi	r24, 0xA2	; 162
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	5d dc       	rcall	.-1862   	; 0x1f6 <getNextOrientation>
     93c:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <next_orientation>
		
		
		
		send_fb();
     940:	86 de       	rcall	.-756    	; 0x64e <send_fb>
		
		if (next_orientation == 'x')
     942:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <next_orientation>
     946:	88 37       	cpi	r24, 0x78	; 120
     948:	31 f4       	brne	.+12     	; 0x956 <path_follow+0x1a8>
		{
			move_flag=0;
     94a:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x1>
     94e:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
			return 'x';
     952:	88 e7       	ldi	r24, 0x78	; 120
		}
		next_move = getNextMove(&current_orientation,next_orientation);
     954:	b7 c0       	rjmp	.+366    	; 0xac4 <path_follow+0x316>
     956:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <next_orientation>
     95a:	68 2f       	mov	r22, r24
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	92 e0       	ldi	r25, 0x02	; 2
     960:	bb dd       	rcall	.-1162   	; 0x4d8 <getNextMove>
     962:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <next_move>
		current_orientation = next_orientation;
     966:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <next_orientation>
     96a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	aa e7       	ldi	r26, 0x7A	; 122
     974:	b3 e4       	ldi	r27, 0x43	; 67
     976:	89 83       	std	Y+1, r24	; 0x01
     978:	9a 83       	std	Y+2, r25	; 0x02
     97a:	ab 83       	std	Y+3, r26	; 0x03
     97c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     97e:	26 e6       	ldi	r18, 0x66	; 102
     980:	36 e6       	ldi	r19, 0x66	; 102
     982:	46 e6       	ldi	r20, 0x66	; 102
     984:	55 e4       	ldi	r21, 0x45	; 69
     986:	69 81       	ldd	r22, Y+1	; 0x01
     988:	7a 81       	ldd	r23, Y+2	; 0x02
     98a:	8b 81       	ldd	r24, Y+3	; 0x03
     98c:	9c 81       	ldd	r25, Y+4	; 0x04
     98e:	0e 94 66 15 	call	0x2acc	; 0x2acc <__mulsf3>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	8d 83       	std	Y+5, r24	; 0x05
     998:	9e 83       	std	Y+6, r25	; 0x06
     99a:	af 83       	std	Y+7, r26	; 0x07
     99c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e8       	ldi	r20, 0x80	; 128
     9a4:	5f e3       	ldi	r21, 0x3F	; 63
     9a6:	6d 81       	ldd	r22, Y+5	; 0x05
     9a8:	7e 81       	ldd	r23, Y+6	; 0x06
     9aa:	8f 81       	ldd	r24, Y+7	; 0x07
     9ac:	98 85       	ldd	r25, Y+8	; 0x08
     9ae:	0e 94 18 14 	call	0x2830	; 0x2830 <__cmpsf2>
     9b2:	88 23       	and	r24, r24
     9b4:	2c f4       	brge	.+10     	; 0x9c0 <path_follow+0x212>
		__ticks = 1;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	9a 87       	std	Y+10, r25	; 0x0a
     9bc:	89 87       	std	Y+9, r24	; 0x09
     9be:	3f c0       	rjmp	.+126    	; 0xa3e <path_follow+0x290>
	else if (__tmp > 65535)
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	3f ef       	ldi	r19, 0xFF	; 255
     9c4:	4f e7       	ldi	r20, 0x7F	; 127
     9c6:	57 e4       	ldi	r21, 0x47	; 71
     9c8:	6d 81       	ldd	r22, Y+5	; 0x05
     9ca:	7e 81       	ldd	r23, Y+6	; 0x06
     9cc:	8f 81       	ldd	r24, Y+7	; 0x07
     9ce:	98 85       	ldd	r25, Y+8	; 0x08
     9d0:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gesf2>
     9d4:	18 16       	cp	r1, r24
     9d6:	4c f5       	brge	.+82     	; 0xa2a <path_follow+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	40 e2       	ldi	r20, 0x20	; 32
     9de:	51 e4       	ldi	r21, 0x41	; 65
     9e0:	69 81       	ldd	r22, Y+1	; 0x01
     9e2:	7a 81       	ldd	r23, Y+2	; 0x02
     9e4:	8b 81       	ldd	r24, Y+3	; 0x03
     9e6:	9c 81       	ldd	r25, Y+4	; 0x04
     9e8:	0e 94 66 15 	call	0x2acc	; 0x2acc <__mulsf3>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
     9f0:	bc 01       	movw	r22, r24
     9f2:	cd 01       	movw	r24, r26
     9f4:	0e 94 84 14 	call	0x2908	; 0x2908 <__fixunssfsi>
     9f8:	dc 01       	movw	r26, r24
     9fa:	cb 01       	movw	r24, r22
     9fc:	9a 87       	std	Y+10, r25	; 0x0a
     9fe:	89 87       	std	Y+9, r24	; 0x09
     a00:	0f c0       	rjmp	.+30     	; 0xa20 <path_follow+0x272>
     a02:	80 e7       	ldi	r24, 0x70	; 112
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	9c 87       	std	Y+12, r25	; 0x0c
     a08:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a0a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a0c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <path_follow+0x260>
     a12:	9c 87       	std	Y+12, r25	; 0x0c
     a14:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a16:	89 85       	ldd	r24, Y+9	; 0x09
     a18:	9a 85       	ldd	r25, Y+10	; 0x0a
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	9a 87       	std	Y+10, r25	; 0x0a
     a1e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a20:	89 85       	ldd	r24, Y+9	; 0x09
     a22:	9a 85       	ldd	r25, Y+10	; 0x0a
     a24:	89 2b       	or	r24, r25
     a26:	69 f7       	brne	.-38     	; 0xa02 <path_follow+0x254>
     a28:	14 c0       	rjmp	.+40     	; 0xa52 <path_follow+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a2a:	6d 81       	ldd	r22, Y+5	; 0x05
     a2c:	7e 81       	ldd	r23, Y+6	; 0x06
     a2e:	8f 81       	ldd	r24, Y+7	; 0x07
     a30:	98 85       	ldd	r25, Y+8	; 0x08
     a32:	0e 94 84 14 	call	0x2908	; 0x2908 <__fixunssfsi>
     a36:	dc 01       	movw	r26, r24
     a38:	cb 01       	movw	r24, r22
     a3a:	9a 87       	std	Y+10, r25	; 0x0a
     a3c:	89 87       	std	Y+9, r24	; 0x09
     a3e:	89 85       	ldd	r24, Y+9	; 0x09
     a40:	9a 85       	ldd	r25, Y+10	; 0x0a
     a42:	9e 87       	std	Y+14, r25	; 0x0e
     a44:	8d 87       	std	Y+13, r24	; 0x0d
     a46:	8d 85       	ldd	r24, Y+13	; 0x0d
     a48:	9e 85       	ldd	r25, Y+14	; 0x0e
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <path_follow+0x29c>
     a4e:	9e 87       	std	Y+14, r25	; 0x0e
     a50:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(250);

		switch(next_move)
     a52:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <next_move>
     a56:	88 2f       	mov	r24, r24
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	82 35       	cpi	r24, 0x52	; 82
     a5c:	91 05       	cpc	r25, r1
     a5e:	c1 f0       	breq	.+48     	; 0xa90 <path_follow+0x2e2>
     a60:	83 35       	cpi	r24, 0x53	; 83
     a62:	91 05       	cpc	r25, r1
     a64:	3c f4       	brge	.+14     	; 0xa74 <path_follow+0x2c6>
     a66:	86 34       	cpi	r24, 0x46	; 70
     a68:	91 05       	cpc	r25, r1
     a6a:	59 f0       	breq	.+22     	; 0xa82 <path_follow+0x2d4>
     a6c:	8c 34       	cpi	r24, 0x4C	; 76
     a6e:	91 05       	cpc	r25, r1
     a70:	b1 f0       	breq	.+44     	; 0xa9e <path_follow+0x2f0>
     a72:	28 c0       	rjmp	.+80     	; 0xac4 <path_follow+0x316>
     a74:	83 35       	cpi	r24, 0x53	; 83
     a76:	91 05       	cpc	r25, r1
     a78:	01 f1       	breq	.+64     	; 0xaba <path_follow+0x30c>
     a7a:	84 35       	cpi	r24, 0x54	; 84
     a7c:	91 05       	cpc	r25, r1
		{
			
			case 'F':
			velocity(200,212);
     a7e:	b1 f0       	breq	.+44     	; 0xaac <path_follow+0x2fe>
     a80:	21 c0       	rjmp	.+66     	; 0xac4 <path_follow+0x316>
     a82:	64 ed       	ldi	r22, 0xD4	; 212
			forward_mm(85);
     a84:	88 ec       	ldi	r24, 0xC8	; 200
     a86:	19 d1       	rcall	.+562    	; 0xcba <velocity>
     a88:	85 e5       	ldi	r24, 0x55	; 85
			break;
     a8a:	90 e0       	ldi	r25, 0x00	; 0
			
			case 'R':
			forward_mm(65);
     a8c:	ff d2       	rcall	.+1534   	; 0x108c <forward_mm>
     a8e:	1a c0       	rjmp	.+52     	; 0xac4 <path_follow+0x316>
     a90:	81 e4       	ldi	r24, 0x41	; 65
			right_degrees(90);
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	fb d2       	rcall	.+1526   	; 0x108c <forward_mm>
     a96:	8a e5       	ldi	r24, 0x5A	; 90
			break;
     a98:	90 e0       	ldi	r25, 0x00	; 0
			
			
			case 'L':
			forward_mm(65);
     a9a:	22 d3       	rcall	.+1604   	; 0x10e0 <right_degrees>
     a9c:	13 c0       	rjmp	.+38     	; 0xac4 <path_follow+0x316>
     a9e:	81 e4       	ldi	r24, 0x41	; 65
     aa0:	90 e0       	ldi	r25, 0x00	; 0
			left_degrees(90);
     aa2:	f4 d2       	rcall	.+1512   	; 0x108c <forward_mm>
     aa4:	8a e5       	ldi	r24, 0x5A	; 90
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	06 d3       	rcall	.+1548   	; 0x10b6 <left_degrees>
			break;
     aaa:	0c c0       	rjmp	.+24     	; 0xac4 <path_follow+0x316>
			
			case 'T':
			forward_mm(65);
     aac:	81 e4       	ldi	r24, 0x41	; 65
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	ed d2       	rcall	.+1498   	; 0x108c <forward_mm>
     ab2:	84 eb       	ldi	r24, 0xB4	; 180
			left_degrees(180);
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	ff d2       	rcall	.+1534   	; 0x10b6 <left_degrees>
     ab8:	05 c0       	rjmp	.+10     	; 0xac4 <path_follow+0x316>
     aba:	47 e4       	ldi	r20, 0x47	; 71
			break;
     abc:	66 e0       	ldi	r22, 0x06	; 6
			
			case 'S':
			lcd_wr_char(1,6,'G');
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	0e 94 42 11 	call	0x2284	; 0x2284 <lcd_wr_char>
     ac4:	61 96       	adiw	r28, 0x11	; 17
     ac6:	0f b6       	in	r0, 0x3f	; 63
		}
		
	}
	

}
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <main>:
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29



int main(void)
{
     ada:	00 d0       	rcall	.+0      	; 0xadc <main+0x6>
     adc:	1f 92       	push	r1
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
	USART_init(BAUD_RATE);
     ae2:	80 e8       	ldi	r24, 0x80	; 128
     ae4:	95 e2       	ldi	r25, 0x25	; 37
     ae6:	1f db       	rcall	.-2498   	; 0x126 <USART_init>
	unsigned char R_sense,C_sense,L_sense;
	char stop_flag;
	R_sense = 0;
     ae8:	19 82       	std	Y+1, r1	; 0x01
	C_sense = 0;
     aea:	1a 82       	std	Y+2, r1	; 0x02
	L_sense = 0;
	lcd_port_config();
     aec:	1b 82       	std	Y+3, r1	; 0x03
     aee:	e0 d3       	rcall	.+1984   	; 0x12b0 <lcd_port_config>
	lcd_init();
     af0:	0e 94 7d 10 	call	0x20fa	; 0x20fa <lcd_init>
	motors_pin_config();
	pwm_pin_config();
     af4:	24 d0       	rcall	.+72     	; 0xb3e <motors_pin_config>
	position_encoder_pin_config();
     af6:	3d d0       	rcall	.+122    	; 0xb72 <pwm_pin_config>
	position_encoder_interrupt_config();
     af8:	56 d0       	rcall	.+172    	; 0xba6 <position_encoder_pin_config>
	adc_port_config();
     afa:	f7 d0       	rcall	.+494    	; 0xcea <position_encoder_interrupt_config>
	adc_init();
     afc:	c1 d3       	rcall	.+1922   	; 0x1280 <adc_port_config>
	timer5_init();
     afe:	1f d3       	rcall	.+1598   	; 0x113e <adc_init>
	velocity(200,200);
     b00:	6c d0       	rcall	.+216    	; 0xbda <timer5_init>
     b02:	68 ec       	ldi	r22, 0xC8	; 200
     b04:	88 ec       	ldi	r24, 0xC8	; 200
	buzzer_init();
     b06:	d9 d0       	rcall	.+434    	; 0xcba <velocity>
     b08:	00 d3       	rcall	.+1536   	; 0x110a <buzzer_init>
	while(1)
	{
		L_sense = ADC_Conversion(left_wl_sensor_channel);
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	5f d3       	rcall	.+1726   	; 0x11cc <ADC_Conversion>
     b0e:	8b 83       	std	Y+3, r24	; 0x03
		C_sense = ADC_Conversion(center_wl_sensor_channel);
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	5c d3       	rcall	.+1720   	; 0x11cc <ADC_Conversion>
     b14:	8a 83       	std	Y+2, r24	; 0x02
     b16:	81 e0       	ldi	r24, 0x01	; 1
		R_sense = ADC_Conversion(right_wl_sensor_channel);
     b18:	59 d3       	rcall	.+1714   	; 0x11cc <ADC_Conversion>
     b1a:	89 83       	std	Y+1, r24	; 0x01
     b1c:	49 81       	ldd	r20, Y+1	; 0x01
     b1e:	6a 81       	ldd	r22, Y+2	; 0x02
		stop_flag = path_follow(L_sense, C_sense, R_sense);
     b20:	8b 81       	ldd	r24, Y+3	; 0x03
     b22:	45 de       	rcall	.-886    	; 0x7ae <path_follow>
     b24:	8c 83       	std	Y+4, r24	; 0x04
     b26:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     b2a:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
		/*if(stop_flag == 'x')
		{
			move_flag = 0;
		}*/
		lcd_numeric_value(1,15,move_flag,1);
     b2e:	21 e0       	ldi	r18, 0x01	; 1
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	ac 01       	movw	r20, r24
     b34:	6f e0       	ldi	r22, 0x0F	; 15
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	0e 94 d7 12 	call	0x25ae	; 0x25ae <lcd_numeric_value>
     b3c:	e6 cf       	rjmp	.-52     	; 0xb0a <main+0x34>

00000b3e <motors_pin_config>:
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
	}
     b42:	cd b7       	in	r28, 0x3d	; 61
}

void buzzer_off()
{
	buzzer_port_reg &=~(1<<buzzer_pin);
}
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	81 e2       	ldi	r24, 0x21	; 33
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	21 e2       	ldi	r18, 0x21	; 33
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	f9 01       	movw	r30, r18
     b50:	20 81       	ld	r18, Z
     b52:	2f 60       	ori	r18, 0x0F	; 15
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18
     b58:	82 e2       	ldi	r24, 0x22	; 34
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	22 e2       	ldi	r18, 0x22	; 34
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	f9 01       	movw	r30, r18
     b62:	20 81       	ld	r18, Z
     b64:	20 7f       	andi	r18, 0xF0	; 240
     b66:	fc 01       	movw	r30, r24
     b68:	20 83       	st	Z, r18
     b6a:	00 00       	nop
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	08 95       	ret

00000b72 <pwm_pin_config>:
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	8a e0       	ldi	r24, 0x0A	; 10
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	2a e0       	ldi	r18, 0x0A	; 10
     b80:	31 e0       	ldi	r19, 0x01	; 1
     b82:	f9 01       	movw	r30, r18
     b84:	20 81       	ld	r18, Z
     b86:	28 61       	ori	r18, 0x18	; 24
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18
     b8c:	8b e0       	ldi	r24, 0x0B	; 11
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	2b e0       	ldi	r18, 0x0B	; 11
     b92:	31 e0       	ldi	r19, 0x01	; 1
     b94:	f9 01       	movw	r30, r18
     b96:	20 81       	ld	r18, Z
     b98:	28 61       	ori	r18, 0x18	; 24
     b9a:	fc 01       	movw	r30, r24
     b9c:	20 83       	st	Z, r18
     b9e:	00 00       	nop
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	08 95       	ret

00000ba6 <position_encoder_pin_config>:
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	8d e2       	ldi	r24, 0x2D	; 45
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	2d e2       	ldi	r18, 0x2D	; 45
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	f9 01       	movw	r30, r18
     bb8:	20 81       	ld	r18, Z
     bba:	2f 7c       	andi	r18, 0xCF	; 207
     bbc:	fc 01       	movw	r30, r24
     bbe:	20 83       	st	Z, r18
     bc0:	8e e2       	ldi	r24, 0x2E	; 46
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	2e e2       	ldi	r18, 0x2E	; 46
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	f9 01       	movw	r30, r18
     bca:	20 81       	ld	r18, Z
     bcc:	20 63       	ori	r18, 0x30	; 48
     bce:	fc 01       	movw	r30, r24
     bd0:	20 83       	st	Z, r18
     bd2:	00 00       	nop
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <timer5_init>:
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	81 e2       	ldi	r24, 0x21	; 33
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	fc 01       	movw	r30, r24
     be8:	10 82       	st	Z, r1
     bea:	85 e2       	ldi	r24, 0x25	; 37
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	2f ef       	ldi	r18, 0xFF	; 255
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 83       	st	Z, r18
     bf4:	84 e2       	ldi	r24, 0x24	; 36
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	21 e0       	ldi	r18, 0x01	; 1
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
     bfe:	89 e2       	ldi	r24, 0x29	; 41
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	fc 01       	movw	r30, r24
     c04:	10 82       	st	Z, r1
     c06:	88 e2       	ldi	r24, 0x28	; 40
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	2f ef       	ldi	r18, 0xFF	; 255
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 83       	st	Z, r18
     c10:	8b e2       	ldi	r24, 0x2B	; 43
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	fc 01       	movw	r30, r24
     c16:	10 82       	st	Z, r1
     c18:	8a e2       	ldi	r24, 0x2A	; 42
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	2f ef       	ldi	r18, 0xFF	; 255
     c1e:	fc 01       	movw	r30, r24
     c20:	20 83       	st	Z, r18
     c22:	80 e2       	ldi	r24, 0x20	; 32
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	20 e2       	ldi	r18, 0x20	; 32
     c28:	31 e0       	ldi	r19, 0x01	; 1
     c2a:	f9 01       	movw	r30, r18
     c2c:	20 81       	ld	r18, Z
     c2e:	20 6a       	ori	r18, 0xA0	; 160
     c30:	fc 01       	movw	r30, r24
     c32:	20 83       	st	Z, r18
     c34:	80 e2       	ldi	r24, 0x20	; 32
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	20 e2       	ldi	r18, 0x20	; 32
     c3a:	31 e0       	ldi	r19, 0x01	; 1
     c3c:	f9 01       	movw	r30, r18
     c3e:	20 81       	ld	r18, Z
     c40:	2f 7a       	andi	r18, 0xAF	; 175
     c42:	fc 01       	movw	r30, r24
     c44:	20 83       	st	Z, r18
     c46:	80 e2       	ldi	r24, 0x20	; 32
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	20 e2       	ldi	r18, 0x20	; 32
     c4c:	31 e0       	ldi	r19, 0x01	; 1
     c4e:	f9 01       	movw	r30, r18
     c50:	20 81       	ld	r18, Z
     c52:	21 60       	ori	r18, 0x01	; 1
     c54:	fc 01       	movw	r30, r24
     c56:	20 83       	st	Z, r18
     c58:	80 e2       	ldi	r24, 0x20	; 32
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	20 e2       	ldi	r18, 0x20	; 32
     c5e:	31 e0       	ldi	r19, 0x01	; 1
     c60:	f9 01       	movw	r30, r18
     c62:	20 81       	ld	r18, Z
     c64:	2d 7f       	andi	r18, 0xFD	; 253
     c66:	fc 01       	movw	r30, r24
     c68:	20 83       	st	Z, r18
     c6a:	81 e2       	ldi	r24, 0x21	; 33
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	21 e2       	ldi	r18, 0x21	; 33
     c70:	31 e0       	ldi	r19, 0x01	; 1
     c72:	f9 01       	movw	r30, r18
     c74:	20 81       	ld	r18, Z
     c76:	28 60       	ori	r18, 0x08	; 8
     c78:	fc 01       	movw	r30, r24
     c7a:	20 83       	st	Z, r18
     c7c:	81 e2       	ldi	r24, 0x21	; 33
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	21 e2       	ldi	r18, 0x21	; 33
     c82:	31 e0       	ldi	r19, 0x01	; 1
     c84:	f9 01       	movw	r30, r18
     c86:	20 81       	ld	r18, Z
     c88:	2f 7e       	andi	r18, 0xEF	; 239
     c8a:	fc 01       	movw	r30, r24
     c8c:	20 83       	st	Z, r18
     c8e:	81 e2       	ldi	r24, 0x21	; 33
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	21 e2       	ldi	r18, 0x21	; 33
     c94:	31 e0       	ldi	r19, 0x01	; 1
     c96:	f9 01       	movw	r30, r18
     c98:	20 81       	ld	r18, Z
     c9a:	23 60       	ori	r18, 0x03	; 3
     c9c:	fc 01       	movw	r30, r24
     c9e:	20 83       	st	Z, r18
     ca0:	81 e2       	ldi	r24, 0x21	; 33
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	21 e2       	ldi	r18, 0x21	; 33
     ca6:	31 e0       	ldi	r19, 0x01	; 1
     ca8:	f9 01       	movw	r30, r18
     caa:	20 81       	ld	r18, Z
     cac:	2b 7f       	andi	r18, 0xFB	; 251
     cae:	fc 01       	movw	r30, r24
     cb0:	20 83       	st	Z, r18
     cb2:	00 00       	nop
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <velocity>:
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	1f 92       	push	r1
     cc0:	1f 92       	push	r1
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	6a 83       	std	Y+2, r22	; 0x02
     cca:	88 e2       	ldi	r24, 0x28	; 40
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	29 81       	ldd	r18, Y+1	; 0x01
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 83       	st	Z, r18
     cd4:	8a e2       	ldi	r24, 0x2A	; 42
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	2a 81       	ldd	r18, Y+2	; 0x02
     cda:	fc 01       	movw	r30, r24
     cdc:	20 83       	st	Z, r18
     cde:	00 00       	nop
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <position_encoder_interrupt_config>:
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	f8 94       	cli
     cf4:	8d e3       	ldi	r24, 0x3D	; 61
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	2d e3       	ldi	r18, 0x3D	; 61
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	f9 01       	movw	r30, r18
     cfe:	20 81       	ld	r18, Z
     d00:	20 63       	ori	r18, 0x30	; 48
     d02:	fc 01       	movw	r30, r24
     d04:	20 83       	st	Z, r18
     d06:	8a e6       	ldi	r24, 0x6A	; 106
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	2a e6       	ldi	r18, 0x6A	; 106
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	f9 01       	movw	r30, r18
     d10:	20 81       	ld	r18, Z
     d12:	2a 60       	ori	r18, 0x0A	; 10
     d14:	fc 01       	movw	r30, r24
     d16:	20 83       	st	Z, r18
     d18:	8a e6       	ldi	r24, 0x6A	; 106
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	2a e6       	ldi	r18, 0x6A	; 106
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	f9 01       	movw	r30, r18
     d22:	20 81       	ld	r18, Z
     d24:	2a 7f       	andi	r18, 0xFA	; 250
     d26:	fc 01       	movw	r30, r24
     d28:	20 83       	st	Z, r18
     d2a:	78 94       	sei
     d2c:	00 00       	nop
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <forward>:
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	82 e2       	ldi	r24, 0x22	; 34
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	22 e2       	ldi	r18, 0x22	; 34
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	f9 01       	movw	r30, r18
     d46:	20 81       	ld	r18, Z
     d48:	26 7f       	andi	r18, 0xF6	; 246
     d4a:	fc 01       	movw	r30, r24
     d4c:	20 83       	st	Z, r18
     d4e:	82 e2       	ldi	r24, 0x22	; 34
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	22 e2       	ldi	r18, 0x22	; 34
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	f9 01       	movw	r30, r18
     d58:	20 81       	ld	r18, Z
     d5a:	26 60       	ori	r18, 0x06	; 6
     d5c:	fc 01       	movw	r30, r24
     d5e:	20 83       	st	Z, r18
     d60:	00 00       	nop
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <left>:
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	82 e2       	ldi	r24, 0x22	; 34
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	22 e2       	ldi	r18, 0x22	; 34
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	f9 01       	movw	r30, r18
     d7a:	20 81       	ld	r18, Z
     d7c:	25 7f       	andi	r18, 0xF5	; 245
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
     d82:	82 e2       	ldi	r24, 0x22	; 34
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	22 e2       	ldi	r18, 0x22	; 34
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	f9 01       	movw	r30, r18
     d8c:	20 81       	ld	r18, Z
     d8e:	25 60       	ori	r18, 0x05	; 5
     d90:	fc 01       	movw	r30, r24
     d92:	20 83       	st	Z, r18
     d94:	00 00       	nop
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <right>:
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	82 e2       	ldi	r24, 0x22	; 34
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	22 e2       	ldi	r18, 0x22	; 34
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	f9 01       	movw	r30, r18
     dae:	20 81       	ld	r18, Z
     db0:	2a 7f       	andi	r18, 0xFA	; 250
     db2:	fc 01       	movw	r30, r24
     db4:	20 83       	st	Z, r18
     db6:	82 e2       	ldi	r24, 0x22	; 34
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	22 e2       	ldi	r18, 0x22	; 34
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	f9 01       	movw	r30, r18
     dc0:	20 81       	ld	r18, Z
     dc2:	2a 60       	ori	r18, 0x0A	; 10
     dc4:	fc 01       	movw	r30, r24
     dc6:	20 83       	st	Z, r18
     dc8:	00 00       	nop
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <stop>:
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	82 e2       	ldi	r24, 0x22	; 34
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	22 e2       	ldi	r18, 0x22	; 34
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	f9 01       	movw	r30, r18
     de2:	20 81       	ld	r18, Z
     de4:	20 7f       	andi	r18, 0xF0	; 240
     de6:	fc 01       	movw	r30, r24
     de8:	20 83       	st	Z, r18
     dea:	00 00       	nop
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	08 95       	ret

00000df2 <angle_rotate>:
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	2a 97       	sbiw	r28, 0x0a	; 10
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	9a 87       	std	Y+10, r25	; 0x0a
     e08:	89 87       	std	Y+9, r24	; 0x09
     e0a:	19 82       	std	Y+1, r1	; 0x01
     e0c:	1a 82       	std	Y+2, r1	; 0x02
     e0e:	1b 82       	std	Y+3, r1	; 0x03
     e10:	1c 82       	std	Y+4, r1	; 0x04
     e12:	1d 82       	std	Y+5, r1	; 0x05
     e14:	1e 82       	std	Y+6, r1	; 0x06
     e16:	1f 82       	std	Y+7, r1	; 0x07
     e18:	18 86       	std	Y+8, r1	; 0x08
     e1a:	89 85       	ldd	r24, Y+9	; 0x09
     e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1e:	cc 01       	movw	r24, r24
     e20:	a0 e0       	ldi	r26, 0x00	; 0
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	bc 01       	movw	r22, r24
     e26:	cd 01       	movw	r24, r26
     e28:	0e 94 b0 14 	call	0x2960	; 0x2960 <__floatunsisf>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	28 e4       	ldi	r18, 0x48	; 72
     e32:	31 ee       	ldi	r19, 0xE1	; 225
     e34:	42 e8       	ldi	r20, 0x82	; 130
     e36:	50 e4       	ldi	r21, 0x40	; 64
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 1c 14 	call	0x2838	; 0x2838 <__divsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	9a 83       	std	Y+2, r25	; 0x02
     e48:	ab 83       	std	Y+3, r26	; 0x03
     e4a:	bc 83       	std	Y+4, r27	; 0x04
     e4c:	69 81       	ldd	r22, Y+1	; 0x01
     e4e:	7a 81       	ldd	r23, Y+2	; 0x02
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	0e 94 84 14 	call	0x2908	; 0x2908 <__fixunssfsi>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	cc 01       	movw	r24, r24
     e5e:	a0 e0       	ldi	r26, 0x00	; 0
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	9e 83       	std	Y+6, r25	; 0x06
     e66:	af 83       	std	Y+7, r26	; 0x07
     e68:	b8 87       	std	Y+8, r27	; 0x08
     e6a:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <ShaftCountRight>
     e6e:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <ShaftCountRight+0x1>
     e72:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <ShaftCountRight+0x2>
     e76:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <ShaftCountRight+0x3>
     e7a:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <ShaftCountLeft>
     e7e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <ShaftCountLeft+0x1>
     e82:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <ShaftCountLeft+0x2>
     e86:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <ShaftCountLeft+0x3>
     e8a:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <ShaftCountRight>
     e8e:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <ShaftCountRight+0x1>
     e92:	40 91 1d 02 	lds	r20, 0x021D	; 0x80021d <ShaftCountRight+0x2>
     e96:	50 91 1e 02 	lds	r21, 0x021E	; 0x80021e <ShaftCountRight+0x3>
     e9a:	8d 81       	ldd	r24, Y+5	; 0x05
     e9c:	9e 81       	ldd	r25, Y+6	; 0x06
     e9e:	af 81       	ldd	r26, Y+7	; 0x07
     ea0:	b8 85       	ldd	r27, Y+8	; 0x08
     ea2:	28 17       	cp	r18, r24
     ea4:	39 07       	cpc	r19, r25
     ea6:	4a 07       	cpc	r20, r26
     ea8:	5b 07       	cpc	r21, r27
     eaa:	90 f4       	brcc	.+36     	; 0xed0 <angle_rotate+0xde>
     eac:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <ShaftCountLeft>
     eb0:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <ShaftCountLeft+0x1>
     eb4:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <ShaftCountLeft+0x2>
     eb8:	50 91 1a 02 	lds	r21, 0x021A	; 0x80021a <ShaftCountLeft+0x3>
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	af 81       	ldd	r26, Y+7	; 0x07
     ec2:	b8 85       	ldd	r27, Y+8	; 0x08
     ec4:	28 17       	cp	r18, r24
     ec6:	39 07       	cpc	r19, r25
     ec8:	4a 07       	cpc	r20, r26
     eca:	5b 07       	cpc	r21, r27
     ecc:	08 f4       	brcc	.+2      	; 0xed0 <angle_rotate+0xde>
     ece:	dd cf       	rjmp	.-70     	; 0xe8a <angle_rotate+0x98>
     ed0:	7f df       	rcall	.-258    	; 0xdd0 <stop>
     ed2:	00 00       	nop
     ed4:	2a 96       	adiw	r28, 0x0a	; 10
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <linear_distance_mm>:
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	2a 97       	sbiw	r28, 0x0a	; 10
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	9a 87       	std	Y+10, r25	; 0x0a
     efc:	89 87       	std	Y+9, r24	; 0x09
     efe:	19 82       	std	Y+1, r1	; 0x01
     f00:	1a 82       	std	Y+2, r1	; 0x02
     f02:	1b 82       	std	Y+3, r1	; 0x03
     f04:	1c 82       	std	Y+4, r1	; 0x04
     f06:	1d 82       	std	Y+5, r1	; 0x05
     f08:	1e 82       	std	Y+6, r1	; 0x06
     f0a:	1f 82       	std	Y+7, r1	; 0x07
     f0c:	18 86       	std	Y+8, r1	; 0x08
     f0e:	89 85       	ldd	r24, Y+9	; 0x09
     f10:	9a 85       	ldd	r25, Y+10	; 0x0a
     f12:	cc 01       	movw	r24, r24
     f14:	a0 e0       	ldi	r26, 0x00	; 0
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	0e 94 b0 14 	call	0x2960	; 0x2960 <__floatunsisf>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	25 ee       	ldi	r18, 0xE5	; 229
     f26:	30 ed       	ldi	r19, 0xD0	; 208
     f28:	4a ea       	ldi	r20, 0xAA	; 170
     f2a:	50 e4       	ldi	r21, 0x40	; 64
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 1c 14 	call	0x2838	; 0x2838 <__divsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	ab 83       	std	Y+3, r26	; 0x03
     f3e:	bc 83       	std	Y+4, r27	; 0x04
     f40:	69 81       	ldd	r22, Y+1	; 0x01
     f42:	7a 81       	ldd	r23, Y+2	; 0x02
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	0e 94 84 14 	call	0x2908	; 0x2908 <__fixunssfsi>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	9e 83       	std	Y+6, r25	; 0x06
     f54:	af 83       	std	Y+7, r26	; 0x07
     f56:	b8 87       	std	Y+8, r27	; 0x08
     f58:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <ShaftCountRight>
     f5c:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <ShaftCountRight+0x1>
     f60:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <ShaftCountRight+0x2>
     f64:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <ShaftCountRight+0x3>
     f68:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <ShaftCountLeft>
     f6c:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <ShaftCountLeft+0x1>
     f70:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <ShaftCountLeft+0x2>
     f74:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <ShaftCountLeft+0x3>
     f78:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <ShaftCountRight>
     f7c:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <ShaftCountRight+0x1>
     f80:	40 91 1d 02 	lds	r20, 0x021D	; 0x80021d <ShaftCountRight+0x2>
     f84:	50 91 1e 02 	lds	r21, 0x021E	; 0x80021e <ShaftCountRight+0x3>
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	9e 81       	ldd	r25, Y+6	; 0x06
     f8c:	af 81       	ldd	r26, Y+7	; 0x07
     f8e:	b8 85       	ldd	r27, Y+8	; 0x08
     f90:	28 17       	cp	r18, r24
     f92:	39 07       	cpc	r19, r25
     f94:	4a 07       	cpc	r20, r26
     f96:	5b 07       	cpc	r21, r27
     f98:	90 f4       	brcc	.+36     	; 0xfbe <linear_distance_mm+0xd8>
     f9a:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <ShaftCountLeft>
     f9e:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <ShaftCountLeft+0x1>
     fa2:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <ShaftCountLeft+0x2>
     fa6:	50 91 1a 02 	lds	r21, 0x021A	; 0x80021a <ShaftCountLeft+0x3>
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	af 81       	ldd	r26, Y+7	; 0x07
     fb0:	b8 85       	ldd	r27, Y+8	; 0x08
     fb2:	28 17       	cp	r18, r24
     fb4:	39 07       	cpc	r19, r25
     fb6:	4a 07       	cpc	r20, r26
     fb8:	5b 07       	cpc	r21, r27
     fba:	08 f4       	brcc	.+2      	; 0xfbe <linear_distance_mm+0xd8>
     fbc:	dd cf       	rjmp	.-70     	; 0xf78 <linear_distance_mm+0x92>
     fbe:	08 df       	rcall	.-496    	; 0xdd0 <stop>
     fc0:	00 00       	nop
     fc2:	2a 96       	adiw	r28, 0x0a	; 10
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <__vector_6>:
     fd4:	1f 92       	push	r1
     fd6:	0f 92       	push	r0
     fd8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	8f 93       	push	r24
     fe2:	9f 93       	push	r25
     fe4:	af 93       	push	r26
     fe6:	bf 93       	push	r27
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <ShaftCountRight>
     ff4:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <ShaftCountRight+0x1>
     ff8:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <ShaftCountRight+0x2>
     ffc:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <ShaftCountRight+0x3>
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	a1 1d       	adc	r26, r1
    1004:	b1 1d       	adc	r27, r1
    1006:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <ShaftCountRight>
    100a:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <ShaftCountRight+0x1>
    100e:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <ShaftCountRight+0x2>
    1012:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <ShaftCountRight+0x3>
    1016:	00 00       	nop
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	bf 91       	pop	r27
    101e:	af 91       	pop	r26
    1020:	9f 91       	pop	r25
    1022:	8f 91       	pop	r24
    1024:	0f 90       	pop	r0
    1026:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <__vector_5>:
    1030:	1f 92       	push	r1
    1032:	0f 92       	push	r0
    1034:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	8f 93       	push	r24
    103e:	9f 93       	push	r25
    1040:	af 93       	push	r26
    1042:	bf 93       	push	r27
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <ShaftCountLeft>
    1050:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <ShaftCountLeft+0x1>
    1054:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <ShaftCountLeft+0x2>
    1058:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <ShaftCountLeft+0x3>
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	a1 1d       	adc	r26, r1
    1060:	b1 1d       	adc	r27, r1
    1062:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <ShaftCountLeft>
    1066:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <ShaftCountLeft+0x1>
    106a:	a0 93 19 02 	sts	0x0219, r26	; 0x800219 <ShaftCountLeft+0x2>
    106e:	b0 93 1a 02 	sts	0x021A, r27	; 0x80021a <ShaftCountLeft+0x3>
    1072:	00 00       	nop
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	bf 91       	pop	r27
    107a:	af 91       	pop	r26
    107c:	9f 91       	pop	r25
    107e:	8f 91       	pop	r24
    1080:	0f 90       	pop	r0
    1082:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1086:	0f 90       	pop	r0
    1088:	1f 90       	pop	r1
    108a:	18 95       	reti

0000108c <forward_mm>:
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	1f 92       	push	r1
    1092:	1f 92       	push	r1
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	9a 83       	std	Y+2, r25	; 0x02
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	64 ed       	ldi	r22, 0xD4	; 212
    109e:	88 ec       	ldi	r24, 0xC8	; 200
    10a0:	0c de       	rcall	.-1000   	; 0xcba <velocity>
    10a2:	48 de       	rcall	.-880    	; 0xd34 <forward>
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	1e df       	rcall	.-452    	; 0xee6 <linear_distance_mm>
    10aa:	00 00       	nop
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <left_degrees>:
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	1f 92       	push	r1
    10bc:	1f 92       	push	r1
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	64 ed       	ldi	r22, 0xD4	; 212
    10c8:	88 ec       	ldi	r24, 0xC8	; 200
    10ca:	f7 dd       	rcall	.-1042   	; 0xcba <velocity>
    10cc:	4d de       	rcall	.-870    	; 0xd68 <left>
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	8f de       	rcall	.-738    	; 0xdf2 <angle_rotate>
    10d4:	00 00       	nop
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <right_degrees>:
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	1f 92       	push	r1
    10e6:	1f 92       	push	r1
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	9a 83       	std	Y+2, r25	; 0x02
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	64 ed       	ldi	r22, 0xD4	; 212
    10f2:	88 ec       	ldi	r24, 0xC8	; 200
    10f4:	e2 dd       	rcall	.-1084   	; 0xcba <velocity>
    10f6:	52 de       	rcall	.-860    	; 0xd9c <right>
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	7a de       	rcall	.-780    	; 0xdf2 <angle_rotate>
    10fe:	00 00       	nop
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <buzzer_init>:
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	87 e2       	ldi	r24, 0x27	; 39
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	27 e2       	ldi	r18, 0x27	; 39
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	f9 01       	movw	r30, r18
    111c:	20 81       	ld	r18, Z
    111e:	28 60       	ori	r18, 0x08	; 8
    1120:	fc 01       	movw	r30, r24
    1122:	20 83       	st	Z, r18
    1124:	88 e2       	ldi	r24, 0x28	; 40
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	28 e2       	ldi	r18, 0x28	; 40
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	f9 01       	movw	r30, r18
    112e:	20 81       	ld	r18, Z
    1130:	27 7f       	andi	r18, 0xF7	; 247
    1132:	fc 01       	movw	r30, r24
    1134:	20 83       	st	Z, r18
    1136:	00 00       	nop
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <adc_init>:


void adc_init(){
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	
	// enable ADC and pre-scalar = 64 (ADEN = 1, ADPS2 = 1, ADPS1 = 1, ADPS0 = 0)
	// and clear ADC start conversion bit, auto trigger enable bit, interrupt flag bit and interrupt enable bit
	ADCSRA_reg	|= ( (1 << ADEN_bit) | (1 << ADPS2_bit) | (1 << ADPS1_bit) );
    1146:	8a e7       	ldi	r24, 0x7A	; 122
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	2a e7       	ldi	r18, 0x7A	; 122
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	f9 01       	movw	r30, r18
    1150:	20 81       	ld	r18, Z
    1152:	26 68       	ori	r18, 0x86	; 134
    1154:	fc 01       	movw	r30, r24
    1156:	20 83       	st	Z, r18
	ADCSRA_reg	&= ~( (1 << ADSC_bit) | (1 << ADATE_bit) | (1 << ADIF_bit) | (1 << ADIE_bit) | (1 << ADPS0_bit) );
    1158:	8a e7       	ldi	r24, 0x7A	; 122
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	2a e7       	ldi	r18, 0x7A	; 122
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	f9 01       	movw	r30, r18
    1162:	20 81       	ld	r18, Z
    1164:	26 78       	andi	r18, 0x86	; 134
    1166:	fc 01       	movw	r30, r24
    1168:	20 83       	st	Z, r18
	
	// In ADCSRB, disable Analog Comparator Multiplexer, MUX5 bit and ADC Auto Trigger Source bits
	ADCSRB_reg	&= ~( (1 << ACME_bit) | (1 << MUX5_bit) | (1 << ADTS2_bit) | (1 << ADTS1_bit) | (1 << ADTS0_bit) );
    116a:	8b e7       	ldi	r24, 0x7B	; 123
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	2b e7       	ldi	r18, 0x7B	; 123
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	f9 01       	movw	r30, r18
    1174:	20 81       	ld	r18, Z
    1176:	20 7b       	andi	r18, 0xB0	; 176
    1178:	fc 01       	movw	r30, r24
    117a:	20 83       	st	Z, r18
	
	// In ADMUX, set the Reference Selection bits to use the AVCC as reference, and disable the channel selection bits MUX[4:0]
	ADMUX_reg	&= ~( (1 << REFS1_bit) | (1 << MUX4_bit) | (1 << MUX3_bit) | (1 << MUX2_bit) | (1 << MUX1_bit) | (1 << MUX0_bit) );
    117c:	8c e7       	ldi	r24, 0x7C	; 124
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	2c e7       	ldi	r18, 0x7C	; 124
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	f9 01       	movw	r30, r18
    1186:	20 81       	ld	r18, Z
    1188:	20 76       	andi	r18, 0x60	; 96
    118a:	fc 01       	movw	r30, r24
    118c:	20 83       	st	Z, r18
	ADMUX_reg	|= (1 << REFS0_bit);
    118e:	8c e7       	ldi	r24, 0x7C	; 124
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	2c e7       	ldi	r18, 0x7C	; 124
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	f9 01       	movw	r30, r18
    1198:	20 81       	ld	r18, Z
    119a:	20 64       	ori	r18, 0x40	; 64
    119c:	fc 01       	movw	r30, r24
    119e:	20 83       	st	Z, r18
	
	// In ADMUX, enable the ADLAR bit for 8-bit ADC result
	ADMUX_reg	|= (1 << ADLAR_bit);
    11a0:	8c e7       	ldi	r24, 0x7C	; 124
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	2c e7       	ldi	r18, 0x7C	; 124
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	f9 01       	movw	r30, r18
    11aa:	20 81       	ld	r18, Z
    11ac:	20 62       	ori	r18, 0x20	; 32
    11ae:	fc 01       	movw	r30, r24
    11b0:	20 83       	st	Z, r18
	
	// In ACSR, disable the Analog Comparator by writing 1 to ACD_bit
	ACSR_reg	|= ( 1 << ACD_bit );
    11b2:	80 e5       	ldi	r24, 0x50	; 80
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	20 e5       	ldi	r18, 0x50	; 80
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	f9 01       	movw	r30, r18
    11bc:	20 81       	ld	r18, Z
    11be:	20 68       	ori	r18, 0x80	; 128
    11c0:	fc 01       	movw	r30, r24
    11c2:	20 83       	st	Z, r18
}
    11c4:	00 00       	nop
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <ADC_Conversion>:




unsigned char ADC_Conversion(unsigned char channel_num)
{
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	1f 92       	push	r1
    11d2:	1f 92       	push	r1
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char adc_8bit_data;
	
	// MUX[5:0] bits to select the ADC channel number
	if ( channel_num > 7 )
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	88 30       	cpi	r24, 0x08	; 8
    11de:	48 f0       	brcs	.+18     	; 0x11f2 <ADC_Conversion+0x26>
	{
		ADCSRB_reg |= ( 1 << MUX5_bit );
    11e0:	8b e7       	ldi	r24, 0x7B	; 123
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	2b e7       	ldi	r18, 0x7B	; 123
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	f9 01       	movw	r30, r18
    11ea:	20 81       	ld	r18, Z
    11ec:	28 60       	ori	r18, 0x08	; 8
    11ee:	fc 01       	movw	r30, r24
    11f0:	20 83       	st	Z, r18
	}
	channel_num	= channel_num & 0x07;
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	87 70       	andi	r24, 0x07	; 7
    11f6:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX_reg	= ( ADMUX_reg | channel_num );
    11f8:	8c e7       	ldi	r24, 0x7C	; 124
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	2c e7       	ldi	r18, 0x7C	; 124
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	f9 01       	movw	r30, r18
    1202:	30 81       	ld	r19, Z
    1204:	2a 81       	ldd	r18, Y+2	; 0x02
    1206:	23 2b       	or	r18, r19
    1208:	fc 01       	movw	r30, r24
    120a:	20 83       	st	Z, r18
	
	// set the ADSC bit in ADCSRA register
	ADCSRA_reg		|= ( 1 << ADSC_bit );
    120c:	8a e7       	ldi	r24, 0x7A	; 122
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	2a e7       	ldi	r18, 0x7A	; 122
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	f9 01       	movw	r30, r18
    1216:	20 81       	ld	r18, Z
    1218:	20 64       	ori	r18, 0x40	; 64
    121a:	fc 01       	movw	r30, r24
    121c:	20 83       	st	Z, r18
	
	//Wait for ADC conversion to complete
	while( ( ADCSRA_reg & ( 1 << ADIF_bit ) ) == 0x00 );
    121e:	00 00       	nop
    1220:	8a e7       	ldi	r24, 0x7A	; 122
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	fc 01       	movw	r30, r24
    1226:	80 81       	ld	r24, Z
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	80 71       	andi	r24, 0x10	; 16
    122e:	99 27       	eor	r25, r25
    1230:	89 2b       	or	r24, r25
    1232:	b1 f3       	breq	.-20     	; 0x1220 <ADC_Conversion+0x54>
	
	adc_8bit_data = ADCH_reg;
    1234:	89 e7       	ldi	r24, 0x79	; 121
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	fc 01       	movw	r30, r24
    123a:	80 81       	ld	r24, Z
    123c:	89 83       	std	Y+1, r24	; 0x01
	
	// clear ADIF bit by writing 1 to it
	ADCSRA_reg		|= ( 1 << ADIF_bit );
    123e:	8a e7       	ldi	r24, 0x7A	; 122
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	2a e7       	ldi	r18, 0x7A	; 122
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	f9 01       	movw	r30, r18
    1248:	20 81       	ld	r18, Z
    124a:	20 61       	ori	r18, 0x10	; 16
    124c:	fc 01       	movw	r30, r24
    124e:	20 83       	st	Z, r18
	
	// clear the MUX5 bit
	ADCSRB_reg		&= ~( 1 << MUX5_bit );
    1250:	8b e7       	ldi	r24, 0x7B	; 123
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	2b e7       	ldi	r18, 0x7B	; 123
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	f9 01       	movw	r30, r18
    125a:	20 81       	ld	r18, Z
    125c:	27 7f       	andi	r18, 0xF7	; 247
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18
	
	// clear the MUX[4:0] bits
	ADMUX_reg		&= ~( (1 << MUX4_bit) | (1 << MUX3_bit) | (1 << MUX2_bit) | (1 << MUX1_bit) | (1 << MUX0_bit) );
    1262:	8c e7       	ldi	r24, 0x7C	; 124
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	2c e7       	ldi	r18, 0x7C	; 124
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	f9 01       	movw	r30, r18
    126c:	20 81       	ld	r18, Z
    126e:	20 7e       	andi	r18, 0xE0	; 224
    1270:	fc 01       	movw	r30, r24
    1272:	20 83       	st	Z, r18
	
	return adc_8bit_data;
    1274:	89 81       	ldd	r24, Y+1	; 0x01
}
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	08 95       	ret

00001280 <adc_port_config>:



void adc_port_config (void)
{
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	adc_sensor_low_ddr_reg		= 0x00;				// set PORTF direction as input
    1288:	80 e3       	ldi	r24, 0x30	; 48
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	fc 01       	movw	r30, r24
    128e:	10 82       	st	Z, r1
	adc_sensor_low_port_reg		= 0x00;				// set PORTF pins floating
    1290:	81 e3       	ldi	r24, 0x31	; 49
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	fc 01       	movw	r30, r24
    1296:	10 82       	st	Z, r1
	adc_sensor_high_ddr_reg		= 0x00;				// set PORTK direction as input
    1298:	87 e0       	ldi	r24, 0x07	; 7
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	fc 01       	movw	r30, r24
    129e:	10 82       	st	Z, r1
	adc_sensor_high_port_reg	= 0x00;				// set PORTK pins floating
    12a0:	88 e0       	ldi	r24, 0x08	; 8
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	fc 01       	movw	r30, r24
    12a6:	10 82       	st	Z, r1
}
    12a8:	00 00       	nop
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <lcd_port_config>:
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
}
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	87 e2       	ldi	r24, 0x27	; 39
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	27 e2       	ldi	r18, 0x27	; 39
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	f9 01       	movw	r30, r18
    12c2:	20 81       	ld	r18, Z
    12c4:	27 60       	ori	r18, 0x07	; 7
    12c6:	fc 01       	movw	r30, r24
    12c8:	20 83       	st	Z, r18
    12ca:	87 e2       	ldi	r24, 0x27	; 39
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	27 e2       	ldi	r18, 0x27	; 39
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	f9 01       	movw	r30, r18
    12d4:	20 81       	ld	r18, Z
    12d6:	20 6f       	ori	r18, 0xF0	; 240
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18
    12dc:	88 e2       	ldi	r24, 0x28	; 40
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	28 e2       	ldi	r18, 0x28	; 40
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	f9 01       	movw	r30, r18
    12e6:	20 81       	ld	r18, Z
    12e8:	28 7f       	andi	r18, 0xF8	; 248
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
    12ee:	88 e2       	ldi	r24, 0x28	; 40
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	28 e2       	ldi	r18, 0x28	; 40
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	f9 01       	movw	r30, r18
    12f8:	20 81       	ld	r18, Z
    12fa:	2f 70       	andi	r18, 0x0F	; 15
    12fc:	fc 01       	movw	r30, r24
    12fe:	20 83       	st	Z, r18
    1300:	00 00       	nop
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <lcd_set_4bit>:
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	c0 57       	subi	r28, 0x70	; 112
    1316:	d1 09       	sbc	r29, r1
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	a0 e8       	ldi	r26, 0x80	; 128
    1328:	bf e3       	ldi	r27, 0x3F	; 63
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	9a 83       	std	Y+2, r25	; 0x02
    132e:	ab 83       	std	Y+3, r26	; 0x03
    1330:	bc 83       	std	Y+4, r27	; 0x04
    1332:	8e 01       	movw	r16, r28
    1334:	09 59       	subi	r16, 0x99	; 153
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	26 e6       	ldi	r18, 0x66	; 102
    133a:	36 e6       	ldi	r19, 0x66	; 102
    133c:	46 e6       	ldi	r20, 0x66	; 102
    133e:	55 e4       	ldi	r21, 0x45	; 69
    1340:	69 81       	ldd	r22, Y+1	; 0x01
    1342:	7a 81       	ldd	r23, Y+2	; 0x02
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	0e 94 66 15 	call	0x2acc	; 0x2acc <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	f8 01       	movw	r30, r16
    1352:	80 83       	st	Z, r24
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	a2 83       	std	Z+2, r26	; 0x02
    1358:	b3 83       	std	Z+3, r27	; 0x03
    135a:	ce 01       	movw	r24, r28
    135c:	89 59       	subi	r24, 0x99	; 153
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e8       	ldi	r20, 0x80	; 128
    1366:	5f e3       	ldi	r21, 0x3F	; 63
    1368:	fc 01       	movw	r30, r24
    136a:	60 81       	ld	r22, Z
    136c:	71 81       	ldd	r23, Z+1	; 0x01
    136e:	82 81       	ldd	r24, Z+2	; 0x02
    1370:	93 81       	ldd	r25, Z+3	; 0x03
    1372:	0e 94 18 14 	call	0x2830	; 0x2830 <__cmpsf2>
    1376:	88 23       	and	r24, r24
    1378:	4c f4       	brge	.+18     	; 0x138c <lcd_set_4bit+0x84>
    137a:	ce 01       	movw	r24, r28
    137c:	85 59       	subi	r24, 0x95	; 149
    137e:	9f 4f       	sbci	r25, 0xFF	; 255
    1380:	21 e0       	ldi	r18, 0x01	; 1
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	fc 01       	movw	r30, r24
    1386:	31 83       	std	Z+1, r19	; 0x01
    1388:	20 83       	st	Z, r18
    138a:	69 c0       	rjmp	.+210    	; 0x145e <lcd_set_4bit+0x156>
    138c:	ce 01       	movw	r24, r28
    138e:	89 59       	subi	r24, 0x99	; 153
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	3f ef       	ldi	r19, 0xFF	; 255
    1396:	4f e7       	ldi	r20, 0x7F	; 127
    1398:	57 e4       	ldi	r21, 0x47	; 71
    139a:	fc 01       	movw	r30, r24
    139c:	60 81       	ld	r22, Z
    139e:	71 81       	ldd	r23, Z+1	; 0x01
    13a0:	82 81       	ldd	r24, Z+2	; 0x02
    13a2:	93 81       	ldd	r25, Z+3	; 0x03
    13a4:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gesf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	0c f0       	brlt	.+2      	; 0x13ae <lcd_set_4bit+0xa6>
    13ac:	46 c0       	rjmp	.+140    	; 0x143a <lcd_set_4bit+0x132>
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e2       	ldi	r20, 0x20	; 32
    13b4:	51 e4       	ldi	r21, 0x41	; 65
    13b6:	69 81       	ldd	r22, Y+1	; 0x01
    13b8:	7a 81       	ldd	r23, Y+2	; 0x02
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	0e 94 66 15 	call	0x2acc	; 0x2acc <__mulsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	8e 01       	movw	r16, r28
    13c8:	05 59       	subi	r16, 0x95	; 149
    13ca:	1f 4f       	sbci	r17, 0xFF	; 255
    13cc:	bc 01       	movw	r22, r24
    13ce:	cd 01       	movw	r24, r26
    13d0:	0e 94 84 14 	call	0x2908	; 0x2908 <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	f8 01       	movw	r30, r16
    13da:	91 83       	std	Z+1, r25	; 0x01
    13dc:	80 83       	st	Z, r24
    13de:	24 c0       	rjmp	.+72     	; 0x1428 <lcd_set_4bit+0x120>
    13e0:	ce 01       	movw	r24, r28
    13e2:	83 59       	subi	r24, 0x93	; 147
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	20 e7       	ldi	r18, 0x70	; 112
    13e8:	31 e0       	ldi	r19, 0x01	; 1
    13ea:	fc 01       	movw	r30, r24
    13ec:	31 83       	std	Z+1, r19	; 0x01
    13ee:	20 83       	st	Z, r18
    13f0:	ce 01       	movw	r24, r28
    13f2:	83 59       	subi	r24, 0x93	; 147
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	fc 01       	movw	r30, r24
    13f8:	80 81       	ld	r24, Z
    13fa:	91 81       	ldd	r25, Z+1	; 0x01
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <lcd_set_4bit+0xf4>
    1400:	9e 01       	movw	r18, r28
    1402:	23 59       	subi	r18, 0x93	; 147
    1404:	3f 4f       	sbci	r19, 0xFF	; 255
    1406:	f9 01       	movw	r30, r18
    1408:	91 83       	std	Z+1, r25	; 0x01
    140a:	80 83       	st	Z, r24
    140c:	ce 01       	movw	r24, r28
    140e:	85 59       	subi	r24, 0x95	; 149
    1410:	9f 4f       	sbci	r25, 0xFF	; 255
    1412:	9e 01       	movw	r18, r28
    1414:	25 59       	subi	r18, 0x95	; 149
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	f9 01       	movw	r30, r18
    141a:	20 81       	ld	r18, Z
    141c:	31 81       	ldd	r19, Z+1	; 0x01
    141e:	21 50       	subi	r18, 0x01	; 1
    1420:	31 09       	sbc	r19, r1
    1422:	fc 01       	movw	r30, r24
    1424:	31 83       	std	Z+1, r19	; 0x01
    1426:	20 83       	st	Z, r18
    1428:	ce 01       	movw	r24, r28
    142a:	85 59       	subi	r24, 0x95	; 149
    142c:	9f 4f       	sbci	r25, 0xFF	; 255
    142e:	fc 01       	movw	r30, r24
    1430:	80 81       	ld	r24, Z
    1432:	91 81       	ldd	r25, Z+1	; 0x01
    1434:	89 2b       	or	r24, r25
    1436:	a1 f6       	brne	.-88     	; 0x13e0 <lcd_set_4bit+0xd8>
    1438:	2c c0       	rjmp	.+88     	; 0x1492 <lcd_set_4bit+0x18a>
    143a:	8e 01       	movw	r16, r28
    143c:	05 59       	subi	r16, 0x95	; 149
    143e:	1f 4f       	sbci	r17, 0xFF	; 255
    1440:	ce 01       	movw	r24, r28
    1442:	89 59       	subi	r24, 0x99	; 153
    1444:	9f 4f       	sbci	r25, 0xFF	; 255
    1446:	fc 01       	movw	r30, r24
    1448:	60 81       	ld	r22, Z
    144a:	71 81       	ldd	r23, Z+1	; 0x01
    144c:	82 81       	ldd	r24, Z+2	; 0x02
    144e:	93 81       	ldd	r25, Z+3	; 0x03
    1450:	0e 94 84 14 	call	0x2908	; 0x2908 <__fixunssfsi>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	f8 01       	movw	r30, r16
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	80 83       	st	Z, r24
    145e:	ce 01       	movw	r24, r28
    1460:	81 59       	subi	r24, 0x91	; 145
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	9e 01       	movw	r18, r28
    1466:	25 59       	subi	r18, 0x95	; 149
    1468:	3f 4f       	sbci	r19, 0xFF	; 255
    146a:	f9 01       	movw	r30, r18
    146c:	20 81       	ld	r18, Z
    146e:	31 81       	ldd	r19, Z+1	; 0x01
    1470:	fc 01       	movw	r30, r24
    1472:	31 83       	std	Z+1, r19	; 0x01
    1474:	20 83       	st	Z, r18
    1476:	ce 01       	movw	r24, r28
    1478:	81 59       	subi	r24, 0x91	; 145
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	fc 01       	movw	r30, r24
    147e:	80 81       	ld	r24, Z
    1480:	91 81       	ldd	r25, Z+1	; 0x01
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <lcd_set_4bit+0x17a>
    1486:	9e 01       	movw	r18, r28
    1488:	21 59       	subi	r18, 0x91	; 145
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	f9 01       	movw	r30, r18
    148e:	91 83       	std	Z+1, r25	; 0x01
    1490:	80 83       	st	Z, r24
    1492:	88 e2       	ldi	r24, 0x28	; 40
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	28 e2       	ldi	r18, 0x28	; 40
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	f9 01       	movw	r30, r18
    149c:	20 81       	ld	r18, Z
    149e:	2e 7f       	andi	r18, 0xFE	; 254
    14a0:	fc 01       	movw	r30, r24
    14a2:	20 83       	st	Z, r18
    14a4:	88 e2       	ldi	r24, 0x28	; 40
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	28 e2       	ldi	r18, 0x28	; 40
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	f9 01       	movw	r30, r18
    14ae:	20 81       	ld	r18, Z
    14b0:	2d 7f       	andi	r18, 0xFD	; 253
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18
    14b6:	88 e2       	ldi	r24, 0x28	; 40
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	20 e3       	ldi	r18, 0x30	; 48
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18
    14c0:	88 e2       	ldi	r24, 0x28	; 40
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	28 e2       	ldi	r18, 0x28	; 40
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	f9 01       	movw	r30, r18
    14ca:	20 81       	ld	r18, Z
    14cc:	24 60       	ori	r18, 0x04	; 4
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 83       	st	Z, r18
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a0 ea       	ldi	r26, 0xA0	; 160
    14d8:	b0 e4       	ldi	r27, 0x40	; 64
    14da:	8d 83       	std	Y+5, r24	; 0x05
    14dc:	9e 83       	std	Y+6, r25	; 0x06
    14de:	af 83       	std	Y+7, r26	; 0x07
    14e0:	b8 87       	std	Y+8, r27	; 0x08
    14e2:	8e 01       	movw	r16, r28
    14e4:	03 5a       	subi	r16, 0xA3	; 163
    14e6:	1f 4f       	sbci	r17, 0xFF	; 255
    14e8:	26 e6       	ldi	r18, 0x66	; 102
    14ea:	36 e6       	ldi	r19, 0x66	; 102
    14ec:	46 e6       	ldi	r20, 0x66	; 102
    14ee:	55 e4       	ldi	r21, 0x45	; 69
    14f0:	6d 81       	ldd	r22, Y+5	; 0x05
    14f2:	7e 81       	ldd	r23, Y+6	; 0x06
    14f4:	8f 81       	ldd	r24, Y+7	; 0x07
    14f6:	98 85       	ldd	r25, Y+8	; 0x08
    14f8:	0e 94 66 15 	call	0x2acc	; 0x2acc <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	f8 01       	movw	r30, r16
    1502:	80 83       	st	Z, r24
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	a2 83       	std	Z+2, r26	; 0x02
    1508:	b3 83       	std	Z+3, r27	; 0x03
    150a:	ce 01       	movw	r24, r28
    150c:	83 5a       	subi	r24, 0xA3	; 163
    150e:	9f 4f       	sbci	r25, 0xFF	; 255
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e8       	ldi	r20, 0x80	; 128
    1516:	5f e3       	ldi	r21, 0x3F	; 63
    1518:	fc 01       	movw	r30, r24
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	0e 94 18 14 	call	0x2830	; 0x2830 <__cmpsf2>
    1526:	88 23       	and	r24, r24
    1528:	4c f4       	brge	.+18     	; 0x153c <lcd_set_4bit+0x234>
    152a:	ce 01       	movw	r24, r28
    152c:	8f 59       	subi	r24, 0x9F	; 159
    152e:	9f 4f       	sbci	r25, 0xFF	; 255
    1530:	21 e0       	ldi	r18, 0x01	; 1
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	fc 01       	movw	r30, r24
    1536:	31 83       	std	Z+1, r19	; 0x01
    1538:	20 83       	st	Z, r18
    153a:	69 c0       	rjmp	.+210    	; 0x160e <lcd_set_4bit+0x306>
    153c:	ce 01       	movw	r24, r28
    153e:	83 5a       	subi	r24, 0xA3	; 163
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	3f ef       	ldi	r19, 0xFF	; 255
    1546:	4f e7       	ldi	r20, 0x7F	; 127
    1548:	57 e4       	ldi	r21, 0x47	; 71
    154a:	fc 01       	movw	r30, r24
    154c:	60 81       	ld	r22, Z
    154e:	71 81       	ldd	r23, Z+1	; 0x01
    1550:	82 81       	ldd	r24, Z+2	; 0x02
    1552:	93 81       	ldd	r25, Z+3	; 0x03
    1554:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gesf2>
    1558:	18 16       	cp	r1, r24
    155a:	0c f0       	brlt	.+2      	; 0x155e <lcd_set_4bit+0x256>
    155c:	46 c0       	rjmp	.+140    	; 0x15ea <lcd_set_4bit+0x2e2>
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e2       	ldi	r20, 0x20	; 32
    1564:	51 e4       	ldi	r21, 0x41	; 65
    1566:	6d 81       	ldd	r22, Y+5	; 0x05
    1568:	7e 81       	ldd	r23, Y+6	; 0x06
    156a:	8f 81       	ldd	r24, Y+7	; 0x07
    156c:	98 85       	ldd	r25, Y+8	; 0x08
    156e:	0e 94 66 15 	call	0x2acc	; 0x2acc <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	8e 01       	movw	r16, r28
    1578:	0f 59       	subi	r16, 0x9F	; 159
    157a:	1f 4f       	sbci	r17, 0xFF	; 255
    157c:	bc 01       	movw	r22, r24
    157e:	cd 01       	movw	r24, r26
    1580:	0e 94 84 14 	call	0x2908	; 0x2908 <__fixunssfsi>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	f8 01       	movw	r30, r16
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	80 83       	st	Z, r24
    158e:	24 c0       	rjmp	.+72     	; 0x15d8 <lcd_set_4bit+0x2d0>
    1590:	ce 01       	movw	r24, r28
    1592:	8d 59       	subi	r24, 0x9D	; 157
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	20 e7       	ldi	r18, 0x70	; 112
    1598:	31 e0       	ldi	r19, 0x01	; 1
    159a:	fc 01       	movw	r30, r24
    159c:	31 83       	std	Z+1, r19	; 0x01
    159e:	20 83       	st	Z, r18
    15a0:	ce 01       	movw	r24, r28
    15a2:	8d 59       	subi	r24, 0x9D	; 157
    15a4:	9f 4f       	sbci	r25, 0xFF	; 255
    15a6:	fc 01       	movw	r30, r24
    15a8:	80 81       	ld	r24, Z
    15aa:	91 81       	ldd	r25, Z+1	; 0x01
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <lcd_set_4bit+0x2a4>
    15b0:	9e 01       	movw	r18, r28
    15b2:	2d 59       	subi	r18, 0x9D	; 157
    15b4:	3f 4f       	sbci	r19, 0xFF	; 255
    15b6:	f9 01       	movw	r30, r18
    15b8:	91 83       	std	Z+1, r25	; 0x01
    15ba:	80 83       	st	Z, r24
    15bc:	ce 01       	movw	r24, r28
    15be:	8f 59       	subi	r24, 0x9F	; 159
    15c0:	9f 4f       	sbci	r25, 0xFF	; 255
    15c2:	9e 01       	movw	r18, r28
    15c4:	2f 59       	subi	r18, 0x9F	; 159
    15c6:	3f 4f       	sbci	r19, 0xFF	; 255
    15c8:	f9 01       	movw	r30, r18
    15ca:	20 81       	ld	r18, Z
    15cc:	31 81       	ldd	r19, Z+1	; 0x01
    15ce:	21 50       	subi	r18, 0x01	; 1
    15d0:	31 09       	sbc	r19, r1
    15d2:	fc 01       	movw	r30, r24
    15d4:	31 83       	std	Z+1, r19	; 0x01
    15d6:	20 83       	st	Z, r18
    15d8:	ce 01       	movw	r24, r28
    15da:	8f 59       	subi	r24, 0x9F	; 159
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	fc 01       	movw	r30, r24
    15e0:	80 81       	ld	r24, Z
    15e2:	91 81       	ldd	r25, Z+1	; 0x01
    15e4:	89 2b       	or	r24, r25
    15e6:	a1 f6       	brne	.-88     	; 0x1590 <lcd_set_4bit+0x288>
    15e8:	2c c0       	rjmp	.+88     	; 0x1642 <lcd_set_4bit+0x33a>
    15ea:	8e 01       	movw	r16, r28
    15ec:	0f 59       	subi	r16, 0x9F	; 159
    15ee:	1f 4f       	sbci	r17, 0xFF	; 255
    15f0:	ce 01       	movw	r24, r28
    15f2:	83 5a       	subi	r24, 0xA3	; 163
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	fc 01       	movw	r30, r24
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	0e 94 84 14 	call	0x2908	; 0x2908 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	f8 01       	movw	r30, r16
    160a:	91 83       	std	Z+1, r25	; 0x01
    160c:	80 83       	st	Z, r24
    160e:	ce 01       	movw	r24, r28
    1610:	8b 59       	subi	r24, 0x9B	; 155
    1612:	9f 4f       	sbci	r25, 0xFF	; 255
    1614:	9e 01       	movw	r18, r28
    1616:	2f 59       	subi	r18, 0x9F	; 159
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	f9 01       	movw	r30, r18
    161c:	20 81       	ld	r18, Z
    161e:	31 81       	ldd	r19, Z+1	; 0x01
    1620:	fc 01       	movw	r30, r24
    1622:	31 83       	std	Z+1, r19	; 0x01
    1624:	20 83       	st	Z, r18
    1626:	ce 01       	movw	r24, r28
    1628:	8b 59       	subi	r24, 0x9B	; 155
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	fc 01       	movw	r30, r24
    162e:	80 81       	ld	r24, Z
    1630:	91 81       	ldd	r25, Z+1	; 0x01
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <lcd_set_4bit+0x32a>
    1636:	9e 01       	movw	r18, r28
    1638:	2b 59       	subi	r18, 0x9B	; 155
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	f9 01       	movw	r30, r18
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	80 83       	st	Z, r24
    1642:	88 e2       	ldi	r24, 0x28	; 40
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	28 e2       	ldi	r18, 0x28	; 40
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	f9 01       	movw	r30, r18
    164c:	20 81       	ld	r18, Z
    164e:	2b 7f       	andi	r18, 0xFB	; 251
    1650:	fc 01       	movw	r30, r24
    1652:	20 83       	st	Z, r18
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a0 e8       	ldi	r26, 0x80	; 128
    165a:	bf e3       	ldi	r27, 0x3F	; 63
    165c:	89 87       	std	Y+9, r24	; 0x09
    165e:	9a 87       	std	Y+10, r25	; 0x0a
    1660:	ab 87       	std	Y+11, r26	; 0x0b
    1662:	bc 87       	std	Y+12, r27	; 0x0c
    1664:	8e 01       	movw	r16, r28
    1666:	0d 5a       	subi	r16, 0xAD	; 173
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	26 e6       	ldi	r18, 0x66	; 102
    166c:	36 e6       	ldi	r19, 0x66	; 102
    166e:	46 e6       	ldi	r20, 0x66	; 102
    1670:	55 e4       	ldi	r21, 0x45	; 69
    1672:	69 85       	ldd	r22, Y+9	; 0x09
    1674:	7a 85       	ldd	r23, Y+10	; 0x0a
    1676:	8b 85       	ldd	r24, Y+11	; 0x0b
    1678:	9c 85       	ldd	r25, Y+12	; 0x0c
    167a:	0e 94 66 15 	call	0x2acc	; 0x2acc <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	f8 01       	movw	r30, r16
    1684:	80 83       	st	Z, r24
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	a2 83       	std	Z+2, r26	; 0x02
    168a:	b3 83       	std	Z+3, r27	; 0x03
    168c:	ce 01       	movw	r24, r28
    168e:	8d 5a       	subi	r24, 0xAD	; 173
    1690:	9f 4f       	sbci	r25, 0xFF	; 255
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	5f e3       	ldi	r21, 0x3F	; 63
    169a:	fc 01       	movw	r30, r24
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	0e 94 18 14 	call	0x2830	; 0x2830 <__cmpsf2>
    16a8:	88 23       	and	r24, r24
    16aa:	4c f4       	brge	.+18     	; 0x16be <lcd_set_4bit+0x3b6>
    16ac:	ce 01       	movw	r24, r28
    16ae:	89 5a       	subi	r24, 0xA9	; 169
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	21 e0       	ldi	r18, 0x01	; 1
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	fc 01       	movw	r30, r24
    16b8:	31 83       	std	Z+1, r19	; 0x01
    16ba:	20 83       	st	Z, r18
    16bc:	69 c0       	rjmp	.+210    	; 0x1790 <lcd_set_4bit+0x488>
    16be:	ce 01       	movw	r24, r28
    16c0:	8d 5a       	subi	r24, 0xAD	; 173
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	3f ef       	ldi	r19, 0xFF	; 255
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	57 e4       	ldi	r21, 0x47	; 71
    16cc:	fc 01       	movw	r30, r24
    16ce:	60 81       	ld	r22, Z
    16d0:	71 81       	ldd	r23, Z+1	; 0x01
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	93 81       	ldd	r25, Z+3	; 0x03
    16d6:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gesf2>
    16da:	18 16       	cp	r1, r24
    16dc:	0c f0       	brlt	.+2      	; 0x16e0 <lcd_set_4bit+0x3d8>
    16de:	46 c0       	rjmp	.+140    	; 0x176c <lcd_set_4bit+0x464>
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e2       	ldi	r20, 0x20	; 32
    16e6:	51 e4       	ldi	r21, 0x41	; 65
    16e8:	69 85       	ldd	r22, Y+9	; 0x09
    16ea:	7a 85       	ldd	r23, Y+10	; 0x0a
    16ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    16f0:	0e 94 66 15 	call	0x2acc	; 0x2acc <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	8e 01       	movw	r16, r28
    16fa:	09 5a       	subi	r16, 0xA9	; 169
    16fc:	1f 4f       	sbci	r17, 0xFF	; 255
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	0e 94 84 14 	call	0x2908	; 0x2908 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	f8 01       	movw	r30, r16
    170c:	91 83       	std	Z+1, r25	; 0x01
    170e:	80 83       	st	Z, r24
    1710:	24 c0       	rjmp	.+72     	; 0x175a <lcd_set_4bit+0x452>
    1712:	ce 01       	movw	r24, r28
    1714:	87 5a       	subi	r24, 0xA7	; 167
    1716:	9f 4f       	sbci	r25, 0xFF	; 255
    1718:	20 e7       	ldi	r18, 0x70	; 112
    171a:	31 e0       	ldi	r19, 0x01	; 1
    171c:	fc 01       	movw	r30, r24
    171e:	31 83       	std	Z+1, r19	; 0x01
    1720:	20 83       	st	Z, r18
    1722:	ce 01       	movw	r24, r28
    1724:	87 5a       	subi	r24, 0xA7	; 167
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	fc 01       	movw	r30, r24
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <lcd_set_4bit+0x426>
    1732:	9e 01       	movw	r18, r28
    1734:	27 5a       	subi	r18, 0xA7	; 167
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
    1738:	f9 01       	movw	r30, r18
    173a:	91 83       	std	Z+1, r25	; 0x01
    173c:	80 83       	st	Z, r24
    173e:	ce 01       	movw	r24, r28
    1740:	89 5a       	subi	r24, 0xA9	; 169
    1742:	9f 4f       	sbci	r25, 0xFF	; 255
    1744:	9e 01       	movw	r18, r28
    1746:	29 5a       	subi	r18, 0xA9	; 169
    1748:	3f 4f       	sbci	r19, 0xFF	; 255
    174a:	f9 01       	movw	r30, r18
    174c:	20 81       	ld	r18, Z
    174e:	31 81       	ldd	r19, Z+1	; 0x01
    1750:	21 50       	subi	r18, 0x01	; 1
    1752:	31 09       	sbc	r19, r1
    1754:	fc 01       	movw	r30, r24
    1756:	31 83       	std	Z+1, r19	; 0x01
    1758:	20 83       	st	Z, r18
    175a:	ce 01       	movw	r24, r28
    175c:	89 5a       	subi	r24, 0xA9	; 169
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	fc 01       	movw	r30, r24
    1762:	80 81       	ld	r24, Z
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	89 2b       	or	r24, r25
    1768:	a1 f6       	brne	.-88     	; 0x1712 <lcd_set_4bit+0x40a>
    176a:	2c c0       	rjmp	.+88     	; 0x17c4 <lcd_set_4bit+0x4bc>
    176c:	8e 01       	movw	r16, r28
    176e:	09 5a       	subi	r16, 0xA9	; 169
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	ce 01       	movw	r24, r28
    1774:	8d 5a       	subi	r24, 0xAD	; 173
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	fc 01       	movw	r30, r24
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	0e 94 84 14 	call	0x2908	; 0x2908 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	f8 01       	movw	r30, r16
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	80 83       	st	Z, r24
    1790:	ce 01       	movw	r24, r28
    1792:	85 5a       	subi	r24, 0xA5	; 165
    1794:	9f 4f       	sbci	r25, 0xFF	; 255
    1796:	9e 01       	movw	r18, r28
    1798:	29 5a       	subi	r18, 0xA9	; 169
    179a:	3f 4f       	sbci	r19, 0xFF	; 255
    179c:	f9 01       	movw	r30, r18
    179e:	20 81       	ld	r18, Z
    17a0:	31 81       	ldd	r19, Z+1	; 0x01
    17a2:	fc 01       	movw	r30, r24
    17a4:	31 83       	std	Z+1, r19	; 0x01
    17a6:	20 83       	st	Z, r18
    17a8:	ce 01       	movw	r24, r28
    17aa:	85 5a       	subi	r24, 0xA5	; 165
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	fc 01       	movw	r30, r24
    17b0:	80 81       	ld	r24, Z
    17b2:	91 81       	ldd	r25, Z+1	; 0x01
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <lcd_set_4bit+0x4ac>
    17b8:	9e 01       	movw	r18, r28
    17ba:	25 5a       	subi	r18, 0xA5	; 165
    17bc:	3f 4f       	sbci	r19, 0xFF	; 255
    17be:	f9 01       	movw	r30, r18
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
    17c4:	88 e2       	ldi	r24, 0x28	; 40
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	28 e2       	ldi	r18, 0x28	; 40
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	f9 01       	movw	r30, r18
    17ce:	20 81       	ld	r18, Z
    17d0:	2e 7f       	andi	r18, 0xFE	; 254
    17d2:	fc 01       	movw	r30, r24
    17d4:	20 83       	st	Z, r18
    17d6:	88 e2       	ldi	r24, 0x28	; 40
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	28 e2       	ldi	r18, 0x28	; 40
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	f9 01       	movw	r30, r18
    17e0:	20 81       	ld	r18, Z
    17e2:	2d 7f       	andi	r18, 0xFD	; 253
    17e4:	fc 01       	movw	r30, r24
    17e6:	20 83       	st	Z, r18
    17e8:	88 e2       	ldi	r24, 0x28	; 40
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	20 e3       	ldi	r18, 0x30	; 48
    17ee:	fc 01       	movw	r30, r24
    17f0:	20 83       	st	Z, r18
    17f2:	88 e2       	ldi	r24, 0x28	; 40
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	28 e2       	ldi	r18, 0x28	; 40
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	f9 01       	movw	r30, r18
    17fc:	20 81       	ld	r18, Z
    17fe:	24 60       	ori	r18, 0x04	; 4
    1800:	fc 01       	movw	r30, r24
    1802:	20 83       	st	Z, r18
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a0 ea       	ldi	r26, 0xA0	; 160
    180a:	b0 e4       	ldi	r27, 0x40	; 64
    180c:	8d 87       	std	Y+13, r24	; 0x0d
    180e:	9e 87       	std	Y+14, r25	; 0x0e
    1810:	af 87       	std	Y+15, r26	; 0x0f
    1812:	b8 8b       	std	Y+16, r27	; 0x10
    1814:	8e 01       	movw	r16, r28
    1816:	07 5b       	subi	r16, 0xB7	; 183
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	26 e6       	ldi	r18, 0x66	; 102
    181c:	36 e6       	ldi	r19, 0x66	; 102
    181e:	46 e6       	ldi	r20, 0x66	; 102
    1820:	55 e4       	ldi	r21, 0x45	; 69
    1822:	6d 85       	ldd	r22, Y+13	; 0x0d
    1824:	7e 85       	ldd	r23, Y+14	; 0x0e
    1826:	8f 85       	ldd	r24, Y+15	; 0x0f
    1828:	98 89       	ldd	r25, Y+16	; 0x10
    182a:	0e 94 66 15 	call	0x2acc	; 0x2acc <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	f8 01       	movw	r30, r16
    1834:	80 83       	st	Z, r24
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	a2 83       	std	Z+2, r26	; 0x02
    183a:	b3 83       	std	Z+3, r27	; 0x03
    183c:	ce 01       	movw	r24, r28
    183e:	87 5b       	subi	r24, 0xB7	; 183
    1840:	9f 4f       	sbci	r25, 0xFF	; 255
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	fc 01       	movw	r30, r24
    184c:	60 81       	ld	r22, Z
    184e:	71 81       	ldd	r23, Z+1	; 0x01
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	ed d7       	rcall	.+4058   	; 0x2830 <__cmpsf2>
    1856:	88 23       	and	r24, r24
    1858:	4c f4       	brge	.+18     	; 0x186c <lcd_set_4bit+0x564>
    185a:	ce 01       	movw	r24, r28
    185c:	83 5b       	subi	r24, 0xB3	; 179
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
    1860:	21 e0       	ldi	r18, 0x01	; 1
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	fc 01       	movw	r30, r24
    1866:	31 83       	std	Z+1, r19	; 0x01
    1868:	20 83       	st	Z, r18
    186a:	68 c0       	rjmp	.+208    	; 0x193c <lcd_set_4bit+0x634>
    186c:	ce 01       	movw	r24, r28
    186e:	87 5b       	subi	r24, 0xB7	; 183
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	fc 01       	movw	r30, r24
    187c:	60 81       	ld	r22, Z
    187e:	71 81       	ldd	r23, Z+1	; 0x01
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gesf2>
    1888:	18 16       	cp	r1, r24
    188a:	0c f0       	brlt	.+2      	; 0x188e <lcd_set_4bit+0x586>
    188c:	46 c0       	rjmp	.+140    	; 0x191a <lcd_set_4bit+0x612>
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e2       	ldi	r20, 0x20	; 32
    1894:	51 e4       	ldi	r21, 0x41	; 65
    1896:	6d 85       	ldd	r22, Y+13	; 0x0d
    1898:	7e 85       	ldd	r23, Y+14	; 0x0e
    189a:	8f 85       	ldd	r24, Y+15	; 0x0f
    189c:	98 89       	ldd	r25, Y+16	; 0x10
    189e:	0e 94 66 15 	call	0x2acc	; 0x2acc <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	8e 01       	movw	r16, r28
    18a8:	03 5b       	subi	r16, 0xB3	; 179
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	bc 01       	movw	r22, r24
    18ae:	cd 01       	movw	r24, r26
    18b0:	0e 94 84 14 	call	0x2908	; 0x2908 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	f8 01       	movw	r30, r16
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	80 83       	st	Z, r24
    18be:	24 c0       	rjmp	.+72     	; 0x1908 <lcd_set_4bit+0x600>
    18c0:	ce 01       	movw	r24, r28
    18c2:	81 5b       	subi	r24, 0xB1	; 177
    18c4:	9f 4f       	sbci	r25, 0xFF	; 255
    18c6:	20 e7       	ldi	r18, 0x70	; 112
    18c8:	31 e0       	ldi	r19, 0x01	; 1
    18ca:	fc 01       	movw	r30, r24
    18cc:	31 83       	std	Z+1, r19	; 0x01
    18ce:	20 83       	st	Z, r18
    18d0:	ce 01       	movw	r24, r28
    18d2:	81 5b       	subi	r24, 0xB1	; 177
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	fc 01       	movw	r30, r24
    18d8:	80 81       	ld	r24, Z
    18da:	91 81       	ldd	r25, Z+1	; 0x01
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <lcd_set_4bit+0x5d4>
    18e0:	9e 01       	movw	r18, r28
    18e2:	21 5b       	subi	r18, 0xB1	; 177
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	f9 01       	movw	r30, r18
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	80 83       	st	Z, r24
    18ec:	ce 01       	movw	r24, r28
    18ee:	83 5b       	subi	r24, 0xB3	; 179
    18f0:	9f 4f       	sbci	r25, 0xFF	; 255
    18f2:	9e 01       	movw	r18, r28
    18f4:	23 5b       	subi	r18, 0xB3	; 179
    18f6:	3f 4f       	sbci	r19, 0xFF	; 255
    18f8:	f9 01       	movw	r30, r18
    18fa:	20 81       	ld	r18, Z
    18fc:	31 81       	ldd	r19, Z+1	; 0x01
    18fe:	21 50       	subi	r18, 0x01	; 1
    1900:	31 09       	sbc	r19, r1
    1902:	fc 01       	movw	r30, r24
    1904:	31 83       	std	Z+1, r19	; 0x01
    1906:	20 83       	st	Z, r18
    1908:	ce 01       	movw	r24, r28
    190a:	83 5b       	subi	r24, 0xB3	; 179
    190c:	9f 4f       	sbci	r25, 0xFF	; 255
    190e:	fc 01       	movw	r30, r24
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	89 2b       	or	r24, r25
    1916:	a1 f6       	brne	.-88     	; 0x18c0 <lcd_set_4bit+0x5b8>
    1918:	2b c0       	rjmp	.+86     	; 0x1970 <lcd_set_4bit+0x668>
    191a:	8e 01       	movw	r16, r28
    191c:	03 5b       	subi	r16, 0xB3	; 179
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	ce 01       	movw	r24, r28
    1922:	87 5b       	subi	r24, 0xB7	; 183
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	fc 01       	movw	r30, r24
    1928:	60 81       	ld	r22, Z
    192a:	71 81       	ldd	r23, Z+1	; 0x01
    192c:	82 81       	ldd	r24, Z+2	; 0x02
    192e:	93 81       	ldd	r25, Z+3	; 0x03
    1930:	eb d7       	rcall	.+4054   	; 0x2908 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	f8 01       	movw	r30, r16
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	80 83       	st	Z, r24
    193c:	ce 01       	movw	r24, r28
    193e:	8f 5a       	subi	r24, 0xAF	; 175
    1940:	9f 4f       	sbci	r25, 0xFF	; 255
    1942:	9e 01       	movw	r18, r28
    1944:	23 5b       	subi	r18, 0xB3	; 179
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	f9 01       	movw	r30, r18
    194a:	20 81       	ld	r18, Z
    194c:	31 81       	ldd	r19, Z+1	; 0x01
    194e:	fc 01       	movw	r30, r24
    1950:	31 83       	std	Z+1, r19	; 0x01
    1952:	20 83       	st	Z, r18
    1954:	ce 01       	movw	r24, r28
    1956:	8f 5a       	subi	r24, 0xAF	; 175
    1958:	9f 4f       	sbci	r25, 0xFF	; 255
    195a:	fc 01       	movw	r30, r24
    195c:	80 81       	ld	r24, Z
    195e:	91 81       	ldd	r25, Z+1	; 0x01
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <lcd_set_4bit+0x658>
    1964:	9e 01       	movw	r18, r28
    1966:	2f 5a       	subi	r18, 0xAF	; 175
    1968:	3f 4f       	sbci	r19, 0xFF	; 255
    196a:	f9 01       	movw	r30, r18
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
    1970:	88 e2       	ldi	r24, 0x28	; 40
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	28 e2       	ldi	r18, 0x28	; 40
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	f9 01       	movw	r30, r18
    197a:	20 81       	ld	r18, Z
    197c:	2b 7f       	andi	r18, 0xFB	; 251
    197e:	fc 01       	movw	r30, r24
    1980:	20 83       	st	Z, r18
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e8       	ldi	r26, 0x80	; 128
    1988:	bf e3       	ldi	r27, 0x3F	; 63
    198a:	89 8b       	std	Y+17, r24	; 0x11
    198c:	9a 8b       	std	Y+18, r25	; 0x12
    198e:	ab 8b       	std	Y+19, r26	; 0x13
    1990:	bc 8b       	std	Y+20, r27	; 0x14
    1992:	8e 01       	movw	r16, r28
    1994:	01 5c       	subi	r16, 0xC1	; 193
    1996:	1f 4f       	sbci	r17, 0xFF	; 255
    1998:	26 e6       	ldi	r18, 0x66	; 102
    199a:	36 e6       	ldi	r19, 0x66	; 102
    199c:	46 e6       	ldi	r20, 0x66	; 102
    199e:	55 e4       	ldi	r21, 0x45	; 69
    19a0:	69 89       	ldd	r22, Y+17	; 0x11
    19a2:	7a 89       	ldd	r23, Y+18	; 0x12
    19a4:	8b 89       	ldd	r24, Y+19	; 0x13
    19a6:	9c 89       	ldd	r25, Y+20	; 0x14
    19a8:	0e 94 66 15 	call	0x2acc	; 0x2acc <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	f8 01       	movw	r30, r16
    19b2:	80 83       	st	Z, r24
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	a2 83       	std	Z+2, r26	; 0x02
    19b8:	b3 83       	std	Z+3, r27	; 0x03
    19ba:	ce 01       	movw	r24, r28
    19bc:	cf 96       	adiw	r24, 0x3f	; 63
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e8       	ldi	r20, 0x80	; 128
    19c4:	5f e3       	ldi	r21, 0x3F	; 63
    19c6:	fc 01       	movw	r30, r24
    19c8:	60 81       	ld	r22, Z
    19ca:	71 81       	ldd	r23, Z+1	; 0x01
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	93 81       	ldd	r25, Z+3	; 0x03
    19d0:	2f d7       	rcall	.+3678   	; 0x2830 <__cmpsf2>
    19d2:	88 23       	and	r24, r24
    19d4:	4c f4       	brge	.+18     	; 0x19e8 <lcd_set_4bit+0x6e0>
    19d6:	ce 01       	movw	r24, r28
    19d8:	8d 5b       	subi	r24, 0xBD	; 189
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	21 e0       	ldi	r18, 0x01	; 1
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	fc 01       	movw	r30, r24
    19e2:	31 83       	std	Z+1, r19	; 0x01
    19e4:	20 83       	st	Z, r18
    19e6:	65 c0       	rjmp	.+202    	; 0x1ab2 <lcd_set_4bit+0x7aa>
    19e8:	ce 01       	movw	r24, r28
    19ea:	cf 96       	adiw	r24, 0x3f	; 63
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	3f ef       	ldi	r19, 0xFF	; 255
    19f0:	4f e7       	ldi	r20, 0x7F	; 127
    19f2:	57 e4       	ldi	r21, 0x47	; 71
    19f4:	fc 01       	movw	r30, r24
    19f6:	60 81       	ld	r22, Z
    19f8:	71 81       	ldd	r23, Z+1	; 0x01
    19fa:	82 81       	ldd	r24, Z+2	; 0x02
    19fc:	93 81       	ldd	r25, Z+3	; 0x03
    19fe:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__gesf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	0c f0       	brlt	.+2      	; 0x1a08 <lcd_set_4bit+0x700>
    1a06:	45 c0       	rjmp	.+138    	; 0x1a92 <lcd_set_4bit+0x78a>
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e2       	ldi	r20, 0x20	; 32
    1a0e:	51 e4       	ldi	r21, 0x41	; 65
    1a10:	69 89       	ldd	r22, Y+17	; 0x11
    1a12:	7a 89       	ldd	r23, Y+18	; 0x12
    1a14:	8b 89       	ldd	r24, Y+19	; 0x13
    1a16:	9c 89       	ldd	r25, Y+20	; 0x14
    1a18:	0e 94 66 15 	call	0x2acc	; 0x2acc <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	8e 01       	movw	r16, r28
    1a22:	0d 5b       	subi	r16, 0xBD	; 189
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	bc 01       	movw	r22, r24
    1a28:	cd 01       	movw	r24, r26
    1a2a:	6e d7       	rcall	.+3804   	; 0x2908 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	f8 01       	movw	r30, r16
    1a32:	91 83       	std	Z+1, r25	; 0x01
    1a34:	80 83       	st	Z, r24
    1a36:	24 c0       	rjmp	.+72     	; 0x1a80 <lcd_set_4bit+0x778>
    1a38:	ce 01       	movw	r24, r28
    1a3a:	8b 5b       	subi	r24, 0xBB	; 187
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	20 e7       	ldi	r18, 0x70	; 112
    1a40:	31 e0       	ldi	r19, 0x01	; 1
    1a42:	fc 01       	movw	r30, r24
    1a44:	31 83       	std	Z+1, r19	; 0x01
    1a46:	20 83       	st	Z, r18
    1a48:	ce 01       	movw	r24, r28
    1a4a:	8b 5b       	subi	r24, 0xBB	; 187
    1a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4e:	fc 01       	movw	r30, r24
    1a50:	80 81       	ld	r24, Z
    1a52:	91 81       	ldd	r25, Z+1	; 0x01
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <lcd_set_4bit+0x74c>
    1a58:	9e 01       	movw	r18, r28
    1a5a:	2b 5b       	subi	r18, 0xBB	; 187
    1a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5e:	f9 01       	movw	r30, r18
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	80 83       	st	Z, r24
    1a64:	ce 01       	movw	r24, r28
    1a66:	8d 5b       	subi	r24, 0xBD	; 189
    1a68:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6a:	9e 01       	movw	r18, r28
    1a6c:	2d 5b       	subi	r18, 0xBD	; 189
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	f9 01       	movw	r30, r18
    1a72:	20 81       	ld	r18, Z
    1a74:	31 81       	ldd	r19, Z+1	; 0x01
    1a76:	21 50       	subi	r18, 0x01	; 1
    1a78:	31 09       	sbc	r19, r1
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	31 83       	std	Z+1, r19	; 0x01
    1a7e:	20 83       	st	Z, r18
    1a80:	ce 01       	movw	r24, r28
    1a82:	8d 5b       	subi	r24, 0xBD	; 189
    1a84:	9f 4f       	sbci	r25, 0xFF	; 255
    1a86:	fc 01       	movw	r30, r24
    1a88:	80 81       	ld	r24, Z
    1a8a:	91 81       	ldd	r25, Z+1	; 0x01
    1a8c:	89 2b       	or	r24, r25
    1a8e:	a1 f6       	brne	.-88     	; 0x1a38 <lcd_set_4bit+0x730>
    1a90:	2a c0       	rjmp	.+84     	; 0x1ae6 <lcd_set_4bit+0x7de>
    1a92:	8e 01       	movw	r16, r28
    1a94:	0d 5b       	subi	r16, 0xBD	; 189
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	ce 01       	movw	r24, r28
    1a9a:	cf 96       	adiw	r24, 0x3f	; 63
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	93 81       	ldd	r25, Z+3	; 0x03
    1aa6:	30 d7       	rcall	.+3680   	; 0x2908 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	f8 01       	movw	r30, r16
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	80 83       	st	Z, r24
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	89 5b       	subi	r24, 0xB9	; 185
    1ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab8:	9e 01       	movw	r18, r28
    1aba:	2d 5b       	subi	r18, 0xBD	; 189
    1abc:	3f 4f       	sbci	r19, 0xFF	; 255
    1abe:	f9 01       	movw	r30, r18
    1ac0:	20 81       	ld	r18, Z
    1ac2:	31 81       	ldd	r19, Z+1	; 0x01
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	31 83       	std	Z+1, r19	; 0x01
    1ac8:	20 83       	st	Z, r18
    1aca:	ce 01       	movw	r24, r28
    1acc:	89 5b       	subi	r24, 0xB9	; 185
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <lcd_set_4bit+0x7ce>
    1ada:	9e 01       	movw	r18, r28
    1adc:	29 5b       	subi	r18, 0xB9	; 185
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae0:	f9 01       	movw	r30, r18
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
    1ae6:	88 e2       	ldi	r24, 0x28	; 40
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	28 e2       	ldi	r18, 0x28	; 40
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	f9 01       	movw	r30, r18
    1af0:	20 81       	ld	r18, Z
    1af2:	2e 7f       	andi	r18, 0xFE	; 254
    1af4:	fc 01       	movw	r30, r24
    1af6:	20 83       	st	Z, r18
    1af8:	88 e2       	ldi	r24, 0x28	; 40
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	28 e2       	ldi	r18, 0x28	; 40
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	f9 01       	movw	r30, r18
    1b02:	20 81       	ld	r18, Z
    1b04:	2d 7f       	andi	r18, 0xFD	; 253
    1b06:	fc 01       	movw	r30, r24
    1b08:	20 83       	st	Z, r18
    1b0a:	88 e2       	ldi	r24, 0x28	; 40
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	20 e3       	ldi	r18, 0x30	; 48
    1b10:	fc 01       	movw	r30, r24
    1b12:	20 83       	st	Z, r18
    1b14:	88 e2       	ldi	r24, 0x28	; 40
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	28 e2       	ldi	r18, 0x28	; 40
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	f9 01       	movw	r30, r18
    1b1e:	20 81       	ld	r18, Z
    1b20:	24 60       	ori	r18, 0x04	; 4
    1b22:	fc 01       	movw	r30, r24
    1b24:	20 83       	st	Z, r18
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a0 ea       	ldi	r26, 0xA0	; 160
    1b2c:	b0 e4       	ldi	r27, 0x40	; 64
    1b2e:	8d 8b       	std	Y+21, r24	; 0x15
    1b30:	9e 8b       	std	Y+22, r25	; 0x16
    1b32:	af 8b       	std	Y+23, r26	; 0x17
    1b34:	b8 8f       	std	Y+24, r27	; 0x18
    1b36:	26 e6       	ldi	r18, 0x66	; 102
    1b38:	36 e6       	ldi	r19, 0x66	; 102
    1b3a:	46 e6       	ldi	r20, 0x66	; 102
    1b3c:	55 e4       	ldi	r21, 0x45	; 69
    1b3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b40:	7e 89       	ldd	r23, Y+22	; 0x16
    1b42:	8f 89       	ldd	r24, Y+23	; 0x17
    1b44:	98 8d       	ldd	r25, Y+24	; 0x18
    1b46:	c2 d7       	rcall	.+3972   	; 0x2acc <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	8d ab       	std	Y+53, r24	; 0x35
    1b4e:	9e ab       	std	Y+54, r25	; 0x36
    1b50:	af ab       	std	Y+55, r26	; 0x37
    1b52:	b8 af       	std	Y+56, r27	; 0x38
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e8       	ldi	r20, 0x80	; 128
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b60:	8f a9       	ldd	r24, Y+55	; 0x37
    1b62:	98 ad       	ldd	r25, Y+56	; 0x38
    1b64:	65 d6       	rcall	.+3274   	; 0x2830 <__cmpsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <lcd_set_4bit+0x86c>
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9a af       	std	Y+58, r25	; 0x3a
    1b70:	89 af       	std	Y+57, r24	; 0x39
    1b72:	3b c0       	rjmp	.+118    	; 0x1bea <lcd_set_4bit+0x8e2>
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	57 e4       	ldi	r21, 0x47	; 71
    1b7c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b7e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b80:	8f a9       	ldd	r24, Y+55	; 0x37
    1b82:	98 ad       	ldd	r25, Y+56	; 0x38
    1b84:	9f d7       	rcall	.+3902   	; 0x2ac4 <__gesf2>
    1b86:	18 16       	cp	r1, r24
    1b88:	3c f5       	brge	.+78     	; 0x1bd8 <lcd_set_4bit+0x8d0>
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e2       	ldi	r20, 0x20	; 32
    1b90:	51 e4       	ldi	r21, 0x41	; 65
    1b92:	6d 89       	ldd	r22, Y+21	; 0x15
    1b94:	7e 89       	ldd	r23, Y+22	; 0x16
    1b96:	8f 89       	ldd	r24, Y+23	; 0x17
    1b98:	98 8d       	ldd	r25, Y+24	; 0x18
    1b9a:	98 d7       	rcall	.+3888   	; 0x2acc <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	b1 d6       	rcall	.+3426   	; 0x2908 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9a af       	std	Y+58, r25	; 0x3a
    1bac:	89 af       	std	Y+57, r24	; 0x39
    1bae:	0f c0       	rjmp	.+30     	; 0x1bce <lcd_set_4bit+0x8c6>
    1bb0:	80 e7       	ldi	r24, 0x70	; 112
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	9c af       	std	Y+60, r25	; 0x3c
    1bb6:	8b af       	std	Y+59, r24	; 0x3b
    1bb8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bba:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <lcd_set_4bit+0x8b4>
    1bc0:	9c af       	std	Y+60, r25	; 0x3c
    1bc2:	8b af       	std	Y+59, r24	; 0x3b
    1bc4:	89 ad       	ldd	r24, Y+57	; 0x39
    1bc6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	9a af       	std	Y+58, r25	; 0x3a
    1bcc:	89 af       	std	Y+57, r24	; 0x39
    1bce:	89 ad       	ldd	r24, Y+57	; 0x39
    1bd0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bd2:	89 2b       	or	r24, r25
    1bd4:	69 f7       	brne	.-38     	; 0x1bb0 <lcd_set_4bit+0x8a8>
    1bd6:	13 c0       	rjmp	.+38     	; 0x1bfe <lcd_set_4bit+0x8f6>
    1bd8:	6d a9       	ldd	r22, Y+53	; 0x35
    1bda:	7e a9       	ldd	r23, Y+54	; 0x36
    1bdc:	8f a9       	ldd	r24, Y+55	; 0x37
    1bde:	98 ad       	ldd	r25, Y+56	; 0x38
    1be0:	93 d6       	rcall	.+3366   	; 0x2908 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9a af       	std	Y+58, r25	; 0x3a
    1be8:	89 af       	std	Y+57, r24	; 0x39
    1bea:	89 ad       	ldd	r24, Y+57	; 0x39
    1bec:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bee:	9e af       	std	Y+62, r25	; 0x3e
    1bf0:	8d af       	std	Y+61, r24	; 0x3d
    1bf2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bf4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <lcd_set_4bit+0x8ee>
    1bfa:	9e af       	std	Y+62, r25	; 0x3e
    1bfc:	8d af       	std	Y+61, r24	; 0x3d
    1bfe:	88 e2       	ldi	r24, 0x28	; 40
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	28 e2       	ldi	r18, 0x28	; 40
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	f9 01       	movw	r30, r18
    1c08:	20 81       	ld	r18, Z
    1c0a:	2b 7f       	andi	r18, 0xFB	; 251
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	20 83       	st	Z, r18
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e8       	ldi	r26, 0x80	; 128
    1c16:	bf e3       	ldi	r27, 0x3F	; 63
    1c18:	89 8f       	std	Y+25, r24	; 0x19
    1c1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c1c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c1e:	bc 8f       	std	Y+28, r27	; 0x1c
    1c20:	26 e6       	ldi	r18, 0x66	; 102
    1c22:	36 e6       	ldi	r19, 0x66	; 102
    1c24:	46 e6       	ldi	r20, 0x66	; 102
    1c26:	55 e4       	ldi	r21, 0x45	; 69
    1c28:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c30:	4d d7       	rcall	.+3738   	; 0x2acc <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	8b a7       	std	Y+43, r24	; 0x2b
    1c38:	9c a7       	std	Y+44, r25	; 0x2c
    1c3a:	ad a7       	std	Y+45, r26	; 0x2d
    1c3c:	be a7       	std	Y+46, r27	; 0x2e
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e8       	ldi	r20, 0x80	; 128
    1c44:	5f e3       	ldi	r21, 0x3F	; 63
    1c46:	6b a5       	ldd	r22, Y+43	; 0x2b
    1c48:	7c a5       	ldd	r23, Y+44	; 0x2c
    1c4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c4e:	f0 d5       	rcall	.+3040   	; 0x2830 <__cmpsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <lcd_set_4bit+0x956>
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	98 ab       	std	Y+48, r25	; 0x30
    1c5a:	8f a7       	std	Y+47, r24	; 0x2f
    1c5c:	3b c0       	rjmp	.+118    	; 0x1cd4 <lcd_set_4bit+0x9cc>
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	3f ef       	ldi	r19, 0xFF	; 255
    1c62:	4f e7       	ldi	r20, 0x7F	; 127
    1c64:	57 e4       	ldi	r21, 0x47	; 71
    1c66:	6b a5       	ldd	r22, Y+43	; 0x2b
    1c68:	7c a5       	ldd	r23, Y+44	; 0x2c
    1c6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c6e:	2a d7       	rcall	.+3668   	; 0x2ac4 <__gesf2>
    1c70:	18 16       	cp	r1, r24
    1c72:	3c f5       	brge	.+78     	; 0x1cc2 <lcd_set_4bit+0x9ba>
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e2       	ldi	r20, 0x20	; 32
    1c7a:	51 e4       	ldi	r21, 0x41	; 65
    1c7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c84:	23 d7       	rcall	.+3654   	; 0x2acc <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	3c d6       	rcall	.+3192   	; 0x2908 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	98 ab       	std	Y+48, r25	; 0x30
    1c96:	8f a7       	std	Y+47, r24	; 0x2f
    1c98:	0f c0       	rjmp	.+30     	; 0x1cb8 <lcd_set_4bit+0x9b0>
    1c9a:	80 e7       	ldi	r24, 0x70	; 112
    1c9c:	91 e0       	ldi	r25, 0x01	; 1
    1c9e:	9a ab       	std	Y+50, r25	; 0x32
    1ca0:	89 ab       	std	Y+49, r24	; 0x31
    1ca2:	89 a9       	ldd	r24, Y+49	; 0x31
    1ca4:	9a a9       	ldd	r25, Y+50	; 0x32
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <lcd_set_4bit+0x99e>
    1caa:	9a ab       	std	Y+50, r25	; 0x32
    1cac:	89 ab       	std	Y+49, r24	; 0x31
    1cae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	98 ab       	std	Y+48, r25	; 0x30
    1cb6:	8f a7       	std	Y+47, r24	; 0x2f
    1cb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cba:	98 a9       	ldd	r25, Y+48	; 0x30
    1cbc:	89 2b       	or	r24, r25
    1cbe:	69 f7       	brne	.-38     	; 0x1c9a <lcd_set_4bit+0x992>
    1cc0:	13 c0       	rjmp	.+38     	; 0x1ce8 <lcd_set_4bit+0x9e0>
    1cc2:	6b a5       	ldd	r22, Y+43	; 0x2b
    1cc4:	7c a5       	ldd	r23, Y+44	; 0x2c
    1cc6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cc8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cca:	1e d6       	rcall	.+3132   	; 0x2908 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	98 ab       	std	Y+48, r25	; 0x30
    1cd2:	8f a7       	std	Y+47, r24	; 0x2f
    1cd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd8:	9c ab       	std	Y+52, r25	; 0x34
    1cda:	8b ab       	std	Y+51, r24	; 0x33
    1cdc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cde:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <lcd_set_4bit+0x9d8>
    1ce4:	9c ab       	std	Y+52, r25	; 0x34
    1ce6:	8b ab       	std	Y+51, r24	; 0x33
    1ce8:	88 e2       	ldi	r24, 0x28	; 40
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	28 e2       	ldi	r18, 0x28	; 40
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	f9 01       	movw	r30, r18
    1cf2:	20 81       	ld	r18, Z
    1cf4:	2e 7f       	andi	r18, 0xFE	; 254
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	20 83       	st	Z, r18
    1cfa:	88 e2       	ldi	r24, 0x28	; 40
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	28 e2       	ldi	r18, 0x28	; 40
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	f9 01       	movw	r30, r18
    1d04:	20 81       	ld	r18, Z
    1d06:	2d 7f       	andi	r18, 0xFD	; 253
    1d08:	fc 01       	movw	r30, r24
    1d0a:	20 83       	st	Z, r18
    1d0c:	88 e2       	ldi	r24, 0x28	; 40
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	20 e2       	ldi	r18, 0x20	; 32
    1d12:	fc 01       	movw	r30, r24
    1d14:	20 83       	st	Z, r18
    1d16:	88 e2       	ldi	r24, 0x28	; 40
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	28 e2       	ldi	r18, 0x28	; 40
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	f9 01       	movw	r30, r18
    1d20:	20 81       	ld	r18, Z
    1d22:	24 60       	ori	r18, 0x04	; 4
    1d24:	fc 01       	movw	r30, r24
    1d26:	20 83       	st	Z, r18
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 ea       	ldi	r26, 0xA0	; 160
    1d2e:	b0 e4       	ldi	r27, 0x40	; 64
    1d30:	8d 8f       	std	Y+29, r24	; 0x1d
    1d32:	9e 8f       	std	Y+30, r25	; 0x1e
    1d34:	af 8f       	std	Y+31, r26	; 0x1f
    1d36:	b8 a3       	std	Y+32, r27	; 0x20
    1d38:	26 e6       	ldi	r18, 0x66	; 102
    1d3a:	36 e6       	ldi	r19, 0x66	; 102
    1d3c:	46 e6       	ldi	r20, 0x66	; 102
    1d3e:	55 e4       	ldi	r21, 0x45	; 69
    1d40:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d42:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1d44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d46:	98 a1       	ldd	r25, Y+32	; 0x20
    1d48:	c1 d6       	rcall	.+3458   	; 0x2acc <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	89 a3       	std	Y+33, r24	; 0x21
    1d50:	9a a3       	std	Y+34, r25	; 0x22
    1d52:	ab a3       	std	Y+35, r26	; 0x23
    1d54:	bc a3       	std	Y+36, r27	; 0x24
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e8       	ldi	r20, 0x80	; 128
    1d5c:	5f e3       	ldi	r21, 0x3F	; 63
    1d5e:	69 a1       	ldd	r22, Y+33	; 0x21
    1d60:	7a a1       	ldd	r23, Y+34	; 0x22
    1d62:	8b a1       	ldd	r24, Y+35	; 0x23
    1d64:	9c a1       	ldd	r25, Y+36	; 0x24
    1d66:	64 d5       	rcall	.+2760   	; 0x2830 <__cmpsf2>
    1d68:	88 23       	and	r24, r24
    1d6a:	2c f4       	brge	.+10     	; 0x1d76 <lcd_set_4bit+0xa6e>
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9e a3       	std	Y+38, r25	; 0x26
    1d72:	8d a3       	std	Y+37, r24	; 0x25
    1d74:	3b c0       	rjmp	.+118    	; 0x1dec <lcd_set_4bit+0xae4>
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	3f ef       	ldi	r19, 0xFF	; 255
    1d7a:	4f e7       	ldi	r20, 0x7F	; 127
    1d7c:	57 e4       	ldi	r21, 0x47	; 71
    1d7e:	69 a1       	ldd	r22, Y+33	; 0x21
    1d80:	7a a1       	ldd	r23, Y+34	; 0x22
    1d82:	8b a1       	ldd	r24, Y+35	; 0x23
    1d84:	9c a1       	ldd	r25, Y+36	; 0x24
    1d86:	9e d6       	rcall	.+3388   	; 0x2ac4 <__gesf2>
    1d88:	18 16       	cp	r1, r24
    1d8a:	3c f5       	brge	.+78     	; 0x1dda <lcd_set_4bit+0xad2>
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e2       	ldi	r20, 0x20	; 32
    1d92:	51 e4       	ldi	r21, 0x41	; 65
    1d94:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d96:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1d98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d9a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d9c:	97 d6       	rcall	.+3374   	; 0x2acc <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	b0 d5       	rcall	.+2912   	; 0x2908 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	9e a3       	std	Y+38, r25	; 0x26
    1dae:	8d a3       	std	Y+37, r24	; 0x25
    1db0:	0f c0       	rjmp	.+30     	; 0x1dd0 <lcd_set_4bit+0xac8>
    1db2:	80 e7       	ldi	r24, 0x70	; 112
    1db4:	91 e0       	ldi	r25, 0x01	; 1
    1db6:	98 a7       	std	Y+40, r25	; 0x28
    1db8:	8f a3       	std	Y+39, r24	; 0x27
    1dba:	8f a1       	ldd	r24, Y+39	; 0x27
    1dbc:	98 a5       	ldd	r25, Y+40	; 0x28
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <lcd_set_4bit+0xab6>
    1dc2:	98 a7       	std	Y+40, r25	; 0x28
    1dc4:	8f a3       	std	Y+39, r24	; 0x27
    1dc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	9e a3       	std	Y+38, r25	; 0x26
    1dce:	8d a3       	std	Y+37, r24	; 0x25
    1dd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd4:	89 2b       	or	r24, r25
    1dd6:	69 f7       	brne	.-38     	; 0x1db2 <lcd_set_4bit+0xaaa>
    1dd8:	13 c0       	rjmp	.+38     	; 0x1e00 <lcd_set_4bit+0xaf8>
    1dda:	69 a1       	ldd	r22, Y+33	; 0x21
    1ddc:	7a a1       	ldd	r23, Y+34	; 0x22
    1dde:	8b a1       	ldd	r24, Y+35	; 0x23
    1de0:	9c a1       	ldd	r25, Y+36	; 0x24
    1de2:	92 d5       	rcall	.+2852   	; 0x2908 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	9e a3       	std	Y+38, r25	; 0x26
    1dea:	8d a3       	std	Y+37, r24	; 0x25
    1dec:	8d a1       	ldd	r24, Y+37	; 0x25
    1dee:	9e a1       	ldd	r25, Y+38	; 0x26
    1df0:	9a a7       	std	Y+42, r25	; 0x2a
    1df2:	89 a7       	std	Y+41, r24	; 0x29
    1df4:	89 a5       	ldd	r24, Y+41	; 0x29
    1df6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <lcd_set_4bit+0xaf0>
    1dfc:	9a a7       	std	Y+42, r25	; 0x2a
    1dfe:	89 a7       	std	Y+41, r24	; 0x29
    1e00:	88 e2       	ldi	r24, 0x28	; 40
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	28 e2       	ldi	r18, 0x28	; 40
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	f9 01       	movw	r30, r18
    1e0a:	20 81       	ld	r18, Z
    1e0c:	2b 7f       	andi	r18, 0xFB	; 251
    1e0e:	fc 01       	movw	r30, r24
    1e10:	20 83       	st	Z, r18
    1e12:	00 00       	nop
    1e14:	c0 59       	subi	r28, 0x90	; 144
    1e16:	df 4f       	sbci	r29, 0xFF	; 255
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	1f 91       	pop	r17
    1e28:	0f 91       	pop	r16
    1e2a:	08 95       	ret

00001e2c <lcd_wr_command>:
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	6e 97       	sbiw	r28, 0x1e	; 30
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	8e 8f       	std	Y+30, r24	; 0x1e
    1e42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	80 7f       	andi	r24, 0xF0	; 240
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	88 e2       	ldi	r24, 0x28	; 40
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	28 e2       	ldi	r18, 0x28	; 40
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	f9 01       	movw	r30, r18
    1e56:	20 81       	ld	r18, Z
    1e58:	2f 70       	andi	r18, 0x0F	; 15
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	20 83       	st	Z, r18
    1e5e:	88 e2       	ldi	r24, 0x28	; 40
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	28 e2       	ldi	r18, 0x28	; 40
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	f9 01       	movw	r30, r18
    1e68:	30 81       	ld	r19, Z
    1e6a:	29 81       	ldd	r18, Y+1	; 0x01
    1e6c:	23 2b       	or	r18, r19
    1e6e:	fc 01       	movw	r30, r24
    1e70:	20 83       	st	Z, r18
    1e72:	88 e2       	ldi	r24, 0x28	; 40
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	28 e2       	ldi	r18, 0x28	; 40
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	f9 01       	movw	r30, r18
    1e7c:	20 81       	ld	r18, Z
    1e7e:	2e 7f       	andi	r18, 0xFE	; 254
    1e80:	fc 01       	movw	r30, r24
    1e82:	20 83       	st	Z, r18
    1e84:	88 e2       	ldi	r24, 0x28	; 40
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	28 e2       	ldi	r18, 0x28	; 40
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	f9 01       	movw	r30, r18
    1e8e:	20 81       	ld	r18, Z
    1e90:	2d 7f       	andi	r18, 0xFD	; 253
    1e92:	fc 01       	movw	r30, r24
    1e94:	20 83       	st	Z, r18
    1e96:	88 e2       	ldi	r24, 0x28	; 40
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	28 e2       	ldi	r18, 0x28	; 40
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	f9 01       	movw	r30, r18
    1ea0:	20 81       	ld	r18, Z
    1ea2:	24 60       	ori	r18, 0x04	; 4
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	20 83       	st	Z, r18
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a0 ea       	ldi	r26, 0xA0	; 160
    1eae:	b0 e4       	ldi	r27, 0x40	; 64
    1eb0:	8a 83       	std	Y+2, r24	; 0x02
    1eb2:	9b 83       	std	Y+3, r25	; 0x03
    1eb4:	ac 83       	std	Y+4, r26	; 0x04
    1eb6:	bd 83       	std	Y+5, r27	; 0x05
    1eb8:	26 e6       	ldi	r18, 0x66	; 102
    1eba:	36 e6       	ldi	r19, 0x66	; 102
    1ebc:	46 e6       	ldi	r20, 0x66	; 102
    1ebe:	55 e4       	ldi	r21, 0x45	; 69
    1ec0:	6a 81       	ldd	r22, Y+2	; 0x02
    1ec2:	7b 81       	ldd	r23, Y+3	; 0x03
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec8:	01 d6       	rcall	.+3074   	; 0x2acc <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	8c 8b       	std	Y+20, r24	; 0x14
    1ed0:	9d 8b       	std	Y+21, r25	; 0x15
    1ed2:	ae 8b       	std	Y+22, r26	; 0x16
    1ed4:	bf 8b       	std	Y+23, r27	; 0x17
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e8       	ldi	r20, 0x80	; 128
    1edc:	5f e3       	ldi	r21, 0x3F	; 63
    1ede:	6c 89       	ldd	r22, Y+20	; 0x14
    1ee0:	7d 89       	ldd	r23, Y+21	; 0x15
    1ee2:	8e 89       	ldd	r24, Y+22	; 0x16
    1ee4:	9f 89       	ldd	r25, Y+23	; 0x17
    1ee6:	a4 d4       	rcall	.+2376   	; 0x2830 <__cmpsf2>
    1ee8:	88 23       	and	r24, r24
    1eea:	2c f4       	brge	.+10     	; 0x1ef6 <lcd_wr_command+0xca>
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	99 8f       	std	Y+25, r25	; 0x19
    1ef2:	88 8f       	std	Y+24, r24	; 0x18
    1ef4:	3b c0       	rjmp	.+118    	; 0x1f6c <lcd_wr_command+0x140>
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	3f ef       	ldi	r19, 0xFF	; 255
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	57 e4       	ldi	r21, 0x47	; 71
    1efe:	6c 89       	ldd	r22, Y+20	; 0x14
    1f00:	7d 89       	ldd	r23, Y+21	; 0x15
    1f02:	8e 89       	ldd	r24, Y+22	; 0x16
    1f04:	9f 89       	ldd	r25, Y+23	; 0x17
    1f06:	de d5       	rcall	.+3004   	; 0x2ac4 <__gesf2>
    1f08:	18 16       	cp	r1, r24
    1f0a:	3c f5       	brge	.+78     	; 0x1f5a <lcd_wr_command+0x12e>
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e2       	ldi	r20, 0x20	; 32
    1f12:	51 e4       	ldi	r21, 0x41	; 65
    1f14:	6a 81       	ldd	r22, Y+2	; 0x02
    1f16:	7b 81       	ldd	r23, Y+3	; 0x03
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	d7 d5       	rcall	.+2990   	; 0x2acc <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	f0 d4       	rcall	.+2528   	; 0x2908 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	99 8f       	std	Y+25, r25	; 0x19
    1f2e:	88 8f       	std	Y+24, r24	; 0x18
    1f30:	0f c0       	rjmp	.+30     	; 0x1f50 <lcd_wr_command+0x124>
    1f32:	80 e7       	ldi	r24, 0x70	; 112
    1f34:	91 e0       	ldi	r25, 0x01	; 1
    1f36:	9b 8f       	std	Y+27, r25	; 0x1b
    1f38:	8a 8f       	std	Y+26, r24	; 0x1a
    1f3a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f3c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <lcd_wr_command+0x112>
    1f42:	9b 8f       	std	Y+27, r25	; 0x1b
    1f44:	8a 8f       	std	Y+26, r24	; 0x1a
    1f46:	88 8d       	ldd	r24, Y+24	; 0x18
    1f48:	99 8d       	ldd	r25, Y+25	; 0x19
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	99 8f       	std	Y+25, r25	; 0x19
    1f4e:	88 8f       	std	Y+24, r24	; 0x18
    1f50:	88 8d       	ldd	r24, Y+24	; 0x18
    1f52:	99 8d       	ldd	r25, Y+25	; 0x19
    1f54:	89 2b       	or	r24, r25
    1f56:	69 f7       	brne	.-38     	; 0x1f32 <lcd_wr_command+0x106>
    1f58:	13 c0       	rjmp	.+38     	; 0x1f80 <lcd_wr_command+0x154>
    1f5a:	6c 89       	ldd	r22, Y+20	; 0x14
    1f5c:	7d 89       	ldd	r23, Y+21	; 0x15
    1f5e:	8e 89       	ldd	r24, Y+22	; 0x16
    1f60:	9f 89       	ldd	r25, Y+23	; 0x17
    1f62:	d2 d4       	rcall	.+2468   	; 0x2908 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	99 8f       	std	Y+25, r25	; 0x19
    1f6a:	88 8f       	std	Y+24, r24	; 0x18
    1f6c:	88 8d       	ldd	r24, Y+24	; 0x18
    1f6e:	99 8d       	ldd	r25, Y+25	; 0x19
    1f70:	9d 8f       	std	Y+29, r25	; 0x1d
    1f72:	8c 8f       	std	Y+28, r24	; 0x1c
    1f74:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f76:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <lcd_wr_command+0x14c>
    1f7c:	9d 8f       	std	Y+29, r25	; 0x1d
    1f7e:	8c 8f       	std	Y+28, r24	; 0x1c
    1f80:	88 e2       	ldi	r24, 0x28	; 40
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	28 e2       	ldi	r18, 0x28	; 40
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	f9 01       	movw	r30, r18
    1f8a:	20 81       	ld	r18, Z
    1f8c:	2b 7f       	andi	r18, 0xFB	; 251
    1f8e:	fc 01       	movw	r30, r24
    1f90:	20 83       	st	Z, r18
    1f92:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f94:	8f 70       	andi	r24, 0x0F	; 15
    1f96:	8e 8f       	std	Y+30, r24	; 0x1e
    1f98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f9a:	82 95       	swap	r24
    1f9c:	80 7f       	andi	r24, 0xF0	; 240
    1f9e:	8e 8f       	std	Y+30, r24	; 0x1e
    1fa0:	88 e2       	ldi	r24, 0x28	; 40
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	28 e2       	ldi	r18, 0x28	; 40
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	f9 01       	movw	r30, r18
    1faa:	20 81       	ld	r18, Z
    1fac:	2f 70       	andi	r18, 0x0F	; 15
    1fae:	fc 01       	movw	r30, r24
    1fb0:	20 83       	st	Z, r18
    1fb2:	88 e2       	ldi	r24, 0x28	; 40
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	28 e2       	ldi	r18, 0x28	; 40
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	f9 01       	movw	r30, r18
    1fbc:	30 81       	ld	r19, Z
    1fbe:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1fc0:	23 2b       	or	r18, r19
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	20 83       	st	Z, r18
    1fc6:	88 e2       	ldi	r24, 0x28	; 40
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	28 e2       	ldi	r18, 0x28	; 40
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	f9 01       	movw	r30, r18
    1fd0:	20 81       	ld	r18, Z
    1fd2:	2e 7f       	andi	r18, 0xFE	; 254
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	20 83       	st	Z, r18
    1fd8:	88 e2       	ldi	r24, 0x28	; 40
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	28 e2       	ldi	r18, 0x28	; 40
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	f9 01       	movw	r30, r18
    1fe2:	20 81       	ld	r18, Z
    1fe4:	2d 7f       	andi	r18, 0xFD	; 253
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	20 83       	st	Z, r18
    1fea:	88 e2       	ldi	r24, 0x28	; 40
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	28 e2       	ldi	r18, 0x28	; 40
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	f9 01       	movw	r30, r18
    1ff4:	20 81       	ld	r18, Z
    1ff6:	24 60       	ori	r18, 0x04	; 4
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	20 83       	st	Z, r18
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a0 ea       	ldi	r26, 0xA0	; 160
    2002:	b0 e4       	ldi	r27, 0x40	; 64
    2004:	8e 83       	std	Y+6, r24	; 0x06
    2006:	9f 83       	std	Y+7, r25	; 0x07
    2008:	a8 87       	std	Y+8, r26	; 0x08
    200a:	b9 87       	std	Y+9, r27	; 0x09
    200c:	26 e6       	ldi	r18, 0x66	; 102
    200e:	36 e6       	ldi	r19, 0x66	; 102
    2010:	46 e6       	ldi	r20, 0x66	; 102
    2012:	55 e4       	ldi	r21, 0x45	; 69
    2014:	6e 81       	ldd	r22, Y+6	; 0x06
    2016:	7f 81       	ldd	r23, Y+7	; 0x07
    2018:	88 85       	ldd	r24, Y+8	; 0x08
    201a:	99 85       	ldd	r25, Y+9	; 0x09
    201c:	57 d5       	rcall	.+2734   	; 0x2acc <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	8a 87       	std	Y+10, r24	; 0x0a
    2024:	9b 87       	std	Y+11, r25	; 0x0b
    2026:	ac 87       	std	Y+12, r26	; 0x0c
    2028:	bd 87       	std	Y+13, r27	; 0x0d
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e8       	ldi	r20, 0x80	; 128
    2030:	5f e3       	ldi	r21, 0x3F	; 63
    2032:	6a 85       	ldd	r22, Y+10	; 0x0a
    2034:	7b 85       	ldd	r23, Y+11	; 0x0b
    2036:	8c 85       	ldd	r24, Y+12	; 0x0c
    2038:	9d 85       	ldd	r25, Y+13	; 0x0d
    203a:	fa d3       	rcall	.+2036   	; 0x2830 <__cmpsf2>
    203c:	88 23       	and	r24, r24
    203e:	2c f4       	brge	.+10     	; 0x204a <lcd_wr_command+0x21e>
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9f 87       	std	Y+15, r25	; 0x0f
    2046:	8e 87       	std	Y+14, r24	; 0x0e
    2048:	3b c0       	rjmp	.+118    	; 0x20c0 <lcd_wr_command+0x294>
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	3f ef       	ldi	r19, 0xFF	; 255
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	57 e4       	ldi	r21, 0x47	; 71
    2052:	6a 85       	ldd	r22, Y+10	; 0x0a
    2054:	7b 85       	ldd	r23, Y+11	; 0x0b
    2056:	8c 85       	ldd	r24, Y+12	; 0x0c
    2058:	9d 85       	ldd	r25, Y+13	; 0x0d
    205a:	34 d5       	rcall	.+2664   	; 0x2ac4 <__gesf2>
    205c:	18 16       	cp	r1, r24
    205e:	3c f5       	brge	.+78     	; 0x20ae <lcd_wr_command+0x282>
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	6e 81       	ldd	r22, Y+6	; 0x06
    206a:	7f 81       	ldd	r23, Y+7	; 0x07
    206c:	88 85       	ldd	r24, Y+8	; 0x08
    206e:	99 85       	ldd	r25, Y+9	; 0x09
    2070:	2d d5       	rcall	.+2650   	; 0x2acc <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	bc 01       	movw	r22, r24
    2078:	cd 01       	movw	r24, r26
    207a:	46 d4       	rcall	.+2188   	; 0x2908 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	9f 87       	std	Y+15, r25	; 0x0f
    2082:	8e 87       	std	Y+14, r24	; 0x0e
    2084:	0f c0       	rjmp	.+30     	; 0x20a4 <lcd_wr_command+0x278>
    2086:	80 e7       	ldi	r24, 0x70	; 112
    2088:	91 e0       	ldi	r25, 0x01	; 1
    208a:	99 8b       	std	Y+17, r25	; 0x11
    208c:	88 8b       	std	Y+16, r24	; 0x10
    208e:	88 89       	ldd	r24, Y+16	; 0x10
    2090:	99 89       	ldd	r25, Y+17	; 0x11
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <lcd_wr_command+0x266>
    2096:	99 8b       	std	Y+17, r25	; 0x11
    2098:	88 8b       	std	Y+16, r24	; 0x10
    209a:	8e 85       	ldd	r24, Y+14	; 0x0e
    209c:	9f 85       	ldd	r25, Y+15	; 0x0f
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	9f 87       	std	Y+15, r25	; 0x0f
    20a2:	8e 87       	std	Y+14, r24	; 0x0e
    20a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    20a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    20a8:	89 2b       	or	r24, r25
    20aa:	69 f7       	brne	.-38     	; 0x2086 <lcd_wr_command+0x25a>
    20ac:	13 c0       	rjmp	.+38     	; 0x20d4 <lcd_wr_command+0x2a8>
    20ae:	6a 85       	ldd	r22, Y+10	; 0x0a
    20b0:	7b 85       	ldd	r23, Y+11	; 0x0b
    20b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    20b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    20b6:	28 d4       	rcall	.+2128   	; 0x2908 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9f 87       	std	Y+15, r25	; 0x0f
    20be:	8e 87       	std	Y+14, r24	; 0x0e
    20c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    20c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    20c4:	9b 8b       	std	Y+19, r25	; 0x13
    20c6:	8a 8b       	std	Y+18, r24	; 0x12
    20c8:	8a 89       	ldd	r24, Y+18	; 0x12
    20ca:	9b 89       	ldd	r25, Y+19	; 0x13
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <lcd_wr_command+0x2a0>
    20d0:	9b 8b       	std	Y+19, r25	; 0x13
    20d2:	8a 8b       	std	Y+18, r24	; 0x12
    20d4:	88 e2       	ldi	r24, 0x28	; 40
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	28 e2       	ldi	r18, 0x28	; 40
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	f9 01       	movw	r30, r18
    20de:	20 81       	ld	r18, Z
    20e0:	2b 7f       	andi	r18, 0xFB	; 251
    20e2:	fc 01       	movw	r30, r24
    20e4:	20 83       	st	Z, r18
    20e6:	00 00       	nop
    20e8:	6e 96       	adiw	r28, 0x1e	; 30
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	08 95       	ret

000020fa <lcd_init>:
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	2e 97       	sbiw	r28, 0x0e	; 14
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	fc d8       	rcall	.-3592   	; 0x1308 <lcd_set_4bit>
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	a0 e8       	ldi	r26, 0x80	; 128
    2116:	bf e3       	ldi	r27, 0x3F	; 63
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	9a 83       	std	Y+2, r25	; 0x02
    211c:	ab 83       	std	Y+3, r26	; 0x03
    211e:	bc 83       	std	Y+4, r27	; 0x04
    2120:	26 e6       	ldi	r18, 0x66	; 102
    2122:	36 e6       	ldi	r19, 0x66	; 102
    2124:	46 e6       	ldi	r20, 0x66	; 102
    2126:	55 e4       	ldi	r21, 0x45	; 69
    2128:	69 81       	ldd	r22, Y+1	; 0x01
    212a:	7a 81       	ldd	r23, Y+2	; 0x02
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	9c 81       	ldd	r25, Y+4	; 0x04
    2130:	cd d4       	rcall	.+2458   	; 0x2acc <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	8d 83       	std	Y+5, r24	; 0x05
    2138:	9e 83       	std	Y+6, r25	; 0x06
    213a:	af 83       	std	Y+7, r26	; 0x07
    213c:	b8 87       	std	Y+8, r27	; 0x08
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e8       	ldi	r20, 0x80	; 128
    2144:	5f e3       	ldi	r21, 0x3F	; 63
    2146:	6d 81       	ldd	r22, Y+5	; 0x05
    2148:	7e 81       	ldd	r23, Y+6	; 0x06
    214a:	8f 81       	ldd	r24, Y+7	; 0x07
    214c:	98 85       	ldd	r25, Y+8	; 0x08
    214e:	70 d3       	rcall	.+1760   	; 0x2830 <__cmpsf2>
    2150:	88 23       	and	r24, r24
    2152:	2c f4       	brge	.+10     	; 0x215e <lcd_init+0x64>
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	9a 87       	std	Y+10, r25	; 0x0a
    215a:	89 87       	std	Y+9, r24	; 0x09
    215c:	3b c0       	rjmp	.+118    	; 0x21d4 <lcd_init+0xda>
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	3f ef       	ldi	r19, 0xFF	; 255
    2162:	4f e7       	ldi	r20, 0x7F	; 127
    2164:	57 e4       	ldi	r21, 0x47	; 71
    2166:	6d 81       	ldd	r22, Y+5	; 0x05
    2168:	7e 81       	ldd	r23, Y+6	; 0x06
    216a:	8f 81       	ldd	r24, Y+7	; 0x07
    216c:	98 85       	ldd	r25, Y+8	; 0x08
    216e:	aa d4       	rcall	.+2388   	; 0x2ac4 <__gesf2>
    2170:	18 16       	cp	r1, r24
    2172:	3c f5       	brge	.+78     	; 0x21c2 <lcd_init+0xc8>
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	69 81       	ldd	r22, Y+1	; 0x01
    217e:	7a 81       	ldd	r23, Y+2	; 0x02
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	9c 81       	ldd	r25, Y+4	; 0x04
    2184:	a3 d4       	rcall	.+2374   	; 0x2acc <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	bc d3       	rcall	.+1912   	; 0x2908 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9a 87       	std	Y+10, r25	; 0x0a
    2196:	89 87       	std	Y+9, r24	; 0x09
    2198:	0f c0       	rjmp	.+30     	; 0x21b8 <lcd_init+0xbe>
    219a:	80 e7       	ldi	r24, 0x70	; 112
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	9c 87       	std	Y+12, r25	; 0x0c
    21a0:	8b 87       	std	Y+11, r24	; 0x0b
    21a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    21a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <lcd_init+0xac>
    21aa:	9c 87       	std	Y+12, r25	; 0x0c
    21ac:	8b 87       	std	Y+11, r24	; 0x0b
    21ae:	89 85       	ldd	r24, Y+9	; 0x09
    21b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	9a 87       	std	Y+10, r25	; 0x0a
    21b6:	89 87       	std	Y+9, r24	; 0x09
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	89 2b       	or	r24, r25
    21be:	69 f7       	brne	.-38     	; 0x219a <lcd_init+0xa0>
    21c0:	13 c0       	rjmp	.+38     	; 0x21e8 <lcd_init+0xee>
    21c2:	6d 81       	ldd	r22, Y+5	; 0x05
    21c4:	7e 81       	ldd	r23, Y+6	; 0x06
    21c6:	8f 81       	ldd	r24, Y+7	; 0x07
    21c8:	98 85       	ldd	r25, Y+8	; 0x08
    21ca:	9e d3       	rcall	.+1852   	; 0x2908 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	9a 87       	std	Y+10, r25	; 0x0a
    21d2:	89 87       	std	Y+9, r24	; 0x09
    21d4:	89 85       	ldd	r24, Y+9	; 0x09
    21d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d8:	9e 87       	std	Y+14, r25	; 0x0e
    21da:	8d 87       	std	Y+13, r24	; 0x0d
    21dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21de:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <lcd_init+0xe6>
    21e4:	9e 87       	std	Y+14, r25	; 0x0e
    21e6:	8d 87       	std	Y+13, r24	; 0x0d
    21e8:	88 e2       	ldi	r24, 0x28	; 40
    21ea:	20 de       	rcall	.-960    	; 0x1e2c <lcd_wr_command>
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	1e de       	rcall	.-964    	; 0x1e2c <lcd_wr_command>
    21f0:	86 e0       	ldi	r24, 0x06	; 6
    21f2:	1c de       	rcall	.-968    	; 0x1e2c <lcd_wr_command>
    21f4:	8e e0       	ldi	r24, 0x0E	; 14
    21f6:	1a de       	rcall	.-972    	; 0x1e2c <lcd_wr_command>
    21f8:	80 e8       	ldi	r24, 0x80	; 128
    21fa:	18 de       	rcall	.-976    	; 0x1e2c <lcd_wr_command>
    21fc:	00 00       	nop
    21fe:	2e 96       	adiw	r28, 0x0e	; 14
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	08 95       	ret

00002210 <lcd_home>:
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	80 e8       	ldi	r24, 0x80	; 128
    221a:	08 de       	rcall	.-1008   	; 0x1e2c <lcd_wr_command>
    221c:	00 00       	nop
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	08 95       	ret

00002224 <lcd_cursor>:
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	1f 92       	push	r1
    222a:	1f 92       	push	r1
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	6a 83       	std	Y+2, r22	; 0x02
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	88 2f       	mov	r24, r24
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	82 30       	cpi	r24, 0x02	; 2
    223c:	91 05       	cpc	r25, r1
    223e:	81 f0       	breq	.+32     	; 0x2260 <lcd_cursor+0x3c>
    2240:	83 30       	cpi	r24, 0x03	; 3
    2242:	91 05       	cpc	r25, r1
    2244:	1c f4       	brge	.+6      	; 0x224c <lcd_cursor+0x28>
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	39 f0       	breq	.+14     	; 0x2258 <lcd_cursor+0x34>
    224a:	16 c0       	rjmp	.+44     	; 0x2278 <lcd_cursor+0x54>
    224c:	83 30       	cpi	r24, 0x03	; 3
    224e:	91 05       	cpc	r25, r1
    2250:	59 f0       	breq	.+22     	; 0x2268 <lcd_cursor+0x44>
    2252:	04 97       	sbiw	r24, 0x04	; 4
    2254:	69 f0       	breq	.+26     	; 0x2270 <lcd_cursor+0x4c>
    2256:	10 c0       	rjmp	.+32     	; 0x2278 <lcd_cursor+0x54>
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	81 58       	subi	r24, 0x81	; 129
    225c:	e7 dd       	rcall	.-1074   	; 0x1e2c <lcd_wr_command>
    225e:	0c c0       	rjmp	.+24     	; 0x2278 <lcd_cursor+0x54>
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	81 54       	subi	r24, 0x41	; 65
    2264:	e3 dd       	rcall	.-1082   	; 0x1e2c <lcd_wr_command>
    2266:	08 c0       	rjmp	.+16     	; 0x2278 <lcd_cursor+0x54>
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	8d 56       	subi	r24, 0x6D	; 109
    226c:	df dd       	rcall	.-1090   	; 0x1e2c <lcd_wr_command>
    226e:	04 c0       	rjmp	.+8      	; 0x2278 <lcd_cursor+0x54>
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	8d 52       	subi	r24, 0x2D	; 45
    2274:	db dd       	rcall	.-1098   	; 0x1e2c <lcd_wr_command>
    2276:	00 00       	nop
    2278:	00 00       	nop
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
    2282:	08 95       	ret

00002284 <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	a0 97       	sbiw	r28, 0x20	; 32
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
    2298:	8e 8f       	std	Y+30, r24	; 0x1e
    229a:	6f 8f       	std	Y+31, r22	; 0x1f
    229c:	48 a3       	std	Y+32, r20	; 0x20
	lcd_cursor (row, column);
    229e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22a2:	c0 df       	rcall	.-128    	; 0x2224 <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
    22a4:	88 a1       	ldd	r24, Y+32	; 0x20
    22a6:	89 83       	std	Y+1, r24	; 0x01
	temp = (temp & 0xF0);
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	80 7f       	andi	r24, 0xF0	; 240
    22ac:	89 83       	std	Y+1, r24	; 0x01
	lcd_data_port_reg &= 0x0F;
    22ae:	88 e2       	ldi	r24, 0x28	; 40
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	28 e2       	ldi	r18, 0x28	; 40
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	f9 01       	movw	r30, r18
    22b8:	20 81       	ld	r18, Z
    22ba:	2f 70       	andi	r18, 0x0F	; 15
    22bc:	fc 01       	movw	r30, r24
    22be:	20 83       	st	Z, r18
	lcd_data_port_reg |= temp;
    22c0:	88 e2       	ldi	r24, 0x28	; 40
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	28 e2       	ldi	r18, 0x28	; 40
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	f9 01       	movw	r30, r18
    22ca:	30 81       	ld	r19, Z
    22cc:	29 81       	ldd	r18, Y+1	; 0x01
    22ce:	23 2b       	or	r18, r19
    22d0:	fc 01       	movw	r30, r24
    22d2:	20 83       	st	Z, r18
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
    22d4:	88 e2       	ldi	r24, 0x28	; 40
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	28 e2       	ldi	r18, 0x28	; 40
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	f9 01       	movw	r30, r18
    22de:	20 81       	ld	r18, Z
    22e0:	21 60       	ori	r18, 0x01	; 1
    22e2:	fc 01       	movw	r30, r24
    22e4:	20 83       	st	Z, r18
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
    22e6:	88 e2       	ldi	r24, 0x28	; 40
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	28 e2       	ldi	r18, 0x28	; 40
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	f9 01       	movw	r30, r18
    22f0:	20 81       	ld	r18, Z
    22f2:	2d 7f       	andi	r18, 0xFD	; 253
    22f4:	fc 01       	movw	r30, r24
    22f6:	20 83       	st	Z, r18
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
    22f8:	88 e2       	ldi	r24, 0x28	; 40
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	28 e2       	ldi	r18, 0x28	; 40
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	f9 01       	movw	r30, r18
    2302:	20 81       	ld	r18, Z
    2304:	24 60       	ori	r18, 0x04	; 4
    2306:	fc 01       	movw	r30, r24
    2308:	20 83       	st	Z, r18
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	a0 ea       	ldi	r26, 0xA0	; 160
    2310:	b0 e4       	ldi	r27, 0x40	; 64
    2312:	8a 83       	std	Y+2, r24	; 0x02
    2314:	9b 83       	std	Y+3, r25	; 0x03
    2316:	ac 83       	std	Y+4, r26	; 0x04
    2318:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    231a:	26 e6       	ldi	r18, 0x66	; 102
    231c:	36 e6       	ldi	r19, 0x66	; 102
    231e:	46 e6       	ldi	r20, 0x66	; 102
    2320:	55 e4       	ldi	r21, 0x45	; 69
    2322:	6a 81       	ldd	r22, Y+2	; 0x02
    2324:	7b 81       	ldd	r23, Y+3	; 0x03
    2326:	8c 81       	ldd	r24, Y+4	; 0x04
    2328:	9d 81       	ldd	r25, Y+5	; 0x05
    232a:	d0 d3       	rcall	.+1952   	; 0x2acc <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	8c 8b       	std	Y+20, r24	; 0x14
    2332:	9d 8b       	std	Y+21, r25	; 0x15
    2334:	ae 8b       	std	Y+22, r26	; 0x16
    2336:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	6c 89       	ldd	r22, Y+20	; 0x14
    2342:	7d 89       	ldd	r23, Y+21	; 0x15
    2344:	8e 89       	ldd	r24, Y+22	; 0x16
    2346:	9f 89       	ldd	r25, Y+23	; 0x17
    2348:	73 d2       	rcall	.+1254   	; 0x2830 <__cmpsf2>
    234a:	88 23       	and	r24, r24
    234c:	2c f4       	brge	.+10     	; 0x2358 <lcd_wr_char+0xd4>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	99 8f       	std	Y+25, r25	; 0x19
    2354:	88 8f       	std	Y+24, r24	; 0x18
    2356:	3b c0       	rjmp	.+118    	; 0x23ce <lcd_wr_char+0x14a>
	else if (__tmp > 65535)
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	3f ef       	ldi	r19, 0xFF	; 255
    235c:	4f e7       	ldi	r20, 0x7F	; 127
    235e:	57 e4       	ldi	r21, 0x47	; 71
    2360:	6c 89       	ldd	r22, Y+20	; 0x14
    2362:	7d 89       	ldd	r23, Y+21	; 0x15
    2364:	8e 89       	ldd	r24, Y+22	; 0x16
    2366:	9f 89       	ldd	r25, Y+23	; 0x17
    2368:	ad d3       	rcall	.+1882   	; 0x2ac4 <__gesf2>
    236a:	18 16       	cp	r1, r24
    236c:	3c f5       	brge	.+78     	; 0x23bc <lcd_wr_char+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e2       	ldi	r20, 0x20	; 32
    2374:	51 e4       	ldi	r21, 0x41	; 65
    2376:	6a 81       	ldd	r22, Y+2	; 0x02
    2378:	7b 81       	ldd	r23, Y+3	; 0x03
    237a:	8c 81       	ldd	r24, Y+4	; 0x04
    237c:	9d 81       	ldd	r25, Y+5	; 0x05
    237e:	a6 d3       	rcall	.+1868   	; 0x2acc <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	bf d2       	rcall	.+1406   	; 0x2908 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	99 8f       	std	Y+25, r25	; 0x19
    2390:	88 8f       	std	Y+24, r24	; 0x18
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <lcd_wr_char+0x12e>
    2394:	80 e7       	ldi	r24, 0x70	; 112
    2396:	91 e0       	ldi	r25, 0x01	; 1
    2398:	9b 8f       	std	Y+27, r25	; 0x1b
    239a:	8a 8f       	std	Y+26, r24	; 0x1a
    239c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    239e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <lcd_wr_char+0x11c>
    23a4:	9b 8f       	std	Y+27, r25	; 0x1b
    23a6:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	88 8d       	ldd	r24, Y+24	; 0x18
    23aa:	99 8d       	ldd	r25, Y+25	; 0x19
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	99 8f       	std	Y+25, r25	; 0x19
    23b0:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	88 8d       	ldd	r24, Y+24	; 0x18
    23b4:	99 8d       	ldd	r25, Y+25	; 0x19
    23b6:	89 2b       	or	r24, r25
    23b8:	69 f7       	brne	.-38     	; 0x2394 <lcd_wr_char+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ba:	13 c0       	rjmp	.+38     	; 0x23e2 <lcd_wr_char+0x15e>
    23bc:	6c 89       	ldd	r22, Y+20	; 0x14
    23be:	7d 89       	ldd	r23, Y+21	; 0x15
    23c0:	8e 89       	ldd	r24, Y+22	; 0x16
    23c2:	9f 89       	ldd	r25, Y+23	; 0x17
    23c4:	a1 d2       	rcall	.+1346   	; 0x2908 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	99 8f       	std	Y+25, r25	; 0x19
    23cc:	88 8f       	std	Y+24, r24	; 0x18
    23ce:	88 8d       	ldd	r24, Y+24	; 0x18
    23d0:	99 8d       	ldd	r25, Y+25	; 0x19
    23d2:	9d 8f       	std	Y+29, r25	; 0x1d
    23d4:	8c 8f       	std	Y+28, r24	; 0x1c
    23d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <lcd_wr_char+0x156>
    23de:	9d 8f       	std	Y+29, r25	; 0x1d
    23e0:	8c 8f       	std	Y+28, r24	; 0x1c
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
    23e2:	88 e2       	ldi	r24, 0x28	; 40
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	28 e2       	ldi	r18, 0x28	; 40
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	f9 01       	movw	r30, r18
    23ec:	20 81       	ld	r18, Z
    23ee:	2b 7f       	andi	r18, 0xFB	; 251
    23f0:	fc 01       	movw	r30, r24
    23f2:	20 83       	st	Z, r18
	
	alpha_num_char = (alpha_num_char & 0x0F);
    23f4:	88 a1       	ldd	r24, Y+32	; 0x20
    23f6:	8f 70       	andi	r24, 0x0F	; 15
    23f8:	88 a3       	std	Y+32, r24	; 0x20
	alpha_num_char = (alpha_num_char << 4);
    23fa:	88 a1       	ldd	r24, Y+32	; 0x20
    23fc:	82 95       	swap	r24
    23fe:	80 7f       	andi	r24, 0xF0	; 240
    2400:	88 a3       	std	Y+32, r24	; 0x20
	lcd_data_port_reg &= 0x0F;
    2402:	88 e2       	ldi	r24, 0x28	; 40
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	28 e2       	ldi	r18, 0x28	; 40
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	f9 01       	movw	r30, r18
    240c:	20 81       	ld	r18, Z
    240e:	2f 70       	andi	r18, 0x0F	; 15
    2410:	fc 01       	movw	r30, r24
    2412:	20 83       	st	Z, r18
	lcd_data_port_reg |= alpha_num_char;
    2414:	88 e2       	ldi	r24, 0x28	; 40
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	28 e2       	ldi	r18, 0x28	; 40
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	f9 01       	movw	r30, r18
    241e:	30 81       	ld	r19, Z
    2420:	28 a1       	ldd	r18, Y+32	; 0x20
    2422:	23 2b       	or	r18, r19
    2424:	fc 01       	movw	r30, r24
    2426:	20 83       	st	Z, r18
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
    2428:	88 e2       	ldi	r24, 0x28	; 40
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	28 e2       	ldi	r18, 0x28	; 40
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	f9 01       	movw	r30, r18
    2432:	20 81       	ld	r18, Z
    2434:	21 60       	ori	r18, 0x01	; 1
    2436:	fc 01       	movw	r30, r24
    2438:	20 83       	st	Z, r18
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
    243a:	88 e2       	ldi	r24, 0x28	; 40
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	28 e2       	ldi	r18, 0x28	; 40
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	f9 01       	movw	r30, r18
    2444:	20 81       	ld	r18, Z
    2446:	2d 7f       	andi	r18, 0xFD	; 253
    2448:	fc 01       	movw	r30, r24
    244a:	20 83       	st	Z, r18
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
    244c:	88 e2       	ldi	r24, 0x28	; 40
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	28 e2       	ldi	r18, 0x28	; 40
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	f9 01       	movw	r30, r18
    2456:	20 81       	ld	r18, Z
    2458:	24 60       	ori	r18, 0x04	; 4
    245a:	fc 01       	movw	r30, r24
    245c:	20 83       	st	Z, r18
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a0 ea       	ldi	r26, 0xA0	; 160
    2464:	b0 e4       	ldi	r27, 0x40	; 64
    2466:	8e 83       	std	Y+6, r24	; 0x06
    2468:	9f 83       	std	Y+7, r25	; 0x07
    246a:	a8 87       	std	Y+8, r26	; 0x08
    246c:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    246e:	26 e6       	ldi	r18, 0x66	; 102
    2470:	36 e6       	ldi	r19, 0x66	; 102
    2472:	46 e6       	ldi	r20, 0x66	; 102
    2474:	55 e4       	ldi	r21, 0x45	; 69
    2476:	6e 81       	ldd	r22, Y+6	; 0x06
    2478:	7f 81       	ldd	r23, Y+7	; 0x07
    247a:	88 85       	ldd	r24, Y+8	; 0x08
    247c:	99 85       	ldd	r25, Y+9	; 0x09
    247e:	26 d3       	rcall	.+1612   	; 0x2acc <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	8a 87       	std	Y+10, r24	; 0x0a
    2486:	9b 87       	std	Y+11, r25	; 0x0b
    2488:	ac 87       	std	Y+12, r26	; 0x0c
    248a:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e8       	ldi	r20, 0x80	; 128
    2492:	5f e3       	ldi	r21, 0x3F	; 63
    2494:	6a 85       	ldd	r22, Y+10	; 0x0a
    2496:	7b 85       	ldd	r23, Y+11	; 0x0b
    2498:	8c 85       	ldd	r24, Y+12	; 0x0c
    249a:	9d 85       	ldd	r25, Y+13	; 0x0d
    249c:	c9 d1       	rcall	.+914    	; 0x2830 <__cmpsf2>
    249e:	88 23       	and	r24, r24
    24a0:	2c f4       	brge	.+10     	; 0x24ac <lcd_wr_char+0x228>
		__ticks = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9f 87       	std	Y+15, r25	; 0x0f
    24a8:	8e 87       	std	Y+14, r24	; 0x0e
	else if (__tmp > 65535)
    24aa:	3b c0       	rjmp	.+118    	; 0x2522 <lcd_wr_char+0x29e>
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	6a 85       	ldd	r22, Y+10	; 0x0a
    24b6:	7b 85       	ldd	r23, Y+11	; 0x0b
    24b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    24ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    24bc:	03 d3       	rcall	.+1542   	; 0x2ac4 <__gesf2>
    24be:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c0:	3c f5       	brge	.+78     	; 0x2510 <lcd_wr_char+0x28c>
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e2       	ldi	r20, 0x20	; 32
    24c8:	51 e4       	ldi	r21, 0x41	; 65
    24ca:	6e 81       	ldd	r22, Y+6	; 0x06
    24cc:	7f 81       	ldd	r23, Y+7	; 0x07
    24ce:	88 85       	ldd	r24, Y+8	; 0x08
    24d0:	99 85       	ldd	r25, Y+9	; 0x09
    24d2:	fc d2       	rcall	.+1528   	; 0x2acc <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	bc 01       	movw	r22, r24
    24da:	cd 01       	movw	r24, r26
    24dc:	15 d2       	rcall	.+1066   	; 0x2908 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9f 87       	std	Y+15, r25	; 0x0f
    24e4:	8e 87       	std	Y+14, r24	; 0x0e
    24e6:	0f c0       	rjmp	.+30     	; 0x2506 <lcd_wr_char+0x282>
    24e8:	80 e7       	ldi	r24, 0x70	; 112
    24ea:	91 e0       	ldi	r25, 0x01	; 1
    24ec:	99 8b       	std	Y+17, r25	; 0x11
    24ee:	88 8b       	std	Y+16, r24	; 0x10
    24f0:	88 89       	ldd	r24, Y+16	; 0x10
    24f2:	99 89       	ldd	r25, Y+17	; 0x11
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <lcd_wr_char+0x270>
    24f8:	99 8b       	std	Y+17, r25	; 0x11
    24fa:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    24fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	9f 87       	std	Y+15, r25	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2504:	8e 87       	std	Y+14, r24	; 0x0e
    2506:	8e 85       	ldd	r24, Y+14	; 0x0e
    2508:	9f 85       	ldd	r25, Y+15	; 0x0f
    250a:	89 2b       	or	r24, r25
    250c:	69 f7       	brne	.-38     	; 0x24e8 <lcd_wr_char+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	13 c0       	rjmp	.+38     	; 0x2536 <lcd_wr_char+0x2b2>
    2510:	6a 85       	ldd	r22, Y+10	; 0x0a
    2512:	7b 85       	ldd	r23, Y+11	; 0x0b
    2514:	8c 85       	ldd	r24, Y+12	; 0x0c
    2516:	9d 85       	ldd	r25, Y+13	; 0x0d
    2518:	f7 d1       	rcall	.+1006   	; 0x2908 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9f 87       	std	Y+15, r25	; 0x0f
    2520:	8e 87       	std	Y+14, r24	; 0x0e
    2522:	8e 85       	ldd	r24, Y+14	; 0x0e
    2524:	9f 85       	ldd	r25, Y+15	; 0x0f
    2526:	9b 8b       	std	Y+19, r25	; 0x13
    2528:	8a 8b       	std	Y+18, r24	; 0x12
    252a:	8a 89       	ldd	r24, Y+18	; 0x12
    252c:	9b 89       	ldd	r25, Y+19	; 0x13
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <lcd_wr_char+0x2aa>
    2532:	9b 8b       	std	Y+19, r25	; 0x13
    2534:	8a 8b       	std	Y+18, r24	; 0x12
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
    2536:	88 e2       	ldi	r24, 0x28	; 40
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	28 e2       	ldi	r18, 0x28	; 40
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	f9 01       	movw	r30, r18
    2540:	20 81       	ld	r18, Z
    2542:	2b 7f       	andi	r18, 0xFB	; 251
    2544:	fc 01       	movw	r30, r24
    2546:	20 83       	st	Z, r18
}
    2548:	00 00       	nop
    254a:	a0 96       	adiw	r28, 0x20	; 32
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	08 95       	ret

0000255c <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	00 d0       	rcall	.+0      	; 0x2562 <lcd_string+0x6>
    2562:	1f 92       	push	r1
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	6a 83       	std	Y+2, r22	; 0x02
    256c:	5c 83       	std	Y+4, r21	; 0x04
    256e:	4b 83       	std	Y+3, r20	; 0x03
	while(*str != '\0')
    2570:	10 c0       	rjmp	.+32     	; 0x2592 <lcd_string+0x36>
	{
		lcd_wr_char(row, column, *str);
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	9c 81       	ldd	r25, Y+4	; 0x04
    2576:	fc 01       	movw	r30, r24
    2578:	80 81       	ld	r24, Z
    257a:	48 2f       	mov	r20, r24
    257c:	6a 81       	ldd	r22, Y+2	; 0x02
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	81 de       	rcall	.-766    	; 0x2284 <lcd_wr_char>
		str++;
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	9c 81       	ldd	r25, Y+4	; 0x04
    2586:	01 96       	adiw	r24, 0x01	; 1
    2588:	9c 83       	std	Y+4, r25	; 0x04
    258a:	8b 83       	std	Y+3, r24	; 0x03
		column+=1;
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	8f 5f       	subi	r24, 0xFF	; 255
    2590:	8a 83       	std	Y+2, r24	; 0x02
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	fc 01       	movw	r30, r24
    2598:	80 81       	ld	r24, Z
    259a:	88 23       	and	r24, r24
    259c:	51 f7       	brne	.-44     	; 0x2572 <lcd_string+0x16>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
    259e:	00 00       	nop
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	df 91       	pop	r29
    25aa:	cf 91       	pop	r28
    25ac:	08 95       	ret

000025ae <lcd_numeric_value>:
 * Output: This function prints any integer value or value in a variable as integer
  *        on the specified location and up to the specified number of digits on LCD
 * Example Call: lcd_numeric_value(1, 1, -20, 2);
 */
void lcd_numeric_value(char row, char column, int val, int digits)
{
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	27 97       	sbiw	r28, 0x07	; 7
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	8a 83       	std	Y+2, r24	; 0x02
    25c4:	6b 83       	std	Y+3, r22	; 0x03
    25c6:	5d 83       	std	Y+5, r21	; 0x05
    25c8:	4c 83       	std	Y+4, r20	; 0x04
    25ca:	3f 83       	std	Y+7, r19	; 0x07
    25cc:	2e 83       	std	Y+6, r18	; 0x06
	lcd_cursor(row, column);
    25ce:	6b 81       	ldd	r22, Y+3	; 0x03
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	28 de       	rcall	.-944    	; 0x2224 <lcd_cursor>
	
	if (val < 0)
    25d4:	8c 81       	ldd	r24, Y+4	; 0x04
    25d6:	9d 81       	ldd	r25, Y+5	; 0x05
    25d8:	99 23       	and	r25, r25
    25da:	7c f4       	brge	.+30     	; 0x25fa <lcd_numeric_value+0x4c>
	{
		val = 0 - val;
    25dc:	8c 81       	ldd	r24, Y+4	; 0x04
    25de:	9d 81       	ldd	r25, Y+5	; 0x05
    25e0:	91 95       	neg	r25
    25e2:	81 95       	neg	r24
    25e4:	91 09       	sbc	r25, r1
    25e6:	9d 83       	std	Y+5, r25	; 0x05
    25e8:	8c 83       	std	Y+4, r24	; 0x04
		lcd_string(row, column, "-");
    25ea:	41 e1       	ldi	r20, 0x11	; 17
    25ec:	52 e0       	ldi	r21, 0x02	; 2
    25ee:	6b 81       	ldd	r22, Y+3	; 0x03
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	b4 df       	rcall	.-152    	; 0x255c <lcd_string>
		column+=1;
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	8f 5f       	subi	r24, 0xFF	; 255
    25f8:	8b 83       	std	Y+3, r24	; 0x03
	}
		
	unsigned char flag = 0;
    25fa:	19 82       	std	Y+1, r1	; 0x01
	
	if(row == 0 || column == 0)
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	88 23       	and	r24, r24
    2600:	19 f0       	breq	.+6      	; 0x2608 <lcd_numeric_value+0x5a>
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	88 23       	and	r24, r24
	{
		lcd_home();
    2606:	11 f4       	brne	.+4      	; 0x260c <lcd_numeric_value+0x5e>
    2608:	03 de       	rcall	.-1018   	; 0x2210 <lcd_home>
	}
	
	else
	{
		lcd_cursor(row, column);
    260a:	03 c0       	rjmp	.+6      	; 0x2612 <lcd_numeric_value+0x64>
    260c:	6b 81       	ldd	r22, Y+3	; 0x03
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	09 de       	rcall	.-1006   	; 0x2224 <lcd_cursor>
	}
	
	if(digits == 5 || flag == 1)
    2612:	8e 81       	ldd	r24, Y+6	; 0x06
    2614:	9f 81       	ldd	r25, Y+7	; 0x07
    2616:	05 97       	sbiw	r24, 0x05	; 5
    2618:	19 f0       	breq	.+6      	; 0x2620 <lcd_numeric_value+0x72>
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	81 30       	cpi	r24, 0x01	; 1
    261e:	c9 f4       	brne	.+50     	; 0x2652 <lcd_numeric_value+0xa4>
	{
		million = val/10000+48;
    2620:	8c 81       	ldd	r24, Y+4	; 0x04
    2622:	9d 81       	ldd	r25, Y+5	; 0x05
    2624:	20 e1       	ldi	r18, 0x10	; 16
    2626:	37 e2       	ldi	r19, 0x27	; 39
    2628:	b9 01       	movw	r22, r18
    262a:	b3 d2       	rcall	.+1382   	; 0x2b92 <__divmodhi4>
    262c:	cb 01       	movw	r24, r22
    262e:	c0 96       	adiw	r24, 0x30	; 48
    2630:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <million+0x1>
    2634:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <million>
		lcd_wr_char(row ,column, million);
    2638:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <million>
    263c:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <million+0x1>
    2640:	48 2f       	mov	r20, r24
    2642:	6b 81       	ldd	r22, Y+3	; 0x03
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	1e de       	rcall	.-964    	; 0x2284 <lcd_wr_char>
		column+=1;
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	8f 5f       	subi	r24, 0xFF	; 255
    264c:	8b 83       	std	Y+3, r24	; 0x03
		flag = 1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if(digits == 4 || flag == 1)
    2652:	8e 81       	ldd	r24, Y+6	; 0x06
    2654:	9f 81       	ldd	r25, Y+7	; 0x07
    2656:	04 97       	sbiw	r24, 0x04	; 4
    2658:	19 f0       	breq	.+6      	; 0x2660 <lcd_numeric_value+0xb2>
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	81 30       	cpi	r24, 0x01	; 1
	{
		temp = val/1000;
    265e:	c1 f5       	brne	.+112    	; 0x26d0 <lcd_numeric_value+0x122>
    2660:	8c 81       	ldd	r24, Y+4	; 0x04
    2662:	9d 81       	ldd	r25, Y+5	; 0x05
    2664:	28 ee       	ldi	r18, 0xE8	; 232
    2666:	33 e0       	ldi	r19, 0x03	; 3
    2668:	b9 01       	movw	r22, r18
    266a:	93 d2       	rcall	.+1318   	; 0x2b92 <__divmodhi4>
    266c:	cb 01       	movw	r24, r22
    266e:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <temp+0x1>
    2672:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <temp>
		thousand = temp%10 + 48;
    2676:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <temp>
    267a:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <temp+0x1>
    267e:	9a 01       	movw	r18, r20
    2680:	ad ec       	ldi	r26, 0xCD	; 205
    2682:	bc ec       	ldi	r27, 0xCC	; 204
    2684:	b5 d2       	rcall	.+1386   	; 0x2bf0 <__umulhisi3>
    2686:	96 95       	lsr	r25
    2688:	87 95       	ror	r24
    268a:	96 95       	lsr	r25
    268c:	87 95       	ror	r24
    268e:	96 95       	lsr	r25
    2690:	87 95       	ror	r24
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	9c 01       	movw	r18, r24
    2698:	22 0f       	add	r18, r18
    269a:	33 1f       	adc	r19, r19
    269c:	22 0f       	add	r18, r18
    269e:	33 1f       	adc	r19, r19
    26a0:	82 0f       	add	r24, r18
    26a2:	93 1f       	adc	r25, r19
    26a4:	9a 01       	movw	r18, r20
    26a6:	28 1b       	sub	r18, r24
    26a8:	39 0b       	sbc	r19, r25
    26aa:	c9 01       	movw	r24, r18
    26ac:	c0 96       	adiw	r24, 0x30	; 48
    26ae:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <thousand+0x1>
    26b2:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <thousand>
		lcd_wr_char(row, column, thousand);
    26b6:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <thousand>
    26ba:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <thousand+0x1>
    26be:	48 2f       	mov	r20, r24
    26c0:	6b 81       	ldd	r22, Y+3	; 0x03
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	df dd       	rcall	.-1090   	; 0x2284 <lcd_wr_char>
    26c6:	8b 81       	ldd	r24, Y+3	; 0x03
		column+=1;
    26c8:	8f 5f       	subi	r24, 0xFF	; 255
    26ca:	8b 83       	std	Y+3, r24	; 0x03
    26cc:	81 e0       	ldi	r24, 0x01	; 1
		flag = 1;
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	8e 81       	ldd	r24, Y+6	; 0x06
	}
	
	if(digits == 3 || flag == 1)
    26d2:	9f 81       	ldd	r25, Y+7	; 0x07
    26d4:	03 97       	sbiw	r24, 0x03	; 3
    26d6:	19 f0       	breq	.+6      	; 0x26de <lcd_numeric_value+0x130>
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	81 30       	cpi	r24, 0x01	; 1
    26dc:	c1 f5       	brne	.+112    	; 0x274e <lcd_numeric_value+0x1a0>
	{
		temp = val/100;
    26de:	8c 81       	ldd	r24, Y+4	; 0x04
    26e0:	9d 81       	ldd	r25, Y+5	; 0x05
    26e2:	24 e6       	ldi	r18, 0x64	; 100
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	b9 01       	movw	r22, r18
    26e8:	54 d2       	rcall	.+1192   	; 0x2b92 <__divmodhi4>
    26ea:	cb 01       	movw	r24, r22
    26ec:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <temp+0x1>
    26f0:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <temp>
		hundred = temp%10 + 48;
    26f4:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <temp>
    26f8:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <temp+0x1>
    26fc:	9a 01       	movw	r18, r20
    26fe:	ad ec       	ldi	r26, 0xCD	; 205
    2700:	bc ec       	ldi	r27, 0xCC	; 204
    2702:	76 d2       	rcall	.+1260   	; 0x2bf0 <__umulhisi3>
    2704:	96 95       	lsr	r25
    2706:	87 95       	ror	r24
    2708:	96 95       	lsr	r25
    270a:	87 95       	ror	r24
    270c:	96 95       	lsr	r25
    270e:	87 95       	ror	r24
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	9c 01       	movw	r18, r24
    2716:	22 0f       	add	r18, r18
    2718:	33 1f       	adc	r19, r19
    271a:	22 0f       	add	r18, r18
    271c:	33 1f       	adc	r19, r19
    271e:	82 0f       	add	r24, r18
    2720:	93 1f       	adc	r25, r19
    2722:	9a 01       	movw	r18, r20
    2724:	28 1b       	sub	r18, r24
    2726:	39 0b       	sbc	r19, r25
    2728:	c9 01       	movw	r24, r18
    272a:	c0 96       	adiw	r24, 0x30	; 48
    272c:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <hundred+0x1>
    2730:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <hundred>
		lcd_wr_char(row, column, hundred);
    2734:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <hundred>
    2738:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <hundred+0x1>
    273c:	48 2f       	mov	r20, r24
    273e:	6b 81       	ldd	r22, Y+3	; 0x03
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	a0 dd       	rcall	.-1216   	; 0x2284 <lcd_wr_char>
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
		column+=1;
    2746:	8f 5f       	subi	r24, 0xFF	; 255
    2748:	8b 83       	std	Y+3, r24	; 0x03
    274a:	81 e0       	ldi	r24, 0x01	; 1
		flag = 1;
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	8e 81       	ldd	r24, Y+6	; 0x06
	}
	
	if(digits == 2 || flag == 1)
    2750:	9f 81       	ldd	r25, Y+7	; 0x07
    2752:	02 97       	sbiw	r24, 0x02	; 2
    2754:	19 f0       	breq	.+6      	; 0x275c <lcd_numeric_value+0x1ae>
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	81 30       	cpi	r24, 0x01	; 1
    275a:	c1 f5       	brne	.+112    	; 0x27cc <lcd_numeric_value+0x21e>
	{
		temp = val/10;
    275c:	8c 81       	ldd	r24, Y+4	; 0x04
    275e:	9d 81       	ldd	r25, Y+5	; 0x05
    2760:	2a e0       	ldi	r18, 0x0A	; 10
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	b9 01       	movw	r22, r18
    2766:	15 d2       	rcall	.+1066   	; 0x2b92 <__divmodhi4>
    2768:	cb 01       	movw	r24, r22
    276a:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <temp+0x1>
    276e:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <temp>
		tens = temp%10 + 48;
    2772:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <temp>
    2776:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <temp+0x1>
    277a:	9a 01       	movw	r18, r20
    277c:	ad ec       	ldi	r26, 0xCD	; 205
    277e:	bc ec       	ldi	r27, 0xCC	; 204
    2780:	37 d2       	rcall	.+1134   	; 0x2bf0 <__umulhisi3>
    2782:	96 95       	lsr	r25
    2784:	87 95       	ror	r24
    2786:	96 95       	lsr	r25
    2788:	87 95       	ror	r24
    278a:	96 95       	lsr	r25
    278c:	87 95       	ror	r24
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	9c 01       	movw	r18, r24
    2794:	22 0f       	add	r18, r18
    2796:	33 1f       	adc	r19, r19
    2798:	22 0f       	add	r18, r18
    279a:	33 1f       	adc	r19, r19
    279c:	82 0f       	add	r24, r18
    279e:	93 1f       	adc	r25, r19
    27a0:	9a 01       	movw	r18, r20
    27a2:	28 1b       	sub	r18, r24
    27a4:	39 0b       	sbc	r19, r25
    27a6:	c9 01       	movw	r24, r18
    27a8:	c0 96       	adiw	r24, 0x30	; 48
    27aa:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <tens+0x1>
    27ae:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <tens>
		lcd_wr_char(row, column, tens);
    27b2:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <tens>
    27b6:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <tens+0x1>
    27ba:	48 2f       	mov	r20, r24
    27bc:	6b 81       	ldd	r22, Y+3	; 0x03
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	61 dd       	rcall	.-1342   	; 0x2284 <lcd_wr_char>
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
		column+=1;
    27c4:	8f 5f       	subi	r24, 0xFF	; 255
    27c6:	8b 83       	std	Y+3, r24	; 0x03
		flag = 1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if(digits == 1 || flag == 1)
    27cc:	8e 81       	ldd	r24, Y+6	; 0x06
    27ce:	9f 81       	ldd	r25, Y+7	; 0x07
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	19 f0       	breq	.+6      	; 0x27da <lcd_numeric_value+0x22c>
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	b1 f4       	brne	.+44     	; 0x2806 <lcd_numeric_value+0x258>
	{
		unit = val%10 + 48;
    27da:	8c 81       	ldd	r24, Y+4	; 0x04
    27dc:	9d 81       	ldd	r25, Y+5	; 0x05
    27de:	2a e0       	ldi	r18, 0x0A	; 10
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	b9 01       	movw	r22, r18
    27e4:	d6 d1       	rcall	.+940    	; 0x2b92 <__divmodhi4>
    27e6:	c0 96       	adiw	r24, 0x30	; 48
    27e8:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <unit+0x1>
    27ec:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <unit>
		lcd_wr_char(row, column, unit);
    27f0:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <unit>
    27f4:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <unit+0x1>
    27f8:	48 2f       	mov	r20, r24
    27fa:	6b 81       	ldd	r22, Y+3	; 0x03
    27fc:	8a 81       	ldd	r24, Y+2	; 0x02
    27fe:	42 dd       	rcall	.-1404   	; 0x2284 <lcd_wr_char>
		column+=1;
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
    2802:	8f 5f       	subi	r24, 0xFF	; 255
    2804:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	if(digits > 5)
    2806:	8e 81       	ldd	r24, Y+6	; 0x06
    2808:	9f 81       	ldd	r25, Y+7	; 0x07
    280a:	06 97       	sbiw	r24, 0x06	; 6
    280c:	3c f0       	brlt	.+14     	; 0x281c <lcd_numeric_value+0x26e>
	{
		lcd_wr_char(row, column, 'E');
    280e:	45 e4       	ldi	r20, 0x45	; 69
    2810:	6b 81       	ldd	r22, Y+3	; 0x03
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	37 dd       	rcall	.-1426   	; 0x2284 <lcd_wr_char>
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
		column+=1;
    2818:	8f 5f       	subi	r24, 0xFF	; 255
    281a:	8b 83       	std	Y+3, r24	; 0x03
    281c:	00 00       	nop
	}
    281e:	27 96       	adiw	r28, 0x07	; 7
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	08 95       	ret

00002830 <__cmpsf2>:
    2830:	d4 d0       	rcall	.+424    	; 0x29da <__fp_cmp>
    2832:	08 f4       	brcc	.+2      	; 0x2836 <__cmpsf2+0x6>
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	08 95       	ret

00002838 <__divsf3>:
    2838:	0c d0       	rcall	.+24     	; 0x2852 <__divsf3x>
    283a:	0a c1       	rjmp	.+532    	; 0x2a50 <__fp_round>
    283c:	02 d1       	rcall	.+516    	; 0x2a42 <__fp_pscB>
    283e:	40 f0       	brcs	.+16     	; 0x2850 <__divsf3+0x18>
    2840:	f9 d0       	rcall	.+498    	; 0x2a34 <__fp_pscA>
    2842:	30 f0       	brcs	.+12     	; 0x2850 <__divsf3+0x18>
    2844:	21 f4       	brne	.+8      	; 0x284e <__divsf3+0x16>
    2846:	5f 3f       	cpi	r21, 0xFF	; 255
    2848:	19 f0       	breq	.+6      	; 0x2850 <__divsf3+0x18>
    284a:	eb c0       	rjmp	.+470    	; 0x2a22 <__fp_inf>
    284c:	51 11       	cpse	r21, r1
    284e:	34 c1       	rjmp	.+616    	; 0x2ab8 <__fp_szero>
    2850:	ee c0       	rjmp	.+476    	; 0x2a2e <__fp_nan>

00002852 <__divsf3x>:
    2852:	0f d1       	rcall	.+542    	; 0x2a72 <__fp_split3>
    2854:	98 f3       	brcs	.-26     	; 0x283c <__divsf3+0x4>

00002856 <__divsf3_pse>:
    2856:	99 23       	and	r25, r25
    2858:	c9 f3       	breq	.-14     	; 0x284c <__divsf3+0x14>
    285a:	55 23       	and	r21, r21
    285c:	b1 f3       	breq	.-20     	; 0x284a <__divsf3+0x12>
    285e:	95 1b       	sub	r25, r21
    2860:	55 0b       	sbc	r21, r21
    2862:	bb 27       	eor	r27, r27
    2864:	aa 27       	eor	r26, r26
    2866:	62 17       	cp	r22, r18
    2868:	73 07       	cpc	r23, r19
    286a:	84 07       	cpc	r24, r20
    286c:	38 f0       	brcs	.+14     	; 0x287c <__divsf3_pse+0x26>
    286e:	9f 5f       	subi	r25, 0xFF	; 255
    2870:	5f 4f       	sbci	r21, 0xFF	; 255
    2872:	22 0f       	add	r18, r18
    2874:	33 1f       	adc	r19, r19
    2876:	44 1f       	adc	r20, r20
    2878:	aa 1f       	adc	r26, r26
    287a:	a9 f3       	breq	.-22     	; 0x2866 <__divsf3_pse+0x10>
    287c:	33 d0       	rcall	.+102    	; 0x28e4 <__divsf3_pse+0x8e>
    287e:	0e 2e       	mov	r0, r30
    2880:	3a f0       	brmi	.+14     	; 0x2890 <__divsf3_pse+0x3a>
    2882:	e0 e8       	ldi	r30, 0x80	; 128
    2884:	30 d0       	rcall	.+96     	; 0x28e6 <__divsf3_pse+0x90>
    2886:	91 50       	subi	r25, 0x01	; 1
    2888:	50 40       	sbci	r21, 0x00	; 0
    288a:	e6 95       	lsr	r30
    288c:	00 1c       	adc	r0, r0
    288e:	ca f7       	brpl	.-14     	; 0x2882 <__divsf3_pse+0x2c>
    2890:	29 d0       	rcall	.+82     	; 0x28e4 <__divsf3_pse+0x8e>
    2892:	fe 2f       	mov	r31, r30
    2894:	27 d0       	rcall	.+78     	; 0x28e4 <__divsf3_pse+0x8e>
    2896:	66 0f       	add	r22, r22
    2898:	77 1f       	adc	r23, r23
    289a:	88 1f       	adc	r24, r24
    289c:	bb 1f       	adc	r27, r27
    289e:	26 17       	cp	r18, r22
    28a0:	37 07       	cpc	r19, r23
    28a2:	48 07       	cpc	r20, r24
    28a4:	ab 07       	cpc	r26, r27
    28a6:	b0 e8       	ldi	r27, 0x80	; 128
    28a8:	09 f0       	breq	.+2      	; 0x28ac <__divsf3_pse+0x56>
    28aa:	bb 0b       	sbc	r27, r27
    28ac:	80 2d       	mov	r24, r0
    28ae:	bf 01       	movw	r22, r30
    28b0:	ff 27       	eor	r31, r31
    28b2:	93 58       	subi	r25, 0x83	; 131
    28b4:	5f 4f       	sbci	r21, 0xFF	; 255
    28b6:	2a f0       	brmi	.+10     	; 0x28c2 <__divsf3_pse+0x6c>
    28b8:	9e 3f       	cpi	r25, 0xFE	; 254
    28ba:	51 05       	cpc	r21, r1
    28bc:	68 f0       	brcs	.+26     	; 0x28d8 <__divsf3_pse+0x82>
    28be:	b1 c0       	rjmp	.+354    	; 0x2a22 <__fp_inf>
    28c0:	fb c0       	rjmp	.+502    	; 0x2ab8 <__fp_szero>
    28c2:	5f 3f       	cpi	r21, 0xFF	; 255
    28c4:	ec f3       	brlt	.-6      	; 0x28c0 <__divsf3_pse+0x6a>
    28c6:	98 3e       	cpi	r25, 0xE8	; 232
    28c8:	dc f3       	brlt	.-10     	; 0x28c0 <__divsf3_pse+0x6a>
    28ca:	86 95       	lsr	r24
    28cc:	77 95       	ror	r23
    28ce:	67 95       	ror	r22
    28d0:	b7 95       	ror	r27
    28d2:	f7 95       	ror	r31
    28d4:	9f 5f       	subi	r25, 0xFF	; 255
    28d6:	c9 f7       	brne	.-14     	; 0x28ca <__divsf3_pse+0x74>
    28d8:	88 0f       	add	r24, r24
    28da:	91 1d       	adc	r25, r1
    28dc:	96 95       	lsr	r25
    28de:	87 95       	ror	r24
    28e0:	97 f9       	bld	r25, 7
    28e2:	08 95       	ret
    28e4:	e1 e0       	ldi	r30, 0x01	; 1
    28e6:	66 0f       	add	r22, r22
    28e8:	77 1f       	adc	r23, r23
    28ea:	88 1f       	adc	r24, r24
    28ec:	bb 1f       	adc	r27, r27
    28ee:	62 17       	cp	r22, r18
    28f0:	73 07       	cpc	r23, r19
    28f2:	84 07       	cpc	r24, r20
    28f4:	ba 07       	cpc	r27, r26
    28f6:	20 f0       	brcs	.+8      	; 0x2900 <__divsf3_pse+0xaa>
    28f8:	62 1b       	sub	r22, r18
    28fa:	73 0b       	sbc	r23, r19
    28fc:	84 0b       	sbc	r24, r20
    28fe:	ba 0b       	sbc	r27, r26
    2900:	ee 1f       	adc	r30, r30
    2902:	88 f7       	brcc	.-30     	; 0x28e6 <__divsf3_pse+0x90>
    2904:	e0 95       	com	r30
    2906:	08 95       	ret

00002908 <__fixunssfsi>:
    2908:	bc d0       	rcall	.+376    	; 0x2a82 <__fp_splitA>
    290a:	88 f0       	brcs	.+34     	; 0x292e <__fixunssfsi+0x26>
    290c:	9f 57       	subi	r25, 0x7F	; 127
    290e:	90 f0       	brcs	.+36     	; 0x2934 <__fixunssfsi+0x2c>
    2910:	b9 2f       	mov	r27, r25
    2912:	99 27       	eor	r25, r25
    2914:	b7 51       	subi	r27, 0x17	; 23
    2916:	a0 f0       	brcs	.+40     	; 0x2940 <__fixunssfsi+0x38>
    2918:	d1 f0       	breq	.+52     	; 0x294e <__fixunssfsi+0x46>
    291a:	66 0f       	add	r22, r22
    291c:	77 1f       	adc	r23, r23
    291e:	88 1f       	adc	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	1a f0       	brmi	.+6      	; 0x292a <__fixunssfsi+0x22>
    2924:	ba 95       	dec	r27
    2926:	c9 f7       	brne	.-14     	; 0x291a <__fixunssfsi+0x12>
    2928:	12 c0       	rjmp	.+36     	; 0x294e <__fixunssfsi+0x46>
    292a:	b1 30       	cpi	r27, 0x01	; 1
    292c:	81 f0       	breq	.+32     	; 0x294e <__fixunssfsi+0x46>
    292e:	c3 d0       	rcall	.+390    	; 0x2ab6 <__fp_zero>
    2930:	b1 e0       	ldi	r27, 0x01	; 1
    2932:	08 95       	ret
    2934:	c0 c0       	rjmp	.+384    	; 0x2ab6 <__fp_zero>
    2936:	67 2f       	mov	r22, r23
    2938:	78 2f       	mov	r23, r24
    293a:	88 27       	eor	r24, r24
    293c:	b8 5f       	subi	r27, 0xF8	; 248
    293e:	39 f0       	breq	.+14     	; 0x294e <__fixunssfsi+0x46>
    2940:	b9 3f       	cpi	r27, 0xF9	; 249
    2942:	cc f3       	brlt	.-14     	; 0x2936 <__fixunssfsi+0x2e>
    2944:	86 95       	lsr	r24
    2946:	77 95       	ror	r23
    2948:	67 95       	ror	r22
    294a:	b3 95       	inc	r27
    294c:	d9 f7       	brne	.-10     	; 0x2944 <__fixunssfsi+0x3c>
    294e:	3e f4       	brtc	.+14     	; 0x295e <__fixunssfsi+0x56>
    2950:	90 95       	com	r25
    2952:	80 95       	com	r24
    2954:	70 95       	com	r23
    2956:	61 95       	neg	r22
    2958:	7f 4f       	sbci	r23, 0xFF	; 255
    295a:	8f 4f       	sbci	r24, 0xFF	; 255
    295c:	9f 4f       	sbci	r25, 0xFF	; 255
    295e:	08 95       	ret

00002960 <__floatunsisf>:
    2960:	e8 94       	clt
    2962:	09 c0       	rjmp	.+18     	; 0x2976 <__floatsisf+0x12>

00002964 <__floatsisf>:
    2964:	97 fb       	bst	r25, 7
    2966:	3e f4       	brtc	.+14     	; 0x2976 <__floatsisf+0x12>
    2968:	90 95       	com	r25
    296a:	80 95       	com	r24
    296c:	70 95       	com	r23
    296e:	61 95       	neg	r22
    2970:	7f 4f       	sbci	r23, 0xFF	; 255
    2972:	8f 4f       	sbci	r24, 0xFF	; 255
    2974:	9f 4f       	sbci	r25, 0xFF	; 255
    2976:	99 23       	and	r25, r25
    2978:	a9 f0       	breq	.+42     	; 0x29a4 <__floatsisf+0x40>
    297a:	f9 2f       	mov	r31, r25
    297c:	96 e9       	ldi	r25, 0x96	; 150
    297e:	bb 27       	eor	r27, r27
    2980:	93 95       	inc	r25
    2982:	f6 95       	lsr	r31
    2984:	87 95       	ror	r24
    2986:	77 95       	ror	r23
    2988:	67 95       	ror	r22
    298a:	b7 95       	ror	r27
    298c:	f1 11       	cpse	r31, r1
    298e:	f8 cf       	rjmp	.-16     	; 0x2980 <__floatsisf+0x1c>
    2990:	fa f4       	brpl	.+62     	; 0x29d0 <__floatsisf+0x6c>
    2992:	bb 0f       	add	r27, r27
    2994:	11 f4       	brne	.+4      	; 0x299a <__floatsisf+0x36>
    2996:	60 ff       	sbrs	r22, 0
    2998:	1b c0       	rjmp	.+54     	; 0x29d0 <__floatsisf+0x6c>
    299a:	6f 5f       	subi	r22, 0xFF	; 255
    299c:	7f 4f       	sbci	r23, 0xFF	; 255
    299e:	8f 4f       	sbci	r24, 0xFF	; 255
    29a0:	9f 4f       	sbci	r25, 0xFF	; 255
    29a2:	16 c0       	rjmp	.+44     	; 0x29d0 <__floatsisf+0x6c>
    29a4:	88 23       	and	r24, r24
    29a6:	11 f0       	breq	.+4      	; 0x29ac <__floatsisf+0x48>
    29a8:	96 e9       	ldi	r25, 0x96	; 150
    29aa:	11 c0       	rjmp	.+34     	; 0x29ce <__floatsisf+0x6a>
    29ac:	77 23       	and	r23, r23
    29ae:	21 f0       	breq	.+8      	; 0x29b8 <__floatsisf+0x54>
    29b0:	9e e8       	ldi	r25, 0x8E	; 142
    29b2:	87 2f       	mov	r24, r23
    29b4:	76 2f       	mov	r23, r22
    29b6:	05 c0       	rjmp	.+10     	; 0x29c2 <__floatsisf+0x5e>
    29b8:	66 23       	and	r22, r22
    29ba:	71 f0       	breq	.+28     	; 0x29d8 <__floatsisf+0x74>
    29bc:	96 e8       	ldi	r25, 0x86	; 134
    29be:	86 2f       	mov	r24, r22
    29c0:	70 e0       	ldi	r23, 0x00	; 0
    29c2:	60 e0       	ldi	r22, 0x00	; 0
    29c4:	2a f0       	brmi	.+10     	; 0x29d0 <__floatsisf+0x6c>
    29c6:	9a 95       	dec	r25
    29c8:	66 0f       	add	r22, r22
    29ca:	77 1f       	adc	r23, r23
    29cc:	88 1f       	adc	r24, r24
    29ce:	da f7       	brpl	.-10     	; 0x29c6 <__floatsisf+0x62>
    29d0:	88 0f       	add	r24, r24
    29d2:	96 95       	lsr	r25
    29d4:	87 95       	ror	r24
    29d6:	97 f9       	bld	r25, 7
    29d8:	08 95       	ret

000029da <__fp_cmp>:
    29da:	99 0f       	add	r25, r25
    29dc:	00 08       	sbc	r0, r0
    29de:	55 0f       	add	r21, r21
    29e0:	aa 0b       	sbc	r26, r26
    29e2:	e0 e8       	ldi	r30, 0x80	; 128
    29e4:	fe ef       	ldi	r31, 0xFE	; 254
    29e6:	16 16       	cp	r1, r22
    29e8:	17 06       	cpc	r1, r23
    29ea:	e8 07       	cpc	r30, r24
    29ec:	f9 07       	cpc	r31, r25
    29ee:	c0 f0       	brcs	.+48     	; 0x2a20 <__fp_cmp+0x46>
    29f0:	12 16       	cp	r1, r18
    29f2:	13 06       	cpc	r1, r19
    29f4:	e4 07       	cpc	r30, r20
    29f6:	f5 07       	cpc	r31, r21
    29f8:	98 f0       	brcs	.+38     	; 0x2a20 <__fp_cmp+0x46>
    29fa:	62 1b       	sub	r22, r18
    29fc:	73 0b       	sbc	r23, r19
    29fe:	84 0b       	sbc	r24, r20
    2a00:	95 0b       	sbc	r25, r21
    2a02:	39 f4       	brne	.+14     	; 0x2a12 <__fp_cmp+0x38>
    2a04:	0a 26       	eor	r0, r26
    2a06:	61 f0       	breq	.+24     	; 0x2a20 <__fp_cmp+0x46>
    2a08:	23 2b       	or	r18, r19
    2a0a:	24 2b       	or	r18, r20
    2a0c:	25 2b       	or	r18, r21
    2a0e:	21 f4       	brne	.+8      	; 0x2a18 <__fp_cmp+0x3e>
    2a10:	08 95       	ret
    2a12:	0a 26       	eor	r0, r26
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <__fp_cmp+0x3e>
    2a16:	a1 40       	sbci	r26, 0x01	; 1
    2a18:	a6 95       	lsr	r26
    2a1a:	8f ef       	ldi	r24, 0xFF	; 255
    2a1c:	81 1d       	adc	r24, r1
    2a1e:	81 1d       	adc	r24, r1
    2a20:	08 95       	ret

00002a22 <__fp_inf>:
    2a22:	97 f9       	bld	r25, 7
    2a24:	9f 67       	ori	r25, 0x7F	; 127
    2a26:	80 e8       	ldi	r24, 0x80	; 128
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	60 e0       	ldi	r22, 0x00	; 0
    2a2c:	08 95       	ret

00002a2e <__fp_nan>:
    2a2e:	9f ef       	ldi	r25, 0xFF	; 255
    2a30:	80 ec       	ldi	r24, 0xC0	; 192
    2a32:	08 95       	ret

00002a34 <__fp_pscA>:
    2a34:	00 24       	eor	r0, r0
    2a36:	0a 94       	dec	r0
    2a38:	16 16       	cp	r1, r22
    2a3a:	17 06       	cpc	r1, r23
    2a3c:	18 06       	cpc	r1, r24
    2a3e:	09 06       	cpc	r0, r25
    2a40:	08 95       	ret

00002a42 <__fp_pscB>:
    2a42:	00 24       	eor	r0, r0
    2a44:	0a 94       	dec	r0
    2a46:	12 16       	cp	r1, r18
    2a48:	13 06       	cpc	r1, r19
    2a4a:	14 06       	cpc	r1, r20
    2a4c:	05 06       	cpc	r0, r21
    2a4e:	08 95       	ret

00002a50 <__fp_round>:
    2a50:	09 2e       	mov	r0, r25
    2a52:	03 94       	inc	r0
    2a54:	00 0c       	add	r0, r0
    2a56:	11 f4       	brne	.+4      	; 0x2a5c <__fp_round+0xc>
    2a58:	88 23       	and	r24, r24
    2a5a:	52 f0       	brmi	.+20     	; 0x2a70 <__fp_round+0x20>
    2a5c:	bb 0f       	add	r27, r27
    2a5e:	40 f4       	brcc	.+16     	; 0x2a70 <__fp_round+0x20>
    2a60:	bf 2b       	or	r27, r31
    2a62:	11 f4       	brne	.+4      	; 0x2a68 <__fp_round+0x18>
    2a64:	60 ff       	sbrs	r22, 0
    2a66:	04 c0       	rjmp	.+8      	; 0x2a70 <__fp_round+0x20>
    2a68:	6f 5f       	subi	r22, 0xFF	; 255
    2a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    2a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a70:	08 95       	ret

00002a72 <__fp_split3>:
    2a72:	57 fd       	sbrc	r21, 7
    2a74:	90 58       	subi	r25, 0x80	; 128
    2a76:	44 0f       	add	r20, r20
    2a78:	55 1f       	adc	r21, r21
    2a7a:	59 f0       	breq	.+22     	; 0x2a92 <__fp_splitA+0x10>
    2a7c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a7e:	71 f0       	breq	.+28     	; 0x2a9c <__fp_splitA+0x1a>
    2a80:	47 95       	ror	r20

00002a82 <__fp_splitA>:
    2a82:	88 0f       	add	r24, r24
    2a84:	97 fb       	bst	r25, 7
    2a86:	99 1f       	adc	r25, r25
    2a88:	61 f0       	breq	.+24     	; 0x2aa2 <__fp_splitA+0x20>
    2a8a:	9f 3f       	cpi	r25, 0xFF	; 255
    2a8c:	79 f0       	breq	.+30     	; 0x2aac <__fp_splitA+0x2a>
    2a8e:	87 95       	ror	r24
    2a90:	08 95       	ret
    2a92:	12 16       	cp	r1, r18
    2a94:	13 06       	cpc	r1, r19
    2a96:	14 06       	cpc	r1, r20
    2a98:	55 1f       	adc	r21, r21
    2a9a:	f2 cf       	rjmp	.-28     	; 0x2a80 <__fp_split3+0xe>
    2a9c:	46 95       	lsr	r20
    2a9e:	f1 df       	rcall	.-30     	; 0x2a82 <__fp_splitA>
    2aa0:	08 c0       	rjmp	.+16     	; 0x2ab2 <__fp_splitA+0x30>
    2aa2:	16 16       	cp	r1, r22
    2aa4:	17 06       	cpc	r1, r23
    2aa6:	18 06       	cpc	r1, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	f1 cf       	rjmp	.-30     	; 0x2a8e <__fp_splitA+0xc>
    2aac:	86 95       	lsr	r24
    2aae:	71 05       	cpc	r23, r1
    2ab0:	61 05       	cpc	r22, r1
    2ab2:	08 94       	sec
    2ab4:	08 95       	ret

00002ab6 <__fp_zero>:
    2ab6:	e8 94       	clt

00002ab8 <__fp_szero>:
    2ab8:	bb 27       	eor	r27, r27
    2aba:	66 27       	eor	r22, r22
    2abc:	77 27       	eor	r23, r23
    2abe:	cb 01       	movw	r24, r22
    2ac0:	97 f9       	bld	r25, 7
    2ac2:	08 95       	ret

00002ac4 <__gesf2>:
    2ac4:	8a df       	rcall	.-236    	; 0x29da <__fp_cmp>
    2ac6:	08 f4       	brcc	.+2      	; 0x2aca <__gesf2+0x6>
    2ac8:	8f ef       	ldi	r24, 0xFF	; 255
    2aca:	08 95       	ret

00002acc <__mulsf3>:
    2acc:	0b d0       	rcall	.+22     	; 0x2ae4 <__mulsf3x>
    2ace:	c0 cf       	rjmp	.-128    	; 0x2a50 <__fp_round>
    2ad0:	b1 df       	rcall	.-158    	; 0x2a34 <__fp_pscA>
    2ad2:	28 f0       	brcs	.+10     	; 0x2ade <__mulsf3+0x12>
    2ad4:	b6 df       	rcall	.-148    	; 0x2a42 <__fp_pscB>
    2ad6:	18 f0       	brcs	.+6      	; 0x2ade <__mulsf3+0x12>
    2ad8:	95 23       	and	r25, r21
    2ada:	09 f0       	breq	.+2      	; 0x2ade <__mulsf3+0x12>
    2adc:	a2 cf       	rjmp	.-188    	; 0x2a22 <__fp_inf>
    2ade:	a7 cf       	rjmp	.-178    	; 0x2a2e <__fp_nan>
    2ae0:	11 24       	eor	r1, r1
    2ae2:	ea cf       	rjmp	.-44     	; 0x2ab8 <__fp_szero>

00002ae4 <__mulsf3x>:
    2ae4:	c6 df       	rcall	.-116    	; 0x2a72 <__fp_split3>
    2ae6:	a0 f3       	brcs	.-24     	; 0x2ad0 <__mulsf3+0x4>

00002ae8 <__mulsf3_pse>:
    2ae8:	95 9f       	mul	r25, r21
    2aea:	d1 f3       	breq	.-12     	; 0x2ae0 <__mulsf3+0x14>
    2aec:	95 0f       	add	r25, r21
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	55 1f       	adc	r21, r21
    2af2:	62 9f       	mul	r22, r18
    2af4:	f0 01       	movw	r30, r0
    2af6:	72 9f       	mul	r23, r18
    2af8:	bb 27       	eor	r27, r27
    2afa:	f0 0d       	add	r31, r0
    2afc:	b1 1d       	adc	r27, r1
    2afe:	63 9f       	mul	r22, r19
    2b00:	aa 27       	eor	r26, r26
    2b02:	f0 0d       	add	r31, r0
    2b04:	b1 1d       	adc	r27, r1
    2b06:	aa 1f       	adc	r26, r26
    2b08:	64 9f       	mul	r22, r20
    2b0a:	66 27       	eor	r22, r22
    2b0c:	b0 0d       	add	r27, r0
    2b0e:	a1 1d       	adc	r26, r1
    2b10:	66 1f       	adc	r22, r22
    2b12:	82 9f       	mul	r24, r18
    2b14:	22 27       	eor	r18, r18
    2b16:	b0 0d       	add	r27, r0
    2b18:	a1 1d       	adc	r26, r1
    2b1a:	62 1f       	adc	r22, r18
    2b1c:	73 9f       	mul	r23, r19
    2b1e:	b0 0d       	add	r27, r0
    2b20:	a1 1d       	adc	r26, r1
    2b22:	62 1f       	adc	r22, r18
    2b24:	83 9f       	mul	r24, r19
    2b26:	a0 0d       	add	r26, r0
    2b28:	61 1d       	adc	r22, r1
    2b2a:	22 1f       	adc	r18, r18
    2b2c:	74 9f       	mul	r23, r20
    2b2e:	33 27       	eor	r19, r19
    2b30:	a0 0d       	add	r26, r0
    2b32:	61 1d       	adc	r22, r1
    2b34:	23 1f       	adc	r18, r19
    2b36:	84 9f       	mul	r24, r20
    2b38:	60 0d       	add	r22, r0
    2b3a:	21 1d       	adc	r18, r1
    2b3c:	82 2f       	mov	r24, r18
    2b3e:	76 2f       	mov	r23, r22
    2b40:	6a 2f       	mov	r22, r26
    2b42:	11 24       	eor	r1, r1
    2b44:	9f 57       	subi	r25, 0x7F	; 127
    2b46:	50 40       	sbci	r21, 0x00	; 0
    2b48:	8a f0       	brmi	.+34     	; 0x2b6c <__mulsf3_pse+0x84>
    2b4a:	e1 f0       	breq	.+56     	; 0x2b84 <__mulsf3_pse+0x9c>
    2b4c:	88 23       	and	r24, r24
    2b4e:	4a f0       	brmi	.+18     	; 0x2b62 <__mulsf3_pse+0x7a>
    2b50:	ee 0f       	add	r30, r30
    2b52:	ff 1f       	adc	r31, r31
    2b54:	bb 1f       	adc	r27, r27
    2b56:	66 1f       	adc	r22, r22
    2b58:	77 1f       	adc	r23, r23
    2b5a:	88 1f       	adc	r24, r24
    2b5c:	91 50       	subi	r25, 0x01	; 1
    2b5e:	50 40       	sbci	r21, 0x00	; 0
    2b60:	a9 f7       	brne	.-22     	; 0x2b4c <__mulsf3_pse+0x64>
    2b62:	9e 3f       	cpi	r25, 0xFE	; 254
    2b64:	51 05       	cpc	r21, r1
    2b66:	70 f0       	brcs	.+28     	; 0x2b84 <__mulsf3_pse+0x9c>
    2b68:	5c cf       	rjmp	.-328    	; 0x2a22 <__fp_inf>
    2b6a:	a6 cf       	rjmp	.-180    	; 0x2ab8 <__fp_szero>
    2b6c:	5f 3f       	cpi	r21, 0xFF	; 255
    2b6e:	ec f3       	brlt	.-6      	; 0x2b6a <__mulsf3_pse+0x82>
    2b70:	98 3e       	cpi	r25, 0xE8	; 232
    2b72:	dc f3       	brlt	.-10     	; 0x2b6a <__mulsf3_pse+0x82>
    2b74:	86 95       	lsr	r24
    2b76:	77 95       	ror	r23
    2b78:	67 95       	ror	r22
    2b7a:	b7 95       	ror	r27
    2b7c:	f7 95       	ror	r31
    2b7e:	e7 95       	ror	r30
    2b80:	9f 5f       	subi	r25, 0xFF	; 255
    2b82:	c1 f7       	brne	.-16     	; 0x2b74 <__mulsf3_pse+0x8c>
    2b84:	fe 2b       	or	r31, r30
    2b86:	88 0f       	add	r24, r24
    2b88:	91 1d       	adc	r25, r1
    2b8a:	96 95       	lsr	r25
    2b8c:	87 95       	ror	r24
    2b8e:	97 f9       	bld	r25, 7
    2b90:	08 95       	ret

00002b92 <__divmodhi4>:
    2b92:	97 fb       	bst	r25, 7
    2b94:	07 2e       	mov	r0, r23
    2b96:	16 f4       	brtc	.+4      	; 0x2b9c <__divmodhi4+0xa>
    2b98:	00 94       	com	r0
    2b9a:	06 d0       	rcall	.+12     	; 0x2ba8 <__divmodhi4_neg1>
    2b9c:	77 fd       	sbrc	r23, 7
    2b9e:	08 d0       	rcall	.+16     	; 0x2bb0 <__divmodhi4_neg2>
    2ba0:	36 d0       	rcall	.+108    	; 0x2c0e <__udivmodhi4>
    2ba2:	07 fc       	sbrc	r0, 7
    2ba4:	05 d0       	rcall	.+10     	; 0x2bb0 <__divmodhi4_neg2>
    2ba6:	3e f4       	brtc	.+14     	; 0x2bb6 <__divmodhi4_exit>

00002ba8 <__divmodhi4_neg1>:
    2ba8:	90 95       	com	r25
    2baa:	81 95       	neg	r24
    2bac:	9f 4f       	sbci	r25, 0xFF	; 255
    2bae:	08 95       	ret

00002bb0 <__divmodhi4_neg2>:
    2bb0:	70 95       	com	r23
    2bb2:	61 95       	neg	r22
    2bb4:	7f 4f       	sbci	r23, 0xFF	; 255

00002bb6 <__divmodhi4_exit>:
    2bb6:	08 95       	ret

00002bb8 <__divmodsi4>:
    2bb8:	05 2e       	mov	r0, r21
    2bba:	97 fb       	bst	r25, 7
    2bbc:	16 f4       	brtc	.+4      	; 0x2bc2 <__divmodsi4+0xa>
    2bbe:	00 94       	com	r0
    2bc0:	0f d0       	rcall	.+30     	; 0x2be0 <__negsi2>
    2bc2:	57 fd       	sbrc	r21, 7
    2bc4:	05 d0       	rcall	.+10     	; 0x2bd0 <__divmodsi4_neg2>
    2bc6:	37 d0       	rcall	.+110    	; 0x2c36 <__udivmodsi4>
    2bc8:	07 fc       	sbrc	r0, 7
    2bca:	02 d0       	rcall	.+4      	; 0x2bd0 <__divmodsi4_neg2>
    2bcc:	46 f4       	brtc	.+16     	; 0x2bde <__divmodsi4_exit>
    2bce:	08 c0       	rjmp	.+16     	; 0x2be0 <__negsi2>

00002bd0 <__divmodsi4_neg2>:
    2bd0:	50 95       	com	r21
    2bd2:	40 95       	com	r20
    2bd4:	30 95       	com	r19
    2bd6:	21 95       	neg	r18
    2bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bda:	4f 4f       	sbci	r20, 0xFF	; 255
    2bdc:	5f 4f       	sbci	r21, 0xFF	; 255

00002bde <__divmodsi4_exit>:
    2bde:	08 95       	ret

00002be0 <__negsi2>:
    2be0:	90 95       	com	r25
    2be2:	80 95       	com	r24
    2be4:	70 95       	com	r23
    2be6:	61 95       	neg	r22
    2be8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bea:	8f 4f       	sbci	r24, 0xFF	; 255
    2bec:	9f 4f       	sbci	r25, 0xFF	; 255
    2bee:	08 95       	ret

00002bf0 <__umulhisi3>:
    2bf0:	a2 9f       	mul	r26, r18
    2bf2:	b0 01       	movw	r22, r0
    2bf4:	b3 9f       	mul	r27, r19
    2bf6:	c0 01       	movw	r24, r0
    2bf8:	a3 9f       	mul	r26, r19
    2bfa:	70 0d       	add	r23, r0
    2bfc:	81 1d       	adc	r24, r1
    2bfe:	11 24       	eor	r1, r1
    2c00:	91 1d       	adc	r25, r1
    2c02:	b2 9f       	mul	r27, r18
    2c04:	70 0d       	add	r23, r0
    2c06:	81 1d       	adc	r24, r1
    2c08:	11 24       	eor	r1, r1
    2c0a:	91 1d       	adc	r25, r1
    2c0c:	08 95       	ret

00002c0e <__udivmodhi4>:
    2c0e:	aa 1b       	sub	r26, r26
    2c10:	bb 1b       	sub	r27, r27
    2c12:	51 e1       	ldi	r21, 0x11	; 17
    2c14:	07 c0       	rjmp	.+14     	; 0x2c24 <__udivmodhi4_ep>

00002c16 <__udivmodhi4_loop>:
    2c16:	aa 1f       	adc	r26, r26
    2c18:	bb 1f       	adc	r27, r27
    2c1a:	a6 17       	cp	r26, r22
    2c1c:	b7 07       	cpc	r27, r23
    2c1e:	10 f0       	brcs	.+4      	; 0x2c24 <__udivmodhi4_ep>
    2c20:	a6 1b       	sub	r26, r22
    2c22:	b7 0b       	sbc	r27, r23

00002c24 <__udivmodhi4_ep>:
    2c24:	88 1f       	adc	r24, r24
    2c26:	99 1f       	adc	r25, r25
    2c28:	5a 95       	dec	r21
    2c2a:	a9 f7       	brne	.-22     	; 0x2c16 <__udivmodhi4_loop>
    2c2c:	80 95       	com	r24
    2c2e:	90 95       	com	r25
    2c30:	bc 01       	movw	r22, r24
    2c32:	cd 01       	movw	r24, r26
    2c34:	08 95       	ret

00002c36 <__udivmodsi4>:
    2c36:	a1 e2       	ldi	r26, 0x21	; 33
    2c38:	1a 2e       	mov	r1, r26
    2c3a:	aa 1b       	sub	r26, r26
    2c3c:	bb 1b       	sub	r27, r27
    2c3e:	fd 01       	movw	r30, r26
    2c40:	0d c0       	rjmp	.+26     	; 0x2c5c <__udivmodsi4_ep>

00002c42 <__udivmodsi4_loop>:
    2c42:	aa 1f       	adc	r26, r26
    2c44:	bb 1f       	adc	r27, r27
    2c46:	ee 1f       	adc	r30, r30
    2c48:	ff 1f       	adc	r31, r31
    2c4a:	a2 17       	cp	r26, r18
    2c4c:	b3 07       	cpc	r27, r19
    2c4e:	e4 07       	cpc	r30, r20
    2c50:	f5 07       	cpc	r31, r21
    2c52:	20 f0       	brcs	.+8      	; 0x2c5c <__udivmodsi4_ep>
    2c54:	a2 1b       	sub	r26, r18
    2c56:	b3 0b       	sbc	r27, r19
    2c58:	e4 0b       	sbc	r30, r20
    2c5a:	f5 0b       	sbc	r31, r21

00002c5c <__udivmodsi4_ep>:
    2c5c:	66 1f       	adc	r22, r22
    2c5e:	77 1f       	adc	r23, r23
    2c60:	88 1f       	adc	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	1a 94       	dec	r1
    2c66:	69 f7       	brne	.-38     	; 0x2c42 <__udivmodsi4_loop>
    2c68:	60 95       	com	r22
    2c6a:	70 95       	com	r23
    2c6c:	80 95       	com	r24
    2c6e:	90 95       	com	r25
    2c70:	9b 01       	movw	r18, r22
    2c72:	ac 01       	movw	r20, r24
    2c74:	bd 01       	movw	r22, r26
    2c76:	cf 01       	movw	r24, r30
    2c78:	08 95       	ret

00002c7a <_exit>:
    2c7a:	f8 94       	cli

00002c7c <__stop_program>:
    2c7c:	ff cf       	rjmp	.-2      	; 0x2c7c <__stop_program>
